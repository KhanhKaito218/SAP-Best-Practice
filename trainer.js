(function() {
    var request_headers_ = {};
    var before_ = null;
    var after_ = null;
    var error_ = null;
    var count_ = 0;
    var track_ = false;
    var store_ = {};

    function execute_action_(type) {
        if (type === 'before') {
            if (++count_ === 1 && before_) {
                before_.f.call(before_.s)
            }
        } else if (--count_ === 0 && after_) {
            after_.f.call(after_.s)
        }
    };

    function generate_uid_() {
        var domain = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];
        var nbr = domain.length;
        var ret = [];
        for (var i = 12; i-- > 0;) {
            var rdm = Math.floor(Math.random() * nbr);
            ret.push(domain[rdm])
        }
        return ret.join('')
    };
    window.XHR = {
        LastStatus: null,
        LastResponseText: null,
        LastResponseXML: null,
        Cleanup: function() {
            this.LastStatus = null;
            this.LastResponseText = null;
            this.LastResponseXML = null;
            before_ = null;
            after_ = null;
            error_ = null;
            store_ = {}
        },
        HasActiveX: function() {
            try {
                if (new ActiveXObject("Msxml2.XMLHTTP.3.0")) return true
            } catch (e) {
                try {
                    if (new ActiveXObject("Msxml2.XMLHTTP")) return true
                } catch (e) {
                    try {
                        if (new ActiveXObject("Microsoft.XMLHTTP")) return true
                    } catch (e) {}
                }
            }
            return false
        },
        Create: function() {
            if (!BROWSER.IE && window.XMLHttpRequest) {
                return new XMLHttpRequest()
            }
            try {
                return new ActiveXObject("Msxml2.XMLHTTP.3.0")
            } catch (e) {
                try {
                    return new ActiveXObject("Msxml2.XMLHTTP")
                } catch (e) {
                    try {
                        return new ActiveXObject("Microsoft.XMLHTTP")
                    } catch (e) {
                        if (window.XMLHttpRequest) {
                            return new XMLHttpRequest()
                        }
                    }
                }
            }
            return null
        },
        SetRequestHeaders: function(obj) {
            if (arguments[1]) {
                var rh = request_headers_;
                for (var i in rh) {
                    obj.setRequestHeader(i, rh[i])
                }
                request_headers_ = {}
            } else {
                request_headers_ = obj
            }
        },
        Request: function(method, url) {
            var data = arguments[2];
            var scope = arguments[3] || null;
            var success = typeof arguments[4] === 'function' ? arguments[4] : function() {};
            var error = arguments[5];
            var async = arguments[6] === false ? false : true;
            var type = arguments[7] || null;
            if (method === 'GET') data = null;
            if (data && typeof data !== 'string') data = JSON.stringify(data);
            var xhr = this.Create();
            if (!xhr) return null;
            if (async) {
                var id;
                if (track_) {
                    id = generate_uid_();
                    store_[id] = xhr
                }
                try {
                    xhr.open(method, url, true);
                    this.SetRequestHeaders(xhr, true);
                    xhr.onreadystatechange = function() {
                        if (xhr.readyState === 4) {
                            xhr.onreadystatechange = function() {};
                            if (track_) delete store_[id];
                            execute_action_('after');
                            XHR.Eval(xhr, scope, success, error, type, url);
                            xhr = null;
                            scope = null;
                            success = null;
                            error = null;
                            type = null;
                            id = null
                        }
                    };
                    execute_action_('before');
                    xhr.send(data)
                } catch (e) {}
                return xhr
            } else {
                try {
                    execute_action_('before');
                    xhr.open(method, url, false);
                    this.SetRequestHeaders(xhr, true);
                    xhr.send(data);
                    execute_action_('after')
                } catch (e) {}
                return this.Eval(xhr, scope, success, error, type, url)
            }
        },
        Eval: function(xhr, scope, success, error, type, url) {
            var r = null;
            var p = url.replace(/(.*?):.*$/, '$1');
            p = WCT.context.PROTOCOLS[p] ? p : 'file';
            XHR.LastStatus = xhr.status;
            XHR.LastResponseText = xhr.responseText;
            XHR.LastResponseXML = xhr.responseXML;
            if (xhr.status === 200 || p === 'file' && xhr.status === 0) {
                switch (type) {
                    case 'JSON':
                        try {
                            r = xhr.responseText.replace(/\r|\n|\t/g, '');
                            r = JSON.parse(r)
                        } catch (e) {
                            r = null
                        }
                        break;
                    case 'XML':
                        r = xhr.responseXML;
                        break;
                    case 'eval':
                        try {
                            r = eval('(' + xhr.responseText + ')')
                        } catch (e) {
                            r = null
                        }
                        break;
                    case 'string':
                        try {
                            r = eval('(' + xhr.responseText + ')')
                        } catch (e) {
                            r = xhr.responseText
                        }
                        break;
                    case 'raw':
                    default:
                        r = xhr.responseText;
                        break
                }
                success.call(scope, r)
            } else if (error) {
                error.call(scope, xhr.status, xhr.statusText, xhr.responseText)
            } else if (error_) {
                error_.f.call(error_.s, xhr.status, xhr.statusText, xhr.responseText)
            }
            return r
        },
        Abort: function(xhr) {
            xhr.onreadystatechange = function() {};
            if (xhr.readyState != 4) execute_action_('after');
            xhr.abort();
            for (var id in store_) {
                if (store_[id] === xhr) {
                    delete store_[id];
                    break
                }
            }
        },
        AbortAll: function() {
            var s = store_;
            store_ = {};
            for (var id in s) {
                var xhr = s[id];
                this.Abort(xhr)
            }
        },
        TrackAsyncRequests: function(track) {
            track_ = track;
            if (!track) store_ = {}
        },
        SetBeforeAction: function(fun) {
            if (fun) {
                before_ = {
                    f: fun,
                    s: arguments[1]
                }
            } else {
                before_ = null
            }
        },
        SetAfterAction: function(fun) {
            if (fun) {
                after_ = {
                    f: fun,
                    s: arguments[1]
                }
            } else {
                after_ = null
            }
        },
        SetDefaultErrorHandler: function(fun) {
            if (fun) {
                error_ = {
                    f: fun,
                    s: arguments[1]
                }
            } else {
                error_ = null
            }
        },
        GetA: function(url) {
            return this.Request('GET', WCT.GetEncodedURI(url), null, arguments[1], arguments[2], arguments[3], true, arguments[4])
        },
        GetS: function(url) {
            return this.Request('GET', WCT.GetEncodedURI(url), null, null, null, null, false, arguments[1])
        },
        PostA: function(url, data) {
            return this.Request('POST', url, data, arguments[2], arguments[3], arguments[4], true, arguments[5])
        },
        PostS: function(url, data) {
            return this.Request('POST', url, data, null, null, null, false, arguments[2])
        },
        PutA: function(url, data) {
            return this.Request('PUT', url, data, arguments[2], arguments[3], arguments[4], true, arguments[5])
        },
        PutS: function(url, data) {
            return this.Request('PUT', url, data, null, null, null, false, arguments[2])
        },
        DelA: function(url, data) {
            return this.Request('DELETE', url, data, arguments[2], arguments[3], arguments[4], true, arguments[5])
        },
        DelS: function(url, data) {
            return this.Request('DELETE', url, data, null, null, null, false, arguments[2])
        }
    }
})();
(function() {
    function _has_active_x() {
        try {
            if (new ActiveXObject("Msxml2.XMLHTTP.3.0")) return true
        } catch (e) {
            try {
                if (new ActiveXObject("Msxml2.XMLHTTP")) return true
            } catch (e) {
                try {
                    if (new ActiveXObject("Microsoft.XMLHTTP")) return true
                } catch (e) {}
            }
        }
        return false
    }
    var appv = navigator.appVersion;
    var plat = navigator.platform;
    var agnt = navigator.userAgent;
    window.BROWSER = {};
    BROWSER.EDGE = appv.indexOf('Edge') > 0 || appv === '5.0 (Windows NT 10.0; Win64; x64)';
    BROWSER.IE = !BROWSER.EDGE && ((document.all ? true : false) || !!window.MSStream);
    BROWSER.FIREFOX = false;
    BROWSER.CHROME = !BROWSER.EDGE && appv.indexOf('Chrome') > 0;
    BROWSER.SAFARI = !BROWSER.CHROME && !BROWSER.EDGE && appv.indexOf('Safari') > 0;
    BROWSER.IPAD = agnt.match(/iPad/i) != null;
    BROWSER.IPHONE = agnt.match(/iPhone/i) != null || agnt.match(/iPod/i) != null;
    if (BROWSER.EDGE) {
        /.*[Edge\/](\d\d)/.exec(appv);
        BROWSER.VERSION = parseInt(RegExp.$1) || 12
    } else if (BROWSER.IE) {
        if (appv.indexOf('like Gecko') >= 0) {
            var rv = appv.match(/rv:\d+/);
            if (rv) rv = Number(rv[0].substr(3));
            if (!rv || isNaN(rv)) rv = 11;
            BROWSER.VERSION = rv;
            BROWSER['IE' + rv] = true
        } else {
            var idx = appv.indexOf('MSIE ');
            var ver = idx >= 0 ? parseInt(appv.substr(idx + 5)) : 9;
            var engine = document.documentMode || (document.compatMode && document.compatMode == "CSS1Compat" ? 7 : 5);
            if (engine && ver != engine) {
                BROWSER.COMPAT_VIEW = true;
                ver = engine
            }
            BROWSER.VERSION = ver;
            BROWSER['IE' + ver] = true
        }
        BROWSER.ACTIVE_X = _has_active_x()
    } else if (!BROWSER.SAFARI && !BROWSER.CHROME) {
        BROWSER.FIREFOX = true
    }
    if ((BROWSER.FIREFOX || BROWSER.CHROME || BROWSER.SAFARI) && !BROWSER.EDGE) {
        var m = agnt.match(BROWSER.FIREFOX ? /Firefox\// : BROWSER.CHROME ? /Chrome\// : /Version\//);
        var v = m ? (m.index + m[0].length) : 0;
        if (v) BROWSER.VERSION = parseInt(agnt.substr(v)) || 1
    }
    window.PLATFORM = {
        WINDOWS: plat.indexOf('Win') >= 0,
        WINTABLET: navigator.msPointerEnabled && appv.match(/Tablet PC/) != null ? true : false,
        LINUX: plat.indexOf('Linux') >= 0,
        MAC: plat.indexOf('Mac') >= 0,
        WINCE: plat.indexOf('WinCE') >= 0,
        IOS: BROWSER.IPAD || BROWSER.IPHONE,
        ANDROID: agnt.match(/android/i) != null
    };
    if (PLATFORM.IOS) {
        var ver = appv.match(/OS (\d+)_\d+/)[1];
        ver = parseInt(ver, 10);
        if (typeof ver == 'number' && ver != 0) PLATFORM.VERSION = ver
    }
    if (PLATFORM.ANDROID) {
        var ver = appv.match(/Android\s([0-9\.]*)/)[1].replace(/\./g, '');
        ver = parseInt(ver, 10);
        if (typeof ver == 'number' && ver != 0) PLATFORM.VERSION = ver
    }
    BROWSER.METRO = false;
    if (BROWSER.IE && BROWSER.VERSION > 9) {
        try {
            var a = new ActiveXObject('htmlfile');
            a = null;
            PLATFORM.WINTABLET = false
        } catch (e) {
            BROWSER.METRO = true
        }
    }
    PLATFORM.MOBILE = PLATFORM.IOS || PLATFORM.ANDROID || PLATFORM.WINTABLET;
    BROWSER.MOBILE = PLATFORM.MOBILE;
    BROWSER.PHONE = BROWSER.IPHONE;
    BROWSER.TABLET = BROWSER.IPAD || PLATFORM.WINTABLET
})();
if (!Array.prototype.top) {
    Array.prototype.top = function() {
        var l = this.length;
        return l ? this[l - 1] : undefined
    }
}
if (!Array.prototype.max) {
    Array.prototype.max = function() {
        return Math.max.apply(Math, this)
    }
}
if (!Array.prototype.min) {
    Array.prototype.min = function() {
        return Math.min.apply(Math, this)
    }
}
if (!Array.prototype.sum) {
    Array.prototype.sum = function() {
        if (typeof this.reduce === 'function') {
            return this.reduce(function(a, b) {
                return a + b
            }, 0)
        } else {
            var s = 0;
            var i = this.length;
            while (i--) {
                s += this[i]
            }
            return s
        }
    }
}
if (!Array.prototype.shuffle) {
    Array.prototype.shuffle = function() {
        var h = [];
        var l = this.length;
        while (l--) {
            var idx = Math.round(Math.random() * l);
            var it = this.splice(idx, 1)[0];
            h.push(it)
        }
        return h.reverse()
    }
}
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(search) {
        var len = this.length;
        var from = Number(arguments[1]);
        if (isNaN(from)) {
            from = 0
        } else if (from < 0) {
            from = Math.ceil(from);
            from += len
        } else {
            from = Math.floor(from)
        }
        for (; from < len; from++) {
            if (this[from] === search) {
                return from
            }
        }
        return -1
    }
}
Array.prototype.indexOfAtt = function(search, att) {
    var len = this.length;
    var from = Number(arguments[2]);
    var sub = arguments[3] || null;
    if (isNaN(from)) {
        from = 0
    } else if (from < 0) {
        from = Math.ceil(from);
        from += len
    } else {
        from = Math.floor(from)
    }
    for (; from < len; from++) {
        var arr = null;
        var subs = Array.prototype.slice.call(arguments, 3);
        if (sub) {
            for (var i = 0, s = null; s = subs[i++];) {
                arr = this[from][s];
                if (arr) break
            }
        } else {
            arr = this[from]
        }
        if (arr[att] === search) {
            return from
        }
    }
    return -1
};
Array.prototype.indexOfAttCase = function(search, att_name) {
    var len = this.length;
    var from = Number(arguments[2]);
    if (isNaN(from)) {
        from = 0
    } else if (from < 0) {
        from = Math.ceil(from);
        from += len
    } else {
        from = Math.floor(from)
    }
    for (; from < len; from++) {
        var cur = this[from][att_name];
        if (cur && cur.toUpperCase() == search.toUpperCase()) {
            return from
        }
    }
    return -1
};
Array.prototype.toRangedString = function() {
    var l = this.length;
    if (!l) {
        return ''
    } else if (l == 1) {
        return this[0]
    }
    var del1 = arguments[0] || '~';
    var del2 = arguments[1] || ';';
    var copy = [];
    for (var i = 0; i < l; i++) {
        if (typeof this[i] !== 'number') return '';
        copy[i] = this[i]
    }
    copy.sort(function(a, b) {
        return a - b
    });
    var rs = [];
    var c = copy[0];
    var r = [c];
    for (var i = 1; i < l; i++) {
        var n = copy[i];
        if (n == c) {
            continue
        } else if (n == c + 1) {
            r[1] = n
        } else if (r.length) {
            rs.push(r.join(del1));
            r = [n]
        }
        c = n
    }
    if (r.length) rs.push(r.join(del1));
    return rs.join(del2)
};
Array.prototype.unique = function() {
    var l = this.length;
    var o = {};
    var a = [];
    for (var i = 0; i < l; i++) {
        var c = this[i];
        if (!o[c]) {
            o[c] = 1;
            a.push(c)
        }
    }
    return a
};
Array.prototype.toMap = function() {
    var cf = arguments[0] || {};
    var de = cf.delimiter;
    var mv = cf.multi_map_delimiter;
    var fb = cf.fallback_value;
    var tk = cf.trim_keys || false;
    var tv = cf.trim_values || false;
    var map = {};
    for (var i = this.length - 1; i >= 0; i--) {
        var c = typeof de === 'string' ? this[i].split(de) : [this[i]];
        var v = typeof c[1] === 'undefined' && typeof fb !== 'undefined' ? fb : c[1];
        var k = c[0];
        if (tk) k = k.trim();
        if (tv && typeof v === 'string') v = v.trim();
        map[k] = typeof map[k] === 'string' && typeof mv === 'string' ? map[k] + mv + v : v
    }
    return map
};
Array.prototype.isArray = true;
if (!Array.prototype.move) {
    Array.prototype.move = function(from, to) {
        this.splice(to, 0, this.splice(from, 1)[0])
    }
}
if (!String.prototype.trim) {
    String.prototype.trim = function() {
        return this.replace(/^\s+|\s+$/g, '')
    }
};
if (!String.prototype.toMaxLength) {
    String.prototype.toMaxLength = function(max) {
        if (this.length > max) {
            var s = arguments[1] || '';
            max -= s.length;
            return this.substr(0, max) + s
        }
        return this
    }
}
if (!String.prototype.isPrefix) {
    String.prototype.isPrefix = function(pref) {
        if (pref.length <= this.length) {
            var red = this.substr(0, pref.length);
            return red === pref
        }
        return false
    }
}
if (!String.prototype.toFirstUpperCase) {
    String.prototype.toFirstUpperCase = function() {
        return this.charAt(0).toUpperCase() + this.substr(1).toLowerCase()
    }
}
String.prototype.rangedToArray = function() {
    if (this == '') return [];
    del1 = arguments[0] || '~';
    del2 = arguments[1] || ';';
    var ra = [];
    var rs = this.split(del2);
    for (var i = 0, l = rs.length; i < l; i++) {
        var c = rs[i].split(del1);
        if (c.length == 1) {
            ra.push(Number(c[0]))
        } else {
            var min = Number(c[0]);
            var max = Number(c[1]);
            while (min <= max) {
                ra.push(min++)
            }
        }
    }
    return ra
};
String.prototype.html2txt = function() {
    return this.replace(/\n/g, ' ').replace(/<br>/gi, '\n').replace(/<li>/gi, '\n').replace(/<\/p>/gi, '\n').replace(/<\/h[0-9]>/gi, '\n').replace(/<[^>]*>/g, '').replace(/&nbsp;/gi, ' ').replace(/&lt;/gi, '<').replace(/&gt;/gi, '>')
};
if (!Function.prototype.bind) {
    Function.prototype.bind = function(o_this) {
        if (typeof this !== 'function') {
            throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable')
        }
        var a_args = Array.prototype.slice.call(arguments, 1);
        var f_to_bind = this;
        var f_nop = function() {};
        var f_bound = function() {
            return f_to_bind.apply(this instanceof f_nop && o_this ? this : o_this, a_args.concat(Array.prototype.slice.call(arguments)))
        };
        f_nop.prototype = this.prototype;
        f_bound.prototype = new f_nop();
        return f_bound
    }
}
if (!window.JSON) JSON = {};
if (typeof Date.prototype.toJSON != 'function') {
    Date.prototype.toJSON = function() {
        var y = this.getUTCFullYear();
        var m = this.getUTCMonth() + 1;
        var d = this.getUTCDate();
        var h = this.getUTCHours();
        var mm = this.getUTCMinutes();
        var s = this.getUTCSeconds();
        if (m < 10) m = '0' + m;
        if (d < 10) d = '0' + d;
        if (h < 10) h = '0' + h;
        if (mm < 10) mm = '0' + mm;
        if (s < 10) s = '0' + s;
        return y + '-' + m + '-' + d + 'T' + h + ':' + mm + ':' + s + 'Z'
    };
    String.prototype.toJSON = function() {
        return this.valueOf()
    };
    Number.prototype.toJSON = function() {
        return this.valueOf()
    };
    Boolean.prototype.toJSON = function() {
        return this.valueOf()
    }
}
if (typeof JSON.stringify != 'function') {
    JSON.stringify = function(val) {
        var quote = function(s) {
            var e = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
            var m = {
                '\b': '\\b',
                '\t': '\\t',
                '\n': '\\n',
                '\f': '\\f',
                '\r': '\\r',
                '"': '\\"',
                '\\': '\\\\'
            };
            var f = function(a) {
                return typeof m[a] == 'string' ? m[a] : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4)
            };
            e.lastIndex = 0;
            return '"' + (e.test(s) ? s.replace(e, f) : s) + '"'
        };
        var str = function(k, h) {
            var v = h[k];
            v && typeof v == 'object' && typeof v.toJSON == 'function' && (v = v.toJSON(k));
            var t = typeof v;
            switch (t) {
                case 'string':
                    return quote(v);
                    break;
                case 'number':
                    return isFinite(v) ? (v + '') : 'null';
                    break;
                case 'boolean':
                    return v.toString();
                    break;
                case 'object':
                    if (!v) return 'null';
                    var p = [];
                    var d1 = '{';
                    var d2 = '}';
                    if (Object.prototype.toString.apply(v) == '[object Array]') {
                        d1 = '[';
                        d2 = ']';
                        for (var i = 0, l = v.length; i < l; i++) {
                            p.push(str(i, v) || 'null')
                        }
                    } else {
                        for (var k in v) {
                            if (!Object.hasOwnProperty.call(v, k)) continue;
                            var s = str(k, v);
                            s && p.push(quote(k) + ':' + s)
                        }
                    }
                    return d1 + p.join(',') + d2;
                    break;
                case 'undefined':
                case 'unknown':
                    return;
                    break
            }
        };
        return str('', {
            '': val
        })
    }
}
if (typeof JSON.parse != 'function') {
    JSON.parse = function(text) {
        return eval('(' + text + ')')
    }
}
if ((!window.PLATFORM || !PLATFORM.WINCE) && JSON.stringify(document.createElement('input').value) === '"null"') {
    (function() {
        var orig = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value').get;
        Object.defineProperty(HTMLInputElement.prototype, 'value', {
            get: function() {
                var v = orig.call(this);
                return v === '' ? '' : v
            }
        })
    })()
}

function Log(msg) {
    if (window.DEBUG) {
        Log2Box(msg);
        if (top.console && top.console.log) {
            if (arguments[1] && top.console.trace) {
                top.console.trace()
            }
            top.console.log(msg)
        } else if (typeof opera != 'undefined' && opera.postError) {
            opera.postError(msg)
        }
        if (arguments[1]) {
            msg = typeof msg == 'string' ? msg : 'ABNORMAL PROGRAM TERMINATION!';
            throw new Error(msg)
        }
    } else if (window.EDIT_MODE) {
        Log2Box(msg)
    }
};

function Log2Box(msg) {
    if (window.MANAGER && MANAGER.handler) {
        var h = MANAGER.handler.GetActive();
        h = h && h.GetSlideHandler && h.GetSlideHandler(0) || null;
        if (h) {
            h.Log(msg);
            return
        }
    }
    try {
        if (typeof msg == 'object') msg = JSON.stringify(msg)
    } catch (e) {}
    var d = $('Log2Box');
    if (!d) {
        d = $$('div');
        d.id = 'Log2Box';
        d.style.position = 'fixed';
        d.style.width = '300px';
        d.style.height = '300px';
        d.style.bottom = '2px';
        d.style.right = '2px';
        d.style.overflow = 'auto';
        d.style.fontSize = '7pt';
        d.style.fontFamily = 'Lucida Sans';
        d.style.border = '1px solid #888888';
        d.style.backgroundColor = '#eeeeee';
        d.style.cursor = 'pointer';
        document.body.appendChild(d);
        if (BROWSER.IE && BROWSER.VERSION > 7 && BROWSER.VERSION < 9) {
            if (BROWSER.IE8) {
                d.style.msFilter = 'progid:DXImageTransform.Microsoft.Alpha(Opacity=0.75)'
            } else {
                try {
                    if (d.filters && d.filters.alpha) {
                        d.filters.alpha.opacity = '0.75'
                    } else {
                        d.style.filter = "alpha(opacity=0.75)"
                    }
                } catch (e) {}
            }
        } else {
            d.style.opacity = '0.75'
        }
        d.ondblclick = function() {
            var l = $('Log2Box');
            if (l.innerHTML != '') {
                l.innerHTML = ''
            } else {
                l.parentNode.removeChild(l)
            }
        };
        d.onmousedown = function(evt) {
            evt = evt || event || window.event;
            window.drag_logbox = true;
            WCT.event.Cancel(evt)
        };
        d.onmousemove = function(evt) {
            evt = evt || event || window.event;
            if (evt && window.drag_logbox) {
                var b = $('Log2Box');
                b.style.left = evt.clientX - 150 + 'px';
                b.style.top = evt.clientY - 150 + 'px';
                WCT.event.Cancel(evt)
            }
        };
        d.onmouseup = function(evt) {
            evt = evt || event || window.event;
            window.drag_logbox = false;
            WCT.event.Cancel(evt)
        }
    }
    if (d.firstChild) {
        d.insertBefore($$('br'), d.firstChild);
        d.insertBefore($$2('-- ' + msg), d.firstChild)
    } else {
        d.appendChild($$2('-- ' + msg))
    }
};

function ClearLog() {
    var d = $('Log2Box');
    if (d) d.innerHTML = ''
}

function Log2Win(msg) {
    var w = window.p_Log2Win_;
    var b = null;
    if (w && typeof w.document == 'unknown') w = null;
    if (!w) {
        w = window.open('about:blank', WCT.uid.Generate(10), 'top=20,left=20,width=500,height=600,fullscreen=0,menubar=0,toolbar=0,location=false,resizable=1,scrollbars=1,status=0');
        window.p_Log2Win_ = w;
        b = w.document.body;
        b.style.color = 'black';
        b.style.fontSize = '7pt';
        b.style.fontFamily = 'Lucida Sans'
    } else {
        b = w.document.body
    }
    b.innerHTML = '-- ' + msg + '<br/>' + b.innerHTML
};

function $(id) {
    var doc = arguments[1] || document;
    return doc.getElementById(id)
};

function $$(type) {
    if (BROWSER.IE && BROWSER.VERSION < 9) {
        if (['article', 'header', 'footer'].indexOf(type.toLowerCase()) >= 0) type = 'div'
    }
    var doc = arguments[1] || document;
    return doc.createElement(type)
};

function $$2(text) {
    var doc = arguments[1] || document;
    return doc.createTextNode(text)
};
var WCT = {
    Cleanup: function() {
        if (WCT.timeout) WCT.timeout.Cleanup();
        if (WCT.image_watcher) WCT.image_watcher.Cleanup();
        if (WCT.event) {
            if (WCT.event.hotkey) WCT.event.hotkey.Cleanup();
            if (WCT.event.touches) WCT.event.touches.Cleanup()
        }
        if (WCT.dnd) WCT.dnd.Cleanup();
        if (WCT.transition) WCT.transition.Cleanup();
        if (WCT.iframe) WCT.iframe.Cleanup();
        if (WCT.Fader) WCT.Fader.Cleanup();
        if (WCT.QrCode) WCT.QrCode.Cleanup();
        if (WCT.Tree) WCT.Tree.Cleanup();
        if (WCT.Select) WCT.Select.Cleanup();
        if (WCT.PicView) WCT.PicView.Cleanup();
        if (WCT.Propsheet) WCT.Propsheet.Cleanup();
        if (WCT.SplitterButton) WCT.SplitterButton.Cleanup();
        if (WCT.AdaptableClasses) WCT.AdaptableClasses.Cleanup();
        if (WCT.XHR) WCT.XHR.Cleanup();
        if (window.XHR) XHR.Cleanup();
        if (WCT.Controls) WCT.Controls.Cleanup()
    }
};
WCT.ExtendObject = function(dest, src) {
    for (var o in src) {
        dest[o] = src[o]
    }
    return dest
};
WCT.ExtendObject(WCT, {
    $: window.$,
    $$: window.$$,
    $$2: window.$$2,
    BROWSER: window.BROWSER,
    PLATFORM: window.PLATFORM,
    GetEncodedURI: function(url) {
        var m = url.match(/\?(.*)/);
        if (m) url = url.replace(m[1], encodeURI(m[1]));
        return url
    },
    SetNodeText: function(node, text) {
        node.innerHTML = '';
        doc = arguments[2] || document;
        node.appendChild(doc.createTextNode(text))
    },
    IsImage: function(addr) {
        return !!addr.match(/\.(gif|jpg|png|bmp|jpeg)$/i)
    },
    IsPng: function(addr) {
        return !!addr.match(/\.(png)$/i)
    },
    IsHtml5VideoFormat: function(addr) {
        return !!addr.match(/\.(mp4|ogg|webm)$/i)
    },
    IsHtml5AudioFormat: function(addr) {
        return !!addr.match(/\.(mp3|ogg|wav)$/i)
    },
    IsArchive: function(addr) {
        return !!addr.match(/\.(dkp)$/i)
    },
    ClampBoolean: function(v) {
        if (typeof v === 'boolean') {
            return v
        } else if (typeof v === 'number') {
            return v === 1
        } else if (v === 'true' || v === '1' || v === 'yes') {
            return true
        } else if (arguments[1] && v !== 'false' && v !== '0' && v !== 'no') {
            return null
        }
        return false
    },
    ReverseBoolean: function(v, type) {
        if (type === 'BOOL_0_1') {
            v = v ? '1' : '0'
        } else if (type === 'BOOL_YES_NO') {
            v = v ? 'yes' : 'no'
        } else if (type === 'BOOL_TRUE_FALSE') {
            v = v ? 'true' : 'false'
        }
        return v
    },
    CleanupObject: function(obj) {
        if (typeof obj !== 'object' || !obj) return;
        if (obj.isArray) {
            for (var i = obj.length - 1; i >= 0; i--) {
                this.CleanupObject(obj[i]);
                obj[i] = null
            }
        } else {
            for (var i in obj) {
                this.CleanupObject(obj[i]);
                delete obj[i]
            }
        }
    },
    ReverseObject: function(obj) {
        var r = {};
        for (var key in obj) {
            r[obj[key]] = key
        }
        return r
    },
    ObjectToArray: function(obj, del) {
        var c = arguments[2] || {};
        var r = [];
        if (c.not_null) {
            for (var key in obj) {
                if (obj[key] != null) r.push(key + del + obj[key])
            }
        } else {
            for (var key in obj) {
                r.push(key + del + obj[key])
            }
        }
        return r
    },
    DeepEquals: function(src1, src2) {
        if (src1 === src2) return true;
        var o1 = typeof src1 === 'object';
        var o2 = typeof src2 === 'object';
        if (!o1 && !o2 || !src1 || !src2) {
            return src1 == src2
        } else if (o1 && o2) {
            if (src1.isArray != src2.isArray) return false;
            if (src1.isArray) {
                var l = src1.length;
                if (l !== src2.length) return false;
                for (var i = l - 1, c1, c2; i >= 0; i--) {
                    c1 = src1[i];
                    c2 = src2[i];
                    if (typeof c1 !== 'object' && typeof c2 !== 'object' || !c1 || !c2) {
                        if (c1 != c2) return false
                    } else if (!this.DeepEquals(c1, c2)) {
                        return false
                    }
                }
            } else {
                var c1;
                var c2;
                for (var i in src1) {
                    c1 = src1[i];
                    c2 = src2[i];
                    if (typeof c1 !== 'object' && typeof c2 !== 'object' || !c1 || !c2) {
                        if (c1 != c2) return false
                    } else if (!this.DeepEquals(c1, c2)) {
                        return false
                    }
                }
                for (var i in src2) {
                    if (!src1.hasOwnProperty(i)) return false
                }
            }
            return true
        }
        return false
    },
    GetEntityList: function(env, ctx) {
        var ret = {
            group: null,
            book: null,
            project: null,
            cdoc: null,
            slide: null
        };
        var url = '.tree_path';
        if (typeof WEB_EDITOR !== 'undefined' && WEB_EDITOR) {
            var scp = 'project';
            var scid = ctx.Get(scp);
            if (!scid) {
                scp = 'slide';
                scid = ctx.Get(scp)
            }
            url = scp + '!' + scid + ':' + url
        }
        var tp = env.GetS(url, null, ctx);
        if (tp.response) tp = tp.response;
        tp = tp && tp.paths || [];
        tp = tp[0] || null;
        if (!tp) return ret;
        for (var i = 0, c = null, s = 0; c = tp[i++];) {
            if (ret[c.type] == null) {
                ret[c.type] = c.uid;
                if (++s == 5) break
            }
        }
        return ret
    },
    ExtendHeadByJS: function(url, content) {
        var wnd = arguments[2] || window.top;
        var name = arguments[3] || null;
        var doc = wnd.document;
        var head = doc.getElementsByTagName('head')[0];
        var dom = null;
        if (head) {
            dom = $$('script', doc);
            dom.setAttribute('type', 'text/javascript');
            name && dom.setAttribute('name', name);
            if (url) {
                dom.setAttribute('src', url)
            } else if (content) {
                try {
                    dom.innerHTML = content
                } catch (e) {
                    dom.text = content
                }
            }
            head.appendChild(dom)
        }
        return dom
    },
    ExtendHeadByJSList: function(urls, wnd) {
        if (!urls.length) return;
        var doc = wnd.document;
        var head = doc.getElementsByTagName('head')[0];
        var dom = $$('script', doc);
        dom.setAttribute('type', 'text/javascript');
        dom.setAttribute('src', urls.shift());
        dom.onload = function() {
            WCT.ExtendHeadByJSList(urls, wnd)
        };
        head.appendChild(dom)
    },
    ExtendHeadByCSS: function(url, rules) {
        var wnd = arguments[2] || window.top;
        var name = arguments[3] || null;
        var doc = wnd.document;
        var head = doc.getElementsByTagName('head')[0];
        var dom = null;
        if (head) {
            if (url) {
                if (doc.createStyleSheet) {
                    dom = WCT.dom.CreateElementMSIE('style', 'text/css', null, doc);
                    head.appendChild(dom);
                    var ss = doc.styleSheets[doc.styleSheets.length - 1];
                    ss.addImport(url)
                } else {
                    dom = doc.createElement('link');
                    dom.type = 'text/css';
                    dom.rel = 'stylesheet';
                    dom.href = url;
                    name && dom.setAttribute('name', name);
                    head.appendChild(dom)
                }
            } else if (rules && rules.length) {
                dom = doc.createElement('style');
                dom.setAttribute('type', 'text/css');
                name && dom.setAttribute('name', name);
                head.appendChild(dom);
                var ss = doc.styleSheets[doc.styleSheets.length - 1];
                if (ss.insertRule) {
                    for (var i = rules.length - 1; i >= 0; i--) {
                        var r = rules[i].selector + '{' + rules[i].rule + '}';
                        ss.insertRule(r, 0)
                    }
                } else if (ss.addRule) {
                    for (var i = rules.length - 1; i >= 0; i--) {
                        ss.addRule(rules[i].selector, rules[i].rule, 0)
                    }
                }
            }
        }
        return dom
    },
    ArabicToRoman: function(nbr) {
        if (nbr > 0 && nbr < 8000) {
            var am = ['', 'M', 'MM', 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM'];
            var ac = ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM'];
            var at = ['', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC'];
            var ao = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'];
            var m = Math.floor(nbr / 1000);
            nbr %= 1000;
            var c = Math.floor(nbr / 100);
            nbr %= 100;
            var t = Math.floor(nbr / 10);
            nbr %= 10;
            return am[m] + ac[c] + at[t] + ao[nbr]
        } else {
            return nbr + ''
        }
    },
    ArabicToLetters: function(nbr) {
        var res = '';
        while (nbr >= 27) {
            var n = Math.floor(nbr / 27);
            var s = String.fromCharCode(n + 64);
            res += s;
            nbr %= 26
        }
        res += String.fromCharCode(nbr + 64);
        return res
    },
    GetTimeZoneOffset: function() {
        var off = (new Date()).getTimezoneOffset().toString();
        return arguments[0] ? off : off.substr(0, 1) === '-' ? off.substr(1) : '-' + off
    },
    ConvertUTCToLocal: function(data) {
        var offset = WCT.GetTimeZoneOffset(arguments[1]);
        var date = new Date('July 05, 2017 ' + data.time);
        var oDay = date.getDay();
        date.setMinutes(date.getMinutes() + parseInt(offset));
        var dayOffset = date.getDay() - oDay;
        var dataDate = data.date;
        var asString = false;
        if (dayOffset && dataDate) {
            if (!dataDate.isArray) {
                asString = true;
                dataDate = [dataDate]
            }
            for (var i = 0, l = dataDate.length; i < l; i++) {
                var a = dataDate[i];
                var b, c;
                if (~a.search('/')) {
                    var res = a.split('/');
                    if (isNaN(parseInt(res[1]))) continue;
                    b = res[0];
                    a = res[1];
                    c = res[2]
                } else {
                    if (isNaN(parseInt(a))) continue
                }
                switch (data.pattern) {
                    case 'weekly':
                        a = parseInt(a) + dayOffset;
                        if (a === 0) a = 7;
                        if (a === 8) a = 1;
                        break;
                    case 'monthly':
                        a = parseInt(a) + dayOffset;
                        if (b) {
                            if (a === 0) a = 7;
                            if (a === 8) a = 1
                        }
                        break;
                    case 'yearly':
                        if (!c) {
                            var currentYear = (new Date()).getFullYear();
                            var cDate = new Date(currentYear, parseInt(b) - 1, parseInt(a) + dayOffset);
                            b = cDate.getMonth() + 1;
                            a = cDate.getDate()
                        } else {
                            a = parseInt(a) + dayOffset
                        }
                        break
                }
                dataDate[i] = (b ? b + '/' : '') + a;
                if (c) dataDate[i] += '/' + c
            }
        }
        var gh = date.getHours();
        var gm = date.getMinutes();
        if (gh < 10) gh = '0' + gh;
        if (gm < 10) gm = '0' + gm;
        data.time = gh + ':' + gm;
        if (dataDate) data.date = asString ? dataDate[0] : dataDate
    },
    ConvertLocalToUTC: function(data) {
        WCT.ConvertUTCToLocal(data, true)
    },
    TimestampToTimeString: function(t) {
        var d = new Date(t);
        var lts = arguments[1];
        d = d[lts ? 'toLocaleTimeString' : 'toGMTString']().split(' ');
        if (!lts) d = d.splice(4, 1);
        var ms = t % 1000;
        return d[0] + '.' + ms
    },
    IsLanguageRTL: function(lang) {
        if (!lang) return false;
        var code = lang.substr(0, 2);
        return code == 'ar' || code == 'he'
    },
    IsEmptyObject: function(obj) {
        if (typeof obj !== 'object' || !obj) return true;
        if (window.Object && Object.keys) {
            return Object.keys(obj).length === 0
        }
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) return false
        }
        return true
    },
    DecToHex: function(value) {
        if (typeof value !== 'number') return value;
        var m = {
            10: 'A',
            11: 'B',
            12: 'C',
            13: 'D',
            14: 'E',
            15: 'F'
        };
        var s = '';
        while (value) {
            var r = value % 16;
            s += m[r] || r;
            value = Math.floor(value / 16)
        }
        return '#' + s.split('').reverse().join('')
    },
    ToRGBColor: function(value) {
        if (typeof value !== 'number') return value;
        return 'rgb(' + (value & 0xFF) + ', ' + ((value & 0xFF00) >> 8) + ', ' + ((value & 0xFF0000) >> 16) + ')'
    },
    RgbToHex: function(rgb) {
        if (rgb.match(/^rgb\(.+,.+,.+\)$/)) {
            var colors = rgb.substring(4, rgb.length - 1).split(',');
            var result = [];
            for (var i = 0, len = colors.length; i < len; i++) {
                var color = Number(colors[i].trim());
                if (isNaN(color)) return rgb;
                var hex = color.toString(16);
                hex = hex.length == 1 ? '0' + hex : hex;
                result.push(hex)
            }
            return '#' + result.join('')
        } else if (rgb.match(/^#[0-9A-Fa-f]+/)) {
            return rgb.toUpperCase()
        }
        return rgb
    },
    HexToRgb: function(hex) {
        hex = hex.substr(1).split('');
        var b = [];
        if (hex.length == 3) {
            b.push(hex[0] + hex[0], hex[1] + hex[1], hex[2] + hex[2])
        } else if (hex.length == 6) {
            b.push(hex[0] + hex[1], hex[2] + hex[3], hex[4] + hex[5])
        }
        var rgb = b.length == 3 ? {
            r: parseInt(b[0], 16),
            g: parseInt(b[1], 16),
            b: parseInt(b[2], 16),
            a: 1
        } : {
            r: 0,
            g: 0,
            b: 0,
            a: 1
        };
        var t = arguments[1];
        return typeof t === 'number' && t >= 0 && t <= 1 ? 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + t + ')' : 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')'
    },
    RemoveHTMLTags: function(text) {
        return text.replace(/(<([^>]+)>)/ig, '')
    },
    KNOWN_PLACEHOLDER: {
        description: 1,
        shortdesc: 1,
        g_linktextpraxis: 1,
        bubbletext: 1,
        explanation_d: 1,
        explanation_p: 1,
        bookdescription: 1,
        slidetitle: 1,
        slidedescription: 1,
        chaptertitle: 1,
        chapterdescription: 1,
        quiz_correct_answers: 1,
        autostart: 2,
        booktitle: 2,
        caption: 2,
        categories: 2,
        clone_master: 2,
        clone_src: 2,
        content_slide: 2,
        context_id: 2,
        created_by: 2,
        creation_time: 2,
        current_path: 2,
        cwa_assignee: 2,
        cwa_log: 2,
        cwa_must_have: 2,
        cwa_recommended_sync_mode: 2,
        cwa_shortcut: 2,
        cwa_status: 2,
        cwa_sync_mode: 2,
        cwa_sync_vis: 2,
        cwa_tags: 2,
        cwa_task_type: 2,
        cwa_version: 2,
        cwa_workflow_vis: 2,
        da_context_id: 2,
        foreign_uid: 2,
        global: 2,
        hidden: 2,
        hide_audio_controls: 2,
        hide_index_page_button: 2,
        hide_navigation_controls: 2,
        hide_panel: 2,
        hide_progress_control: 2,
        hide_search_button: 2,
        hide_toc_control: 2,
        keywords: 2,
        language: 2,
        lms_cfg_track_completion: 2,
        modification_time: 2,
        modified_by: 2,
        pagecount: 2,
        pagenumber: 2,
        preview: 2,
        ref_links_key: 2,
        ref_links_vis: 2,
        roles: 2,
        single_click_opens_book: 2,
        startlink: 2,
        style: 2,
        sub_type: 2,
        tclass: 2,
        ttstext: 2,
        uid: 2,
        text_preview: 2
    },
    CleanupHTMLString: function(str) {
        if (!str || typeof str !== 'string') return str;
        var key = arguments[1] || '';
        if (key && key.indexOf('.') >= 0) key = key.split('.')[1];
        var p = WCT.KNOWN_PLACEHOLDER[key] || 1;
        return p === 1 ? str : str.replace(/</g, '&lt;').replace(/>/g, '&gt;')
    },
    PreventXSS: function(str) {
        if (!str) return str;
        str = this.RemoveEventHandler(str, arguments[1]);
        str = this.RemoveIFrameJavascriptProtocol(str);
        return str
    },
    RemoveEventHandler: function(str) {
        var regexp = new RegExp(arguments[1] ? 'on[error|load]\\w+=(\'[^\']*\'|"[^"]*"|\\S*)' : 'on\\w+=(\'[^\']*\'|"[^"]*"|\\S*)', 'gi');
        return str.replace(/<[^>]+/g, function(match) {
            return match.replace(regexp, '')
        })
    },
    RemoveIFrameJavascriptProtocol: function(str) {
        var regexp = new RegExp(/javascript:/ig);
        return str.replace(/<iframe[^>]+/ig, function(match) {
            return match.replace(regexp, '')
        })
    }
});
(function() {
    function dc_arr_(s) {
        var l = s.length;
        var r = new Array(l);
        for (var i = l - 1, c; i >= 0; i--) {
            c = s[i];
            if (typeof c !== 'object' || !c) {
                r[i] = c
            } else {
                r[i] = c.isArray ? dc_arr_(c) : dc_obj_(c)
            }
        }
        return r
    };

    function dc_obj_(s) {
        var r = {};
        var c;
        for (var i in s) {
            c = s[i];
            if (typeof c !== 'object' || !c) {
                r[i] = c
            } else {
                r[i] = c.isArray ? dc_arr_(c) : dc_obj_(c)
            }
        }
        return r
    };
    WCT.DeepCopy = function(src) {
        if (typeof src !== 'object' || !src) return src;
        var e = arguments[1];
        if (typeof e !== 'object') e = null;
        var r;
        if (src.isArray) {
            r = dc_arr_(src);
            if (e && e.isArray) r = r.concat(e)
        } else {
            r = dc_obj_(src);
            if (e && !e.isArray) WCT.ExtendObject(r, e)
        }
        return r
    };
    WCT.FullDeepCopy = function(src) {
        var dest = arguments[1] || (src.isArray ? [] : {});
        for (var property in src) {
            if (typeof src[property] === "object" && src[property] !== null) {
                dest[property] = dest[property] || (src[property].isArray ? [] : {});
                WCT.FullDeepCopy(src[property], dest[property])
            } else {
                dest[property] = src[property]
            }
        }
        return dest
    };
    WCT.indexOfAtt = function(array, attName, value) {
        for (var i = 0, l = array.length; i < l; i++) {
            if (array[i][attName] === value) return i
        }
        return -1
    };
    WCT.indexOfAttCase = function(array, attName, value) {
        if (!value) return -1;
        for (var i = 0, l = array.length; i < l; i++) {
            var attrVal = array[i][attName];
            if (attrVal && attrVal.toLowerCase() === value.toLowerCase()) return i
        }
        return -1
    }
})();
(function() {
    var ID_ = 'WCT_HL_N_ID';

    function plain_(d) {
        var c = d.childNodes;
        var t = [];
        for (var i = 0, n = null; n = c[i++];) {
            if (n.nodeType == WCT.dom.ELEMENT_NODE) {
                t.push(plain_(n))
            } else if (n.nodeType == WCT.dom.TEXT_NODE) {
                t.push(n.nodeValue)
            }
        }
        return t.join('')
    };

    function get_id_(d) {
        var id = d.getAttribute(ID_);
        return id != null ? Number(id) : -1
    };

    function get_tn_(d) {
        var id = get_id_(d);
        return id >= 0 && d.childNodes[id] || null
    };

    function go_next_(d) {
        var id = get_id_(d);
        d.setAttribute(ID_, ++id);
        return d.childNodes[id]
    };

    function get_next_tn_(d) {
        do {
            var n = go_next_(d);
            while (n) {
                if (n.nodeType == WCT.dom.TEXT_NODE) return d;
                var r = get_next_tn_(n);
                if (r) return r;
                n = go_next_(d)
            }
            d = d.parentNode
        } while (d);
        return null
    };

    function move_(d, t) {
        var l = t.length;
        do {
            d = get_next_tn_(d);
            if (!d) return null;
            var v = get_tn_(d).nodeValue.length;
            if (l < v) {
                return {
                    d: d,
                    o: l
                }
            }
            l -= v
        } while (l);
        d = get_next_tn_(d);
        return d ? {
            d: d,
            o: 0
        } : null
    };

    function mark_(d, o, t, cn) {
        var n = get_tn_(d);
        var r = null;
        var nv = n.nodeValue;
        if (!o) {
            var m = $$('span');
            m.className = cn;
            var vl = nv.length;
            var tl = t.length;
            if (tl >= vl) {
                m.appendChild($$2(nv));
                d.replaceChild(m, n);
                if (tl > vl) {
                    d = get_next_tn_(d);
                    if (!d) return null;
                    return mark_(d, 0, t.substr(vl), cn)
                }
            } else {
                r = $$2(nv.substr(tl));
                m.appendChild($$2(nv.substr(0, tl)));
                d.replaceChild(r, n);
                d.insertBefore(m, r)
            }
        } else {
            var b = $$2(nv.substr(0, o));
            r = $$2(nv.substr(o));
            d.replaceChild(r, n);
            d.insertBefore(b, r);
            go_next_(d);
            return mark_(d, 0, t, cn)
        }
        return d
    };

    function clean_(d) {
        for (var i = 0, c = d.childNodes, n = null; n = c[i++];) {
            if (n.nodeType == WCT.dom.ELEMENT_NODE) {
                n.removeAttribute(ID_);
                clean_(n)
            }
        }
    };
    WCT.HighlightHtmlString = function(html, search, classname) {
        if (!html) return html;
        var d = $$('div');
        d.innerHTML = html;
        var x = new RegExp(search, 'i');
        var t = plain_(d);
        var i = t.search(x);
        var l = search.length;
        var p = [];
        while (i >= 0) {
            p.push(t.substr(0, i));
            p.push(t.substr(i, l));
            t = t.substr(i + l);
            i = t.search(x)
        };
        if (!p.length) return html;
        var n = d;
        do {
            var o = move_(n, p.shift());
            if (!o) return html;
            n = mark_(o.d, o.o, p.shift(), classname);
            if (!n) return html
        } while (p.length);
        clean_(d);
        return d.innerHTML
    };
    WCT.HasHtmlString = function(html, search) {
        var d = $$('div');
        d.innerHTML = html;
        var x = new RegExp(search, 'i');
        var t = plain_(d);
        return t.search(x) >= 0
    }
})();
(function() {
    var type_map_ = {
        Duration: 'number',
        IconID: 'number',
        BOOL_0_1: 'boolean',
        BOOL_YES_NO: 'boolean',
        BOOL_TRUE_FALSE: 'boolean',
        INTEGER: 'number',
        IMAGE_WH: 'image_wh',
        RELPOS: 'relpos',
        RELPOS_ELEMREF: 'relpos',
        RELPOS_RECT: 'relpos',
        SIZE: 'size',
        POSSIZE: 'possize',
        POSITION: 'position'
    };
    WCT.ReverseTypedValue = function(value, type) {
        switch (type_map_[type] || type) {
            case 'boolean':
                return WCT.ReverseBoolean(value, type);
            case 'relpos':
            case 'relpos_rect':
            case 'relpos_elemref':
                if (!value) return value;
                var pos = {};
                if (value.frame) pos.frame = WCT.DeepCopy(value.frame);
                if (value.element) pos.element = WCT.DeepCopy(value.element);
                if (value.XY) pos.posElement = WCT.DeepCopy(value.XY);
                if (value.XY2) pos.rectElement = WCT.DeepCopy(value.XY2);
                if (value.DocXY) pos.posDocument = WCT.DeepCopy(value.DocXY);
                if (value.DocXY2) pos.rectDocument = WCT.DeepCopy(value.DocXY2);
                if (value.offsetX) pos.offsetX = value.offsetX;
                if (value.offsetY) pos.offsetY = value.offsetY;
                return pos;
            default:
                return value
        }
    };
    WCT.ClampTypedValue = function(value, type) {
        var mac_type = Context.Get('macroset');
        var t = type && (type_map_[type] || type).toLowerCase();
        switch (t) {
            case 'boolean':
                return WCT.ClampBoolean(value);
            case 'duration':
            case 'number':
                var vn = parseFloat(value);
                return isNaN(vn) ? null : (t === 'duration' ? Math.abs(vn) : vn);
            case 'image_wh':
                if (!value) value = {};
                return {
                    id: value.id || '',
                    w: Number(value.w) || 0,
                    h: Number(value.h) || 0
                };
            case 'size':
                if (!value) value = {};
                return value.x != null || value.y != null ? {
                    x: Number(value.x) || 0,
                    y: Number(value.y) || 0
                } : {
                    width: Number(value.width) || 0,
                    height: Number(value.height) || 0
                };
            case 'possize':
                if (!value) value = {};
                return value.x != null || value.y != null || value.cx != null || value.cy != null ? {
                    x: Number(value.x) || 0,
                    y: Number(value.y) || 0,
                    cx: Number(value.cx) || 0,
                    cy: Number(value.cy) || 0
                } : (mac_type === 'standard' ? {
                    left: Number(value.left) || 0,
                    top: Number(value.top) || 0,
                    width: Number(value.width) || 0,
                    height: Number(value.height) || 0
                } : {
                    left: Number(value.left) || 0,
                    top: Number(value.top) || 0,
                    bottom: Number(value.bottom) || 0,
                    right: Number(value.right) || 0
                });
            case 'position':
                if (!value) value = {};
                return value.x != null || value.y != null ? {
                    x: Number(value.x) || 0,
                    y: Number(value.y) || 0
                } : {
                    left: Number(value.left) || 0,
                    top: Number(value.top) || 0
                };
            case 'relpos':
            case 'relpos_rect':
            case 'relpos_elemref':
                var v = {};
                value = value ? WCT.DeepCopy(value) : {};
                if (!value.elem) value.elem = {
                    id: ''
                };
                if (!value.XY) value.XY = {
                    x: 0,
                    y: 0
                };
                if (!value.XY2) value.XY2 = {
                    x: 0,
                    y: 0
                };
                if (!value.DocXY) value.DocXY = {
                    x: 0,
                    y: 0
                };
                var c = typeof value.FP == 'string' ? value.FP : '';
                v.FP = c;
                c = value.elem || null;
                if (c) {
                    c = WCT.DeepCopy(c);
                    c.idx = Number(c.idx) || 0;
                    c.subidx = Number(c.subidx) || 0;
                    v.elem = c
                } else {
                    v.elem = ''
                }
                var keys = type.toUpperCase() !== 'RELPOS' ? ['XY', 'XY2'] : ['XY', 'DocXY'];
                for (var i = 0; i < 2; i++) {
                    var k = keys[i];
                    var d = k === 'XY2' ? 1 : 0;
                    c = value[k] || null;
                    if (c) v[k] = {
                        x: Number(c.x) || d,
                        y: Number(c.y) || d
                    }
                }
                c = value.Off || null;
                if (c) v.Off = {
                    x: Number(c.x) || 0,
                    y: Number(c.y) || 0
                };
                if (value.frame) {
                    v.frame = WCT.DeepCopy(value.frame);
                    v.FP = v.frame.path
                }
                c = value.element;
                if (c) {
                    c = WCT.DeepCopy(c);
                    c.elementIndex = Number(c.elementIndex) || 0;
                    c.subElementIndex = Number(c.subElementIndex) || 0;
                    v.element = c
                }
                if (value.posDocument) v.DocXY = WCT.DeepCopy(value.posDocument);
                if (value.posElement) v.XY = WCT.DeepCopy(value.posElement);
                if (value.rectElement) v.XY2 = WCT.DeepCopy(value.rectElement);
                if (value.rectDocument) v.DocXY2 = WCT.DeepCopy(value.rectDocument);
                if (typeof value.offsetX != 'undefined') v.offsetX = Number(value.offsetX) || 0;
                if (typeof value.offsetY != 'undefined') v.offsetY = Number(value.offsetY) || 0;
                return v;
            case 'debug':
                Log('WCT.ClampTypedValue: ' + type);
                break
        }
        return value
    }
})();
(function() {
    WCT.uid = {
        Generate: _generate,
        CreateUniqueStringMap: _createUniqueStringMap
    };
    var DEFAULT_LEN = 16;
    var DEFAULT_PREF = '';
    var DOMAIN_HEX = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'a', 'b', 'c', 'd', 'e', 'f'];
    var DOMAIN = DOMAIN_HEX.concat(['G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']);

    function _generate() {
        var length = typeof arguments[0] === 'number' ? arguments[0] : DEFAULT_LEN;
        var prefix = typeof arguments[1] === 'string' ? arguments[1] : DEFAULT_PREF;
        var domain = arguments[3] ? DOMAIN_HEX : DOMAIN;
        var nbr = domain.length;
        var ret = [];
        for (var i = length; i-- > 0;) {
            var rdm = Math.floor(Math.random() * nbr);
            ret.push(domain[rdm])
        }
        var r = prefix + ret.join('');
        return arguments[2] ? r.toUpperCase() : r
    }

    function _createUniqueStringMap(uids) {
        var map = {};
        var items = 0;
        var lens = {};
        var last = null;
        for (var uid in uids) {
            last = uid;
            lens[uid] = uid.length - 1;
            items++
        }
        if (items == 1) {
            map[last] = last.charAt(0);
            return map
        }
        var ignore = 0;
        var idx = 0;
        while (items) {
            var m1 = {};
            var m2 = {};
            var allow_ignore = true;
            for (var uid in uids) {
                var c = uid.charAt(idx);
                if (lens[uid] == idx) {
                    allow_ignore = false
                }
                m1[c] || (m1[c] = 0);
                m2[c] || (m2[c] = []);
                m1[c]++;
                m2[c].push(uid)
            }
            idx++;
            var first = true;
            for (var c in m1) {
                if (first && allow_ignore && m1[c] == items) {
                    ignore++;
                    break
                } else if (m1[c] == 1) {
                    var uid = m2[c][0];
                    map[uid] = c != '' ? c : uid;
                    delete uids[uid];
                    items--;
                    first = false
                } else {
                    var ids = {};
                    var list = {};
                    for (var i = 0, uid = null; uid = m2[c][i]; i++) {
                        var id = uid.substr(idx);
                        if (id == '') {
                            map[uid] = c;
                            delete uids[uid];
                            items--
                        } else {
                            ids[id] = uid;
                            list[id] = 1
                        }
                    }
                    list = this.CreateUniqueStringMap(list);
                    for (var id in list) {
                        var uid = ids[id];
                        var shortcut = c + list[id];
                        map[uid] = shortcut;
                        delete uids[uid];
                        items--
                    }
                    first = false
                }
            }
        }
        return map
    }
})();
WCT.timeout = {
    d_: [],
    i_: null,
    n_: null,
    f_: [],
    r_: true,
    ios_scroll_callback_: false,
    Cleanup: function() {
        if (this.i_) clearTimeout(this.i_);
        this.i_ = null;
        this.n_ = null;
        if (this.ios_scroll_callback_) {
            this.ios_scroll_callback_ = false;
            window.removeEventListener('scroll', WCT.timeout.callback_)
        }
        this.d_ = [];
        this.f_ = [];
        this.r_ = true
    },
    Set: function(callback, time) {
        var id = WCT.uid.Generate(24, 'TIME_');
        var start = (new Date()).getTime();
        this.d_.push({
            id: id,
            cb: callback,
            scope: arguments[2],
            args: arguments[3],
            start: start,
            end: start + time,
            dur: time,
            r: arguments[4]
        });
        this.start_(start, time);
        return id
    },
    Clear: function(id) {
        var idx = this.d_.indexOfAtt(id, 'id');
        if (idx >= 0) this.d_.splice(idx, 1)
    },
    start_: function(now, time) {
        if (time <= 0) time = 1;
        if (PLATFORM.IOS && !this.ios_scroll_callback_) {
            this.ios_scroll_callback_ = true;
            window.addEventListener('scroll', WCT.timeout.ios_scoll_)
        }
        var end = now + time;
        if (!this.i_) {
            this.i_ = setTimeout(WCT.timeout.callback_, time);
            this.n_ = end
        } else if (end < this.n_) {
            clearTimeout(this.i_);
            this.i_ = setTimeout(WCT.timeout.callback_, time);
            this.n_ = end
        }
    },
    callback_: function() {
        WCT.timeout.i_ = null;
        var now = (new Date()).getTime();
        var nxt = null;
        var fire = WCT.timeout.f_;
        for (var i = 0, c = null; c = WCT.timeout.d_[i]; i++) {
            if (c.end <= now) {
                if (c.r) {
                    c.end += c.dur;
                    if (!nxt || c.end < nxt) {
                        nxt = c.end
                    }
                    fire.push(c)
                } else {
                    WCT.timeout.d_.splice(i--, 1);
                    fire.push(c)
                }
            } else {
                if (!nxt || c.end < nxt) {
                    nxt = c.end
                }
            }
        }
        if (WCT.timeout.r_ && fire.length) {
            WCT.timeout.r_ = false;
            setTimeout(WCT.timeout.fire_, 1)
        }
        if (nxt) {
            now = (new Date()).getTime();
            WCT.timeout.start_(now, nxt - now)
        }
    },
    fire_: function() {
        var f = WCT.timeout.f_;
        if (!f.length) {
            WCT.timeout.r_ = true;
            return
        }
        while (f.length) {
            var c = f.shift();
            if (c && typeof c.cb == 'function' && c.cb) {
                var t = typeof c.scope;
                var s = (t == 'object' || t == 'function') && c.scope ? c.scope : null;
                c.cb.apply(s, c.args || [])
            }
        }
        WCT.timeout.r_ = true
    },
    ios_scroll_: function() {
        if (WCT.timeout.i_) clearTimeout(WCT.timeout.i_);
        if (WCT.timeout.g_) clearTimeout(WCT.timeout.g_);
        WCT.timeout.i_ = null;
        WCT.timeout.g_ = null;
        WCT.timeout.r_ = true;
        WCT.timeout.callback_()
    }
};
WCT.SetTimeout = function(callback, time) {
    return WCT.timeout.Set(callback, time, arguments[2], arguments[3], false)
};
WCT.SetInterval = function(callback, time) {
    return WCT.timeout.Set(callback, time, arguments[2], arguments[3], true)
};
WCT.ClearTimeout = function(id) {
    WCT.timeout.Clear(id)
};
WCT.ClearInterval = function(id) {
    WCT.timeout.Clear(id)
};
WCT.language = {
    LANGUAGES: ['', 'ar-SA', 'bg', 'ca', 'zh-TW', 'cs', 'da', 'de-DE', 'el', 'en-US', 'es-ES', 'fi', 'fr-FR', 'he', 'hu', 'is', 'it-IT', 'ja', 'ko', 'nl-NL', 'nb', 'pl', 'pt-BR', 'ro', 'ru', 'hr-HR', 'sk', 'sq', 'sv-SE', 'th', 'tr', 'ur', 'id', 'uk', 'be', 'sl', 'et', 'lv', 'lt', 'fa', 'vi', 'hy', 'az-AZ', 'eu', 'mk', 'tn', 'xh', 'zu', 'af', 'ka', 'fo', 'hi', 'mt', 'se-NO', 'ms-MY', 'kk', 'ky', 'sw', 'uz-UZ', 'tt', 'bn', 'pa', 'gu', 'ta', 'te', 'kn', 'ml', 'mr', 'sa', 'mn', 'cy', 'gl', 'kok', 'syr', 'div', 'qu-BO', 'ns', 'mi', 'ar-IQ', 'zh-CN', 'de-CH', 'en-GB', 'es-MX', 'fr-BE', 'it-CH', 'nl-BE', 'nn', 'pt-PT', 'sr-SP', 'sv-FI', 'az-AZ', 'se-SE', 'ms-BN', 'uz-UZ', 'qu-EC', 'ar-EG', 'zh-HK', 'de-AT', 'en-AU', 'es-ES', 'fr-CA', 'sr-SP', 'se-FI', 'qu-PE', 'ar-LY', 'zh-SG', 'de-LU', 'en-CA', 'es-GT', 'fr-CH', 'hr-BA', 'se-NO', 'ar-DZ', 'zh-MO', 'de-LI', 'en-NZ', 'es-CR', 'fr-LU', 'bs', 'se-SE', 'ar-MA', 'en-IE', 'es-PA', 'fr-MC', 'sr-BA', 'se-NO', 'ar-TN', 'en-ZA', 'es-DO', 'sr-BA', 'se-SE', 'ar-OM', 'en-JM', 'es-VE', 'se-FI', 'ar-YE', 'en-CB', 'es-CO', 'se-FI', 'ar-SY', 'en-BZ', 'es-PE', 'ar-JO', 'en-TT', 'es-AR', 'ar-LB', 'en-ZW', 'es-EC', 'ar-KW', 'en-PH', 'es-CL', 'ar-AE', 'es-UY', 'ar-BH', 'es-PY', 'ar-QA', 'es-BO', 'es-SV', 'es-HN', 'es-NI', 'es-PR', 'mul'],
    DEFAULT: 'en-US',
    FromBrowser: function() {
        var def = arguments[0];
        var bl = navigator.language || navigator.browserLanguage || def;
        var idx = bl.indexOf('-');
        if (idx >= 0) {
            bl = bl.substr(0, idx) + '-' + bl.substr(idx + 1).toUpperCase()
        }
        var lang = this.LANGUAGES;
        for (var i = 0, l = lang.length; i < l; i++) {
            if (lang[i] == bl) {
                return bl
            } else if (lang[i].isPrefix(bl)) {
                return lang[i]
            }
        }
        return this.DEFAULT
    }
};
WCT.geometry = {
    IntersectRect: function(r1, r2) {
        return r2.x <= r1.x + r1.w && r2.x + r2.w >= r1.x && r2.y <= r1.y + r1.h && r2.y + r2.h >= r1.y
    },
    IncludesRect: function(r1, r2) {
        return r1.x <= r2.x && r1.x + r1.w >= r2.x + r2.w && r1.y <= r2.y && r1.y + r1.h >= r2.y + r2.h
    },
    ExciseRect: function(r1, r2) {
        if (!this.IntersectRect(r1, r2)) return [r1];
        var c2 = {
            x: Math.max(r1.x, r2.x),
            y: Math.max(r1.y, r2.y)
        };
        c2.w = Math.min(r1.x + r1.w, r2.x + r2.w) - c2.x;
        c2.h = Math.min(r1.y + r1.h, r2.y + r2.h) - c2.y;
        var e1 = {
            x: r1.x,
            y: r1.y,
            w: r1.w,
            h: c2.y - r1.y
        };
        var e2 = {
            x: r1.x,
            y: c2.y,
            w: c2.x - r1.x,
            h: c2.h
        };
        var e3 = {
            x: c2.x + c2.w,
            y: c2.y,
            w: r1.x + r1.w - c2.x - c2.w,
            h: c2.h
        };
        var e4 = {
            x: r1.x,
            y: c2.y + c2.h,
            w: r1.w,
            h: r1.y + r1.h - c2.y - c2.h
        };
        var a1 = e1.w * e1.h;
        var a2 = e2.w * e2.h;
        var a3 = e3.w * e3.h;
        var a4 = e4.w * e4.h;
        var result = [];
        a1 > 0 && result.push(e1);
        a2 > 0 && result.push(e2);
        a3 > 0 && result.push(e3);
        a4 > 0 && result.push(e4);
        return result
    },
    ExciseRects: function(r1, rects) {
        var result = [r1];
        while (rects.length && result.length) {
            var cur = rects.shift();
            var new_r = [];
            for (var i = result.length - 1; i >= 0; i--) {
                new_r = new_r.concat(this.ExciseRect(result[i], cur))
            }
            result = new_r
        }
        return result
    },
    GetBiggestRect: function(rects) {
        var areas = [];
        for (var i = 0, rect = null; rect = rects[i]; i++) {
            areas.push(rect.w * rect.h)
        }
        if (areas.length) {
            var max = areas.max();
            var idx = areas.indexOf(max);
            return rects[idx]
        }
        return null
    },
    CombineRects: function(rects) {
        var x0 = [];
        var y0 = [];
        var x1 = [];
        var y1 = [];
        for (var i = 0, r = null; r = rects[i++];) {
            x0.push(r.x);
            y0.push(r.y);
            x1.push(r.x + r.w);
            y1.push(r.y + r.h)
        }
        if (x0.length) {
            x0 = Math.min.apply(null, x0);
            y0 = Math.min.apply(null, y0);
            x1 = Math.max.apply(null, x1);
            y1 = Math.max.apply(null, y1);
            return {
                x: x0,
                y: y0,
                w: x1 - x0,
                h: y1 - y0
            }
        }
        return null
    }
};
WCT.geometry.Point = function(x, y) {
    this.x = x;
    this.y = y
};
WCT.geometry.Point.CreatePoints = function() {
    var r = [];
    for (var i = 0, l = arguments.length; i < l;) {
        r.push(new WCT.geometry.Point(arguments[i++], arguments[i++]))
    }
    return r
};
WCT.geometry.Point.prototype = {
    Copy: function() {
        return new WCT.geometry.Point(this.x, this.y)
    },
    SubstractPoint: function(a) {
        return new WCT.geometry.Point(this.x - a.x, this.y - a.y)
    },
    Round: function() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        return this
    },
    Len: function() {
        return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2))
    },
    Move: function(x, y) {
        this.x += x;
        this.y += y;
        return this
    },
    Scale: function(x, y) {
        this.x *= x;
        this.y *= y;
        return this
    },
    Rotate: function(cos, sin) {
        var x = this.x;
        this.x = cos * x - sin * this.y;
        this.y = sin * x + cos * this.y;
        return this
    },
    ToLen: function(l) {
        if (l == 0) {
            this.x = 0;
            this.y = 0
        } else {
            var ol = this.Len();
            var dl = l / ol;
            this.x *= dl;
            this.y *= dl
        }
        return this
    },
    Draw: function(ctx) {
        ctx.lineTo(this.x, this.y)
    }
};
WCT.geometry.Edge = function(x1, y1, x2, y2, r) {
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
    this.r = r
};
WCT.geometry.Edge.FromPoints = function(p1, p2, r) {
    return new WCT.geometry.Edge(p1.x, p1.y, p2.x, p2.y, r)
};
WCT.geometry.Edge.prototype = {
    Copy: function() {
        return new WCT.geometry.Edge(this.x1, this.y1, this.x2, this.y2, this.r)
    },
    GetPoints: function() {
        return {
            x: [this.x1, this.x2],
            y: [this.y1, this.y2]
        }
    },
    Move: function(x, y) {
        this.x1 += x;
        this.y1 += y;
        this.x2 += x;
        this.y2 += y;
        return this
    },
    Round: function() {
        this.x1 = Math.round(this.x1);
        this.y1 = Math.round(this.y1);
        this.x2 = Math.round(this.x2);
        this.y2 = Math.round(this.y2);
        this.r = Math.round(this.r);
        return this
    },
    Rotate: function(cos, sin) {
        var x1 = this.x1;
        var x2 = this.x2;
        this.x1 = cos * x1 - sin * this.y1;
        this.y1 = sin * x1 + cos * this.y1;
        this.x2 = cos * x2 - sin * this.y2;
        this.y2 = sin * x2 + cos * this.y2;
        return this
    },
    Scale: function(x, y, r) {
        this.x1 *= x;
        this.y1 *= y;
        this.x2 *= x;
        this.y2 *= y;
        this.r *= r;
        return this
    },
    Draw: function(ctx) {
        if (BROWSER.IE && BROWSER.VERSION < 9 || arguments[2]) {
            if (arguments[1] == 'quadratic') {
                ctx.quadraticCurveTo(this.x1, this.y1, this.x2, this.y2)
            } else {
                ctx.bezierCurveTo(this.x1, this.y1, this.x1, this.y1, this.x2, this.y2)
            }
        } else {
            ctx.arcTo(this.x1, this.y1, this.x2, this.y2, this.r)
        }
    }
};
WCT.geometry.Circle = function(x, y, r) {
    this.x = x;
    this.y = y;
    this.r = r
};
WCT.geometry.Circle.FromObject = function(o) {
    return new WCT.geometry.Circle(o.x, o.y, o.r)
};
WCT.geometry.Circle.prototype = {
    Move: function(x, y) {
        this.x += x;
        this.y += y;
        return this
    },
    HasPoint: function(x, y) {
        return Math.pow(x - this.x, 2) + Math.pow(y - this.y, 2) <= Math.pow(this.r, 2)
    }
};
WCT.geometry.Ellipse = function(x, y, rx, ry) {
    this.x = x;
    this.y = y;
    this.rx = rx;
    this.ry = ry;
    var r = Math.max(0, Math.min(rx, ry));
    var sx = rx / r;
    var sy = ry / r;
    if (sx == sy && BROWSER.IE && BROWSER.VERSION <= 9) {
        sx -= 0.02;
        sy -= 0.02
    }
    this.r = r;
    this.sx = sx;
    this.sy = sy
};
WCT.geometry.Ellipse.prototype = {
    Copy: function() {
        return new WCT.geometry.Ellipse(this.x, this.y, this.rx, this.ry)
    },
    Move: function(x, y) {
        this.x += x;
        this.y += y;
        return this
    },
    HasPoint: function(x, y) {
        return Math.pow((x - this.x) / this.rx, 2) + Math.pow((y - this.y) / this.ry, 2) <= 1
    },
    CalcPaths: function() {
        var sx = arguments[0] || this.sx;
        var sy = arguments[1] || this.sy;
        var r = this.r;
        var mp = new WCT.geometry.Point(this.x / sx, this.y / sy);
        var lt = mp.Copy().Move(-r, -r);
        var rt = mp.Copy().Move(r, -r);
        var rb = mp.Copy().Move(r, r);
        var lb = mp.Copy().Move(-r, r);
        var lm = mp.Copy().Move(-r, 0);
        var tm = mp.Copy().Move(0, -r);
        var rm = mp.Copy().Move(r, 0);
        var bm = mp.Copy().Move(0, r);
        var wge = WCT.geometry.Edge;
        return {
            lt: wge.FromPoints(lt, tm, r),
            rt: wge.FromPoints(rt, rm, r),
            rb: wge.FromPoints(rb, bm, r),
            lb: wge.FromPoints(lb, lm, r),
            ilb: wge.FromPoints(lb, bm, r),
            irb: wge.FromPoints(rb, rm, r),
            irt: wge.FromPoints(rt, tm, r),
            ilt: wge.FromPoints(lt, lm, r)
        }
    },
    Draw: function(ctx, method) {
        var st = arguments[3];
        ctx.save();
        ctx.scale(this.sx, this.sy);
        ctx.beginPath();
        if (st) ctx[method + 'Style'] = st;
        var c = this.CalcPaths();
        ctx.moveTo(c.lb.x2, c.lb.y2);
        c.lt.Draw(ctx, 'quadratic');
        c.rt.Draw(ctx, 'quadratic');
        c.rb.Draw(ctx, 'quadratic');
        c.lb.Draw(ctx, 'quadratic');
        var i = arguments[2];
        if (i) {
            c = i.CalcPaths(this.sx, this.sy);
            ctx.moveTo(c.ilt.x2, c.ilt.y2);
            c.ilb.Draw(ctx, 'quadratic');
            c.irb.Draw(ctx, 'quadratic');
            c.irt.Draw(ctx, 'quadratic');
            c.ilt.Draw(ctx, 'quadratic')
        }
        ctx[method]();
        ctx.closePath();
        ctx.restore()
    }
};
WCT.geometry.Vector = function(o, r) {
    this.o = o;
    this.r = r
};
WCT.geometry.Vector.FromPoints = function(p1, p2) {
    var r = new WCT.geometry.Point(p2.x - p1.x, p2.y - p1.y);
    r.ToLen(1);
    return new WCT.geometry.Vector(p1, r)
};
WCT.geometry.Vector.prototype = {
    Intersect: function(v) {
        var sc = this.Cross(v);
        return this.Coordinates(sc.t)
    },
    Normal: function(scalar) {
        if (scalar == 0) return this;
        var x = -1;
        var y = 1;
        var l = this.r.Len();
        if (l != 0) {
            x = -this.r.y / l;
            y = this.r.x / l
        }
        var o = new WCT.geometry.Point(this.o.x + x * scalar, this.o.y + y * scalar);
        var r = this.r.Copy();
        return new WCT.geometry.Vector(o, r)
    },
    Cross: function(v) {
        var a = this.o;
        var b = this.r;
        var c = v.o;
        var d = v.r;
        var t = 0,
            s = 0;
        if (b.y * d.x != 0 || b.x * d.y != 0) {
            t = (a.x * d.y + c.y * d.x - c.x * d.y - a.y * d.x) / (b.y * d.x - b.x * d.y)
        } else if (d.x != 0) {
            s = (a.x - c.x + (t * b.x)) / d.x
        }
        if (!isFinite(t) || isNaN(t)) {
            t = 0
        } else if (!isFinite(s) || isNaN(s)) {
            s = 0
        }
        return {
            t: t,
            s: s
        }
    },
    Coordinates: function(scalar) {
        var x = this.o.x + this.r.x * scalar;
        var y = this.o.y + this.r.y * scalar;
        return new WCT.geometry.Point(x, y)
    }
};
WCT.geometry.RoundedRect = function(p1, e1, p2, e2, p3, e3, p4, e4) {
    this.p1 = p1;
    this.e1 = e1;
    this.p2 = p2;
    this.e2 = e2;
    this.p3 = p3;
    this.e3 = e3;
    this.p4 = p4;
    this.e4 = e4
};
WCT.ExtendObject(WCT.geometry.RoundedRect, {
    FromRect: function(lt, rb, radius) {
        var rw;
        var rh;
        if (arguments.length == 5) {
            rw = arguments[3];
            rh = arguments[4]
        } else {
            rw = radius;
            rh = radius
        }
        var wg = WCT.geometry;
        var p1 = new wg.Point(rb.x - rw, lt.y);
        var e1 = new wg.Edge(rb.x, lt.y, rb.x, lt.y + rh, radius);
        var p2 = new wg.Point(rb.x, rb.y - rh);
        var e2 = new wg.Edge(rb.x, rb.y, rb.x - rw, rb.y, radius);
        var p3 = new wg.Point(lt.x + rw, rb.y);
        var e3 = new wg.Edge(lt.x, rb.y, lt.x, rb.y - rh, radius);
        var p4 = new wg.Point(lt.x, lt.y + rh);
        var e4 = new wg.Edge(lt.x, lt.y, lt.x + rw, lt.y, radius);
        return new wg.RoundedRect(p1, e1, p2, e2, p3, e3, p4, e4)
    },
    FromInvertedRect: function(lt, rb, radius) {
        var rw;
        var rh;
        if (arguments.length == 5) {
            rw = arguments[3];
            rh = arguments[4]
        } else {
            rw = radius;
            rh = radius
        }
        var wg = WCT.geometry;
        var p1 = new wg.Point(lt.x + rw, lt.y);
        var e1 = new wg.Edge(lt.x, lt.y, lt.x, lt.y + rh, radius);
        var p2 = new wg.Point(lt.x, rb.y - rh);
        var e2 = new wg.Edge(lt.x, rb.y, lt.x + rw, rb.y, radius);
        var p3 = new wg.Point(rb.x - rw, rb.y);
        var e3 = new wg.Edge(rb.x, rb.y, rb.x, rb.y - rh, radius);
        var p4 = new wg.Point(rb.x, lt.y + rh);
        var e4 = new wg.Edge(rb.x, lt.y, rb.x - rw, lt.y, radius);
        return new wg.RoundedRect(p1, e1, p2, e2, p3, e3, p4, e4)
    }
});
WCT.geometry.RoundedRect.prototype = {
    Copy: function() {
        return new WCT.geometry.RoundedRect(this.p1.Copy(), this.e1.Copy(), this.p2.Copy(), this.e2.Copy(), this.p3.Copy(), this.e3.Copy(), this.p4.Copy(), this.e4.Copy())
    },
    GetPoints: function() {
        var e1 = this.e1.GetPoints();
        var e2 = this.e2.GetPoints();
        var e3 = this.e3.GetPoints();
        var e4 = this.e4.GetPoints();
        var x = e1.x.concat(e2.x.concat(e3.x.concat(e4.x)));
        x.push(this.p1.x, this.p2.x, this.p3.x, this.p4.x);
        var y = e1.y.concat(e2.y.concat(e3.y.concat(e4.y)));
        y.push(this.p1.y, this.p2.y, this.p3.y, this.p4.y);
        return {
            x: x,
            y: y
        }
    },
    GetEdges: function() {
        return {
            lt: {
                x: this.e4.x1,
                y: this.e4.y1,
                r: this.e4.r
            },
            rt: {
                x: this.e1.x1,
                y: this.e1.y1,
                r: this.e1.r
            },
            rb: {
                x: this.e2.x1,
                y: this.e2.y1,
                r: this.e2.r
            },
            lb: {
                x: this.e3.x1,
                y: this.e3.y1,
                r: this.e3.r
            }
        }
    },
    Move: function(x, y) {
        this.p1.Move(x, y);
        this.p2.Move(x, y);
        this.p3.Move(x, y);
        this.p4.Move(x, y);
        this.e1.Move(x, y);
        this.e2.Move(x, y);
        this.e3.Move(x, y);
        this.e4.Move(x, y);
        return this
    },
    Scale: function(x, y, r) {
        this.p1.Scale(x, y);
        this.p2.Scale(x, y);
        this.p3.Scale(x, y);
        this.p4.Scale(x, y);
        this.e1.Scale(x, y, r);
        this.e2.Scale(x, y, r);
        this.e3.Scale(x, y, r);
        this.e4.Scale(x, y, r);
        return this
    },
    Rotate: function(cos, sin) {
        this.p1.Rotate(cos, sin);
        this.p2.Rotate(cos, sin);
        this.p3.Rotate(cos, sin);
        this.p4.Rotate(cos, sin);
        this.e1.Rotate(cos, sin);
        this.e2.Rotate(cos, sin);
        this.e3.Rotate(cos, sin);
        this.e4.Rotate(cos, sin);
        return this
    },
    Draw: function(ctx, method) {
        var st = arguments[3];
        ctx.save();
        ctx.beginPath();
        if (st) ctx[method + 'Style'] = st;
        var d = [this, arguments[2]];
        for (var i = 0, c = null; c = d[i++];) {
            var p = c.p1.Copy().Round();
            ctx.moveTo(p.x, p.y);
            p.Draw(ctx);
            c.e1.Copy().Round().Draw(ctx, 'quadratic', true);
            c.p2.Copy().Round().Draw(ctx);
            c.e2.Copy().Round().Draw(ctx, 'quadratic', true);
            c.p3.Copy().Round().Draw(ctx);
            c.e3.Copy().Round().Draw(ctx, 'quadratic', true);
            c.p4.Copy().Round().Draw(ctx);
            c.e4.Copy().Round().Draw(ctx, 'quadratic', true)
        }
        ctx[method]();
        ctx.closePath();
        ctx.restore()
    }
};
WCT.cookie = {
    Get: function(key) {
        var wnd = arguments[1] || window;
        var id = key + '=';
        var id_len = id.length;
        var all = wnd.document.cookie.split(';');
        for (var i = all.length - 1; i >= 0; i--) {
            var c = all[i].trim();
            if (c.substr(0, id_len) == id) {
                return decodeURIComponent(c.substr(id_len))
            }
        }
        return null
    },
    Set: function(key, value) {
        var days = Number(arguments[2]);
        var wnd = arguments[3] || window;
        var params = '; name=dgo; path=/; ';
        var day = 1000 * 3600 * 24;
        if (isNaN(days)) days = 365;
        if (days == -1) {
            params += 'expires=Thu, 01-Jan-70 00:00:01 GMT; '
        } else {
            var d = new Date();
            d.setTime(d.getTime() + days * day);
            params += 'expires=' + d.toGMTString() + '; '
        }
        wnd.document.cookie = key + '=' + encodeURIComponent(value) + params
    },
    Remove: function(key) {
        this.Set(key, '', -1, arguments[1])
    }
};
WCT.address = function(source) {
    this.is_external = false;
    this.is_file = false;
    this.src = '';
    this.class_id = null;
    this.local_id = null;
    this.sub_class_id = null;
    this.sub_local_id = null;
    this.sub_path = null;
    if (typeof source == 'string') {
        this.FromString(source)
    } else if (source && typeof source == 'object') {
        this.CopyObject(source)
    }
};
WCT.address.IsExternal = function(src) {
    return (
        src.charAt(0) == '/' || src.match(/^\\\\/) || src.match(/^(.|https?|ftps?|notes|file|tel|adt|mailto|javascript):/)
    ) ? true : false
};
WCT.address.IsFile = function(source) {
    var ptop = source.split(':').top();
    return ptop.indexOf('.') >= 0
};
WCT.address.prototype = {
    CopyObject: function(obj) {
        this.is_external = obj.is_external || false;
        this.is_file = obj.is_file || false;
        this.src = obj.src || '';
        this.class_id = obj.class_id || null;
        this.local_id = obj.local_id || null;
        this.sub_class_id = obj.sub_class_id || null;
        this.sub_local_id = obj.sub_local_id || null;
        this.sub_path = obj.sub_path || null
    },
    FromString: function(str) {
        this.src = str;
        if (WCT.address.IsExternal(str)) {
            this.is_external = true;
            return
        }
        var parts = str.split(':');
        var plen = parts.length;
        var ptop = parts.top();
        this.is_file = ptop.indexOf('.') >= 0;
        this.sub_path = ptop;
        if (plen == 1) {
            parts = ptop.split('!');
            if (parts.length == 2) {
                this.class_id = parts[0];
                this.local_id = parts[1];
                this.sub_path = null
            }
        } else if (plen >= 2) {
            var parts0 = parts[0].split('!');
            var l0 = parts0.length;
            if (l0 == 1) {
                var s = WCT.context.TCLASS_SHORTCUTS;
                var p = parts[0];
                this.class_id = p;
                for (var i in s) {
                    if (p.isPrefix(s[i])) {
                        this.class_id = i;
                        this.local_id = p;
                        break
                    }
                }
            } else if (l0 == 2) {
                this.class_id = parts0[0];
                this.local_id = parts0[1]
            }
            if (plen == 3) {
                var parts1 = parts[1].split('!');
                var l1 = parts1.length;
                if (l1 > 0) {
                    this.sub_class_id = parts1[0];
                    if (l1 == 2) {
                        this.sub_local_id = parts1[1]
                    }
                }
            }
        }
        if (this.class_id == 'macro') {
            this.class_id = 'project';
            this.sub_class_id = 'macro';
            this.sub_local_id = this.local_id;
            this.local_id = null
        } else if (this.class_id === 'book' && this.sub_path && this.sub_path.search('slide!') === 0) {
            this.sub_class_id = 'slide';
            this.sub_local_id = this.sub_path.replace('slide!', '');
            this.sub_path = null
        }
    },
    AsUrl: function() {
        if (this.is_external) return this.src;
        var s = [];
        if (this.class_id) {
            s.push(this.class_id);
            if (this.local_id) s.push(this.local_id)
        }
        if (this.sub_class_id) {
            s.push(this.sub_class_id);
            if (this.sub_local_id) s.push(this.sub_local_id)
        }
        if (this.sub_path) s.push(this.sub_path);
        return '/' + s.join('/')
    },
    AsString: function() {
        if (this.is_external) return this.src;
        var s = '';
        if (this.class_id) {
            s += this.class_id;
            if (this.local_id) s += '!' + this.local_id
        }
        if (this.sub_class_id) {
            s.length && (s += ':');
            s += this.sub_class_id;
            if (this.sub_local_id) s += '!' + this.sub_local_id
        }
        if (this.sub_path) {
            if (s.length) s += ':';
            s += this.sub_path
        }
        return s
    },
    AsObject: function() {
        if (this.is_external) return null;
        var o = {
            tclass: this.class_id,
            uid: this.local_id
        };
        if (arguments[0] && arguments[0][this.sub_path]) {
            o.mode = this.sub_path
        } else if (this.sub_path) {
            o.fileName = this.sub_path
        }
        return o
    }
};
WCT.context = function() {
    this.atts_ = {};
    this.sbase_ = '';
    this.base_ = '';
    this.protocol_ = 'file';
    this.this_ = '';
    this.st_ = '/';
    this.features_ = null;
    var context = arguments[0];
    if (context && typeof context == 'object') {
        for (var i in context.atts_) {
            this.atts_[i] = context.atts_[i]
        }
        this.sbase_ = context.sbase_;
        this.base_ = context.base_;
        this.protocol_ = context.protocol_;
        this.this_ = context.this_
    } else {
        var bt = document.getElementsByTagName('BASE');
        if (bt && bt[0]) {
            this.base_ = bt[0].href;
            this.check_base_();
            this.sbase_ = this.base_
        }
    }
};
WCT.ExtendObject(WCT.context, {
    PROTOCOLS: {
        http: true,
        https: true,
        res: true,
        file: true
    },
    TCLASS_SHORTCUTS: {
        slide: 'SL_',
        project: 'PR_',
        group: 'GR_',
        book: 'BO_',
        cdoc: 'CD_'
    },
    RemoveImgIds: function(src) {
        var parser = $$('div');
        parser.style.display = 'none';
        parser.style.visibility = 'hidden';
        parser.innerHTML = src.replace(/<img([^>]*) src=/gi, '<img$1 data-dgo-src=');
        var imgs = parser.getElementsByTagName('img');
        for (var i = 0, img = null; img = imgs[i++];) {
            img.id = ''
        }
        return parser.innerHTML.replace(/<img([^>]*)  data-dgo-src=/gi, '<img$1 src=')
    }
});
WCT.context.prototype = {
    Destructor: function() {
        this.atts_ = null;
        return null
    },
    Stringify: function() {
        return JSON.stringify({
            atts: this.atts_,
            sbase: this.sbase_,
            base: this.base_,
            proto: this.protocol_,
            scope: this.this_,
            st: this.st_
        })
    },
    Parse: function(d) {
        d = JSON.parse(d);
        this.atts_ = d.atts;
        this.sbase_ = d.sbase;
        this.base_ = d.base;
        this.protocol_ = d.proto;
        this.this_ = d.scope;
        this.st_ = d.st
    },
    SetBase: function(base_str) {
        var proto = base_str.split(':')[0];
        this.protocol_ = WCT.context.PROTOCOLS[proto] ? proto : 'file';
        base_str = base_str.replace(/\/$/, '');
        this.base_ = base_str;
        for (var s in WCT.context.TCLASS_SHORTCUTS) {
            var r = new RegExp('[/|\\\\]+' + s + '[/|\\\\]+');
            var i = base_str.search(r);
            if (i > 0) {
                this.base_ = base_str.substr(0, i);
                this.this_ = s;
                r = new RegExp('[/|\\\\]+.*$');
                base_str = base_str.substr(i + 2 + s.length).replace(r, '');
                this.atts_[s] = base_str;
                break
            }
        }
        this.check_base_();
        this.sbase_ = this.base_
    },
    SetServerBase: function(server_base) {
        var b = this.base_;
        if (!b) return;
        server_base = server_base.replace(/\/$/, '').replace(/[\/\\]/g, this.st_);
        if (!b.indexOf(server_base)) {
            this.sbase_ = server_base
        }
    },
    SetSlashType: function(st) {
        this.st_ = st
    },
    GetSlashType: function() {
        return this.st_
    },
    Get: function(att) {
        return this.atts_ ? this.atts_[att] : null
    },
    GetScope: function() {
        return this.this_
    },
    GetBase: function() {
        return this.base_
    },
    GetServerBase: function() {
        return this.sbase_
    },
    GetProtocol: function() {
        return this.protocol_
    },
    SetScope: function(s) {
        this.this_ = s
    },
    Set: function(att, val) {
        this.atts_[att] = val
    },
    SetFeature: function(fs) {
        this.features_ = fs
    },
    HasFeature: function(f) {
        return this.features_.indexOf(f) > -1
    },
    Resolve: function(str) {
        if (!str) return str;
        var atts = this.atts_;
        for (var i in atts) {
            var re = new RegExp('^' + i + ':', 'g');
            var ta = atts[i].indexOf('!') >= 0 ? atts[i] : (i + '!' + atts[i]);
            str = str.replace(re, ta + ':')
        }
        return str
    },
    Expand: function(addr) {
        var res = new WCT.address(addr);
        if (res.is_external) return res;
        if (!res.class_id) {
            if (this.this_ == 'macro' || this.this_ == 'tourstop') {
                res.class_id = 'project';
                if (!res.sub_class_id) {
                    res.sub_class_id = this.this_
                }
            } else {
                res.class_id = this.this_
            }
        }
        var atts = this.atts_;
        if (!res.local_id && atts[res.class_id]) {
            if (atts[res.class_id].indexOf('!') >= 0) {
                var hlp = atts[res.class_id].split('!');
                res.class_id = hlp[0];
                res.local_id = hlp[1]
            } else {
                res.local_id = atts[res.class_id]
            }
        }
        if (!res.sub_local_id && atts[res.sub_class_id]) {
            res.sub_local_id = atts[res.sub_class_id]
        }
        return res
    },
    ToEntityPath: function() {
        var a = this.Expand('');
        a.sub_path = arguments[0] || '';
        var c = this;
        if (a.sub_class_id) {
            c = new WCT.context(this);
            c.SetScope(a.class_id)
        }
        a.class_id = '';
        return {
            entity_path: c.ToAbsPath(''),
            sub_path: c.ToRelPath(a.AsString())
        }
    },
    ToRelPath: function(str) {
        str = str.replace(/:\//g, '**/');
        str = this.Resolve(str).replace(/:\/([^\/]+)/g, '/$1').replace(/:\\([^\\]+)/g, '/$1').replace(/:([^\/]+)/g, '/$1').replace(/:([^\\]+)/g, '/$1').replace(/!/g, '/');
        var st = this.st_;
        if (str.indexOf(':') != -1) str = '..' + st + '..' + st + str;
        str = str.replace(/\*\*\//g, ':/').replace(/[\/\\]/g, st);
        return str
    },
    ToAbsPath: function(str) {
        var mgr = false;
        if (!str.indexOf('mgr:')) {
            str = str.substr(4);
            mgr = true
        }
        var addr = new WCT.address(str.replace(/\\/g, '/'));
        if (!mgr && addr.is_external) return str;
        var r = addr;
        if (!mgr) {
            if (arguments[1]) {
                var sctx = WCT.DeepCopy(arguments[1]);
                var atts = this.atts_;
                for (var k in atts) {
                    if (sctx.Get(k) == null) {
                        sctx.Set(k, atts[k])
                    }
                }
                r = sctx.Expand(addr)
            } else {
                r = this.Expand(addr)
            }
        }
        var st = this.st_;
        var url = r.AsUrl().replace(/[\/\\]/g, st);
        if (mgr) {
            var rex = new RegExp('^' + st + '(ou|group|user)');
            if (rex.exec(url)) {
                url = st + '!' + url
            }
            return this.sbase_ + url
        }
        return this.base_ + this.escape_(url)
    },
    ResolveHtmlString: function(src, source_ctx) {
        if (!src) return src;
        var parser = $$('div');
        parser.style.display = 'none';
        parser.style.visibility = 'hidden';
        var gif1 = this.ToAbsPath('trainer:1.gif');
        var bi_p = src.match(/background-image: *url\(.*?\)/gi);
        var bi_l = [];
        if (bi_p) {
            for (var i = 0, c = null; c = bi_p[i]; i++) {
                var re = /url\((.*?)\)/;
                var s1 = re.exec(c);
                var bi = s1[1] || '';
                var qu = bi.charAt(0);
                if (qu == '"' || qu == "'") {
                    bi = bi.substr(1, bi.length - 2)
                }
                bi_l.push(this.ToAbsPath(unescape(bi), source_ctx))
            }
            src = src.replace(/background-image: *url\((.*?)\)/gi, 'background-image:url(' + gif1 + ')')
        }
        parser.innerHTML = src.replace(/<img([^>]*) src=/gi, '<img$1 data-dgo-src=');
        var imgs = parser.getElementsByTagName('img');
        for (var i = 0, img = null; img = imgs[i++];) {
            var ds = img.getAttribute('data-dgo-src') || '';
            if (!WCT.address.IsExternal(ds)) {
                img.setAttribute('data-dgo-src', this.ToAbsPath(unescape(ds), source_ctx))
            }
            if (!img.id) img.id = 'img_' + Math.random().toString().substr(2, 10)
        }
        parser.innerHTML = parser.innerHTML.replace(/<video([^>]*) src=/gi, '<video$1 data-dgo-src=');
        var vids = parser.getElementsByTagName('video');
        for (var i = 0, vid = null; vid = vids[i++];) {
            var ds = vid.getAttribute('data-dgo-src') || '';
            if (!WCT.address.IsExternal(ds)) {
                vid.setAttribute('data-dgo-src', this.ToAbsPath(unescape(ds), source_ctx))
            }
        }
        var anchors = parser.getElementsByTagName('a');
        for (var i = 0, anchor = null; anchor = anchors[i++];) {
            var rs = anchor.getAttribute('href') || anchor.getAttribute('data-dgo-href') || '';
            if (!rs) {
                anchor.setAttribute('href', 'javascript:void(0);')
            } else if (rs.indexOf('javascript:void(0)') < 0) {
                if (rs.indexOf('ctx.cfg_show') < 0) {
                    if (rs.indexOf('mailto:') >= 0) {
                        rs = 'javascript:ctx.cfg_show("' + unescape(rs) + '", null, null);'
                    } else if (WCT.address.IsExternal(rs)) {
                        anchor.setAttribute(anchor.getAttribute('href') ? 'href' : 'data-dgo-href', unescape(rs));
                        continue
                    } else {
                        rs = 'javascript:ctx.cfg_show("' + this.ToAbsPath(unescape(rs), source_ctx) + '", null, null);'
                    }
                } else {
                    var idx = rs.lastIndexOf(')');
                    var url = rs.substring(24, idx);
                    idx = url.indexOf(url.charAt(0), 1);
                    url = url.substring(1, idx);
                    var ul = url.length;
                    if (!WCT.address.IsExternal(url)) {
                        if (source_ctx) {
                            url = source_ctx.Expand(unescape(url)).AsString()
                        } else {
                            url = this.Expand(unescape(url)).AsString()
                        }
                    } else {
                        url = unescape(url)
                    }
                    rs = 'javascript:ctx.cfg_show("' + url + '"' + rs.substr(ul + 26)
                }
                rs = rs.replace(/javascript:ctx.cfg_show([^\)]*)/gi, 'return ctx.cfg_show$1, event');
                rs = rs.replace(/ctx\.cfg_show\(\'trigger!/, 'Page.RTFireTrigger(\'');
                anchor.setAttribute('href', 'javascript:void(0);');
                anchor.setAttribute('onclick', rs)
            }
        }
        var fstring = 'ctx.cfg_show("action!glossref:#1", null, null, event);';
        var spans = parser.getElementsByTagName('span');
        for (var i = 0, span = null; span = spans[i++];) {
            var gloss_id = span.getAttribute('gloss_id');
            if (gloss_id) {
                var lnk = fstring.replace(/#1/, gloss_id);
                var evt_type = 'onclick';
                if (PLATFORM.IOS) {
                    evt_type = 'ontouchend';
                    lnk += 'event.preventDefault();'
                }
                span.setAttribute(evt_type, lnk);
                span.style.cursor = 'help'
            }
        }
        var res = parser.innerHTML.replace(/<img([^>]*) data-dgo-src=/gi, '<img$1 src=').replace(/<video([^>]*) data-dgo-src=/gi, '<video$1 src=');
        var bi_re = new RegExp('background-image: *url\\(.?' + gif1 + '.?\\)', 'i');
        for (var i = 0, c = null; c = bi_l[i]; i++) {
            res = res.replace(bi_re, 'background-image:url(' + c + ')')
        }
        return res
    },
    ExpandHtmlString: function(src) {
        var parser = document.createElement('DIV');
        parser.style.display = 'none';
        parser.style.visibility = 'hidden';
        parser.innerHTML = src.replace(/<img([^>]*) src=/gi, '<img$1 data-dgo-src=').replace(/<a([^>]*) href=/gi, '<a$1 data-dgo-href=');
        var imgs = parser.getElementsByTagName('img');
        for (var i = 0, img = null; img = imgs[i]; i++) {
            var ds = img.getAttribute('data-dgo-src');
            if (!WCT.address.IsExternal(ds)) {
                img.setAttribute('data-dgo-src', this.Expand(ds).AsString())
            }
        }
        var anchors = parser.getElementsByTagName('a');
        for (var i = 0, anchor = null; anchor = anchors[i]; i++) {
            var rs = anchor.getAttribute('data-dgo-href');
            anchor.setAttribute('data-dgo-href', this.Expand(rs).AsString())
        }
        return parser.innerHTML.replace(/<img([^>]*) data-dgo-src=/gi, '<img$1 src=').replace(/<a([^>]*) data-dgo-href=/gi, '<a$1 href=')
    },
    OpenFile: function(url) {
        var loc = window.location.href;
        if (loc.indexOf('#') > -1) loc = loc.substring(0, loc.indexOf('#'));
        var idx_ = loc.lastIndexOf('/');
        if (idx_ >= 0) {
            var id = WCT.uid.Generate(16);
            window[id] = [this.base_, '/', url, ';;;', Env.Localize('openFileLinkMessageTitle'), ';;;', Env.Localize('openFileLinkMessage'), ';;;', Env.Localize('openFileLinkHeadline')].join('');
            var myurl = this.sbase_ + '/resources/open_file.html?id=' + id;
            window.open(myurl)
        } else {
            window.open(url)
        }
    },
    ExpandSlideControl: function(ctl) {
        if (ctl.image && ctl.image.id) {
            ctl.image.id = this.Expand(ctl.image.id).AsString();
            if (ctl.image_mouseover && ctl.image_mouseover.id) {
                ctl.image_mouseover.id = this.Expand(ctl.image_mouseover.id).AsString()
            }
            if (ctl.image_mousedown && ctl.image_mousedown.id) {
                ctl.image_mousedown.id = this.Expand(ctl.image_mousedown.id).AsString()
            }
        } else if (ctl.background_image && ctl.background_image.id) {
            ctl.background_image.id = this.Expand(ctl.background_image.id).AsString()
        } else if (ctl.src) {
            ctl.src = this.Expand(ctl.src).AsString()
        } else if (ctl.text) {
            ctl.text = this.ExpandHtmlString(ctl.text)
        } else if (ctl.pagesound) {
            ctl.pagesound = this.Expand(ctl.pagesound).AsString()
        }
    },
    escape_: function(val) {
        val = escape(val);
        if (val.search('%u') == -1) return val;
        var tmp = val.split('%');
        for (var i = 1, l = tmp.length; i < l; i++) {
            if (tmp[i].charAt(0) == 'u') {
                tmp[i] = unescape('%' + tmp[i])
            } else {
                tmp[i] = '%' + tmp[i]
            }
        }
        return tmp.join('')
    },
    check_base_: function() {
        this.base_ = this.escape_(this.base_.replace(/\\/g, '/')).replace(/%3A/g, ':');
        if (this.protocol_ == 'file') {
            if (this.base_.charAt(1) == ':') {
                this.base_ = 'file:///' + this.base_
            } else if (this.base_.substr(0, 2) == '//') {
                this.base_ = 'file:' + this.base_
            }
        }
        this.base_ = this.base_.replace(/[\/\\]/g, this.st_)
    }
};
WCT.Placeholder = function() {
    this.context_ = arguments[0] || new WCT.context();
    this.env_ = arguments[1] || {};
    var c = arguments[2] || {};
    this.config_ = {
        edit_mode: !!c.edit_mode
    };
    this.data_ = {}
};
(function() {
    function set_(res, key, value, fb) {
        res[key] = typeof value == 'string' ? value : fb
    };
    WCT.Placeholder.GetParamList = function(env, context, config) {
        var l = ['group', 'book', 'slide', 'cdoc', 'project'];
        var p = env.GetEntityList ? env.GetEntityList(context) : {};
        var e = !!config.edit_mode;
        var r = {};
        for (var i = 0, c = null; c = l[i++];) {
            var uid = p[c] || null;
            var inf = {};
            if (uid) {
                var add = c + '!' + uid;
                inf = env.GetS(add + ':entity.txt');
                if (!inf) inf = {}
            }
            var fb = e ? null : '';
            set_(r, c + ':.uid', uid, fb);
            set_(r, c + ':.tclass', inf.tclass, fb);
            set_(r, c + ':.caption', inf.caption, fb);
            set_(r, c + ':.shortdesc', inf.shortdesc, fb);
            set_(r, c + ':.description', inf.description, fb)
        }
        return r
    }
})();
WCT.Placeholder.Resolve = function(text) {
    if (!text) return text;
    var x = new WCT.context(arguments[1]);
    var e = arguments[2] || {};
    var c = arguments[3] || {};
    var l = WCT.Placeholder.GetParamList(e, x, c);
    WCT.ExtendObject(l, c.param_list || {});
    var cur;
    var itm = ['group', 'book', 'cdoc', 'project', 'chapter'];
    while (cur = itm.shift()) {
        var uid = l[cur + ':.uid'];
        var tcl = cur == 'chapter' ? (l['chapter:.tclass'] || 'group') : cur;
        if (uid && tcl) {
            x.Set(tcl, uid);
            x.SetScope(tcl);
            var ph = cur + ':.shortdesc';
            if (l[ph]) l[ph] = x.ExpandHtmlString(l[ph]);
            ph = cur + ':.description';
            if (l[ph]) l[ph] = x.ExpandHtmlString(l[ph]);
            if (cur == 'chapter' && l.chapterdescription) {
                l.chapterdescription = x.ExpandHtmlString(l.chapterdescription)
            } else if (cur == 'book' && l.bookdescription) {
                l.bookdescription = x.ExpandHtmlString(l.bookdescription)
            }
        }
    }
    var p = new WCT.Placeholder(arguments[1], e, c);
    p.SetList(l);
    text = p.Resolve(text, x);
    x.Destructor();
    p.Destructor();
    return text
};
WCT.Placeholder.prototype = (function() {
    function resolve_(key, ctx, skip) {
        var cfg = this.config_;
        var env = this.env_;
        var rex = /(\w+)(!(\w+))?:\.(\w+)$/;
        rex.exec(key);
        var tclass = RegExp.$1;
        var uid = RegExp.$2;
        var att = RegExp.$4;
        if (uid.charAt(0) === '!') uid = uid.substr(1);
        var ret = '';
        if (!att || this.data_[key]) {
            ret = this.data_[key]
        } else if (env.GetS || XHR.GetS) {
            var addr = key.replace(/:\.(\w+)$/, ':entity.txt');
            addr = ctx.Expand(addr);
            addr = addr.class_id && addr.local_id ? addr.AsString() : null;
            var data = addr ? (env.GetS ? env.GetS(addr) : XHR.GetS(ctx.ToAbsPath(addr))) : null;
            if (data && typeof data === 'string') {
                try {
                    data = eval('(' + data + ')')
                } catch (e) {
                    data = null
                }
            }
            ret = WCT.CleanupHTMLString(data && data[att] || '', key)
        }
        if (typeof ret !== 'string') ret = cfg.edit_mode ? null : '';
        if (!!uid && ctx.Get(tclass) !== uid) ret = resolve_image_(ret, tclass, uid);
        skip[key] = true;
        return this.Resolve(ret, ctx, skip)
    };

    function resolve_image_(text, tclass, uid) {
        var rex = /<img([^<>]+?)src=("|')(.+?)\2/ig;
        var mat = text.match(rex) || [];
        for (var i = 0, l = mat.length; i < l; i++) {
            var v = mat[i];
            if (v.search(/\w+[:!]/) === -1) {
                text = text.replace(v, v.replace(rex, '<img$1src=$2' + tclass + '!' + uid + ':$3$2'))
            }
        }
        return text
    };
    return {
        Destructor: function() {
            this.context_ = null;
            this.env_ = null;
            this.config_ = null;
            this.data_ = null
        },
        SetList: function(list) {
            var d = this.data_;
            for (var key in list) {
                if (list[key]) {
                    d[key] = WCT.CleanupHTMLString(list[key] + '', key)
                }
            }
        },
        Resolve: function(text) {
            if (!text) return text;
            var ctx = arguments[1] || this.context_;
            var skip = arguments[2] || {};
            var tests = [{
                x: '\\$[#%]\\{([^\\}]*?)\\}'
            }, {
                x: '\\$L[%]?\\{([^\\}]*?)\\}'
            }, {
                x: '\\$I\\{([^\\}]*?)\\}',
                t: 'img'
            }, {
                x: '\\$\\{([^\\}]*?)\\}'
            }, {
                x: '\\$([a-zA-Z_]*?)\\$'
            }];
            for (var i = 0, c = null; c = tests[i++];) {
                var x = new RegExp(c.x, 'g');
                var p = text.match(x);
                if (!p) continue;
                x = new RegExp(c.x);
                p = p.unique();
                while (p.length) {
                    var r = p.shift();
                    var k = x.exec(r)[1];
                    if (skip[k]) continue;
                    var v = resolve_.call(this, k, ctx, skip);
                    if (v === null) continue;
                    while (v.indexOf(r) >= 0) {
                        v = v.replace(r, '')
                    }
                    if (v && c.t === 'img') v = '<img src="' + v + '"/>';
                    do {
                        var t = text;
                        if (text.indexOf(r) >= 0) {
                            v = v.replace(/\$/g, "$$$$");
                            text = text.replace(r, v)
                        }
                    } while (t != text)
                }
            }
            return text
        }
    }
})();
WCT.event = {
    Element: function(ev) {
        var el = ev.target || ev.srcElement;
        el && (el.nodeType == 3) && (el = el.parentNode);
        return el
    },
    Button: function(ev) {
        if (ev.which != null) {
            return ev.which
        } else if (ev.button != null) {
            switch (ev.button) {
                case 1:
                    return 1;
                    break;
                case 4:
                    return 2;
                    break;
                case 2:
                    return 3;
                    break
            }
        }
        return null
    },
    Cancel: function(ev) {
        if (!ev) {
            ev = window.event;
            if (!ev) return false
        }
        if (ev._orig_) ev = ev._orig_;
        if (BROWSER.IE && (ev.type == 'keydown' || ev.type == 'keyup' || ev.type == 'keypress')) {
            try {
                ev.keyCode = 0
            } catch (e) {}
        }
        ev.cancelBubble = true;
        ev.returnValue = false;
        if (ev.stopPropagation) ev.stopPropagation();
        if (ev.preventDefault) ev.preventDefault();
        return false
    },
    Standardize: function(ev) {
        var wnd = arguments[1] || window;
        ev || (ev = wnd.event);
        if (!ev) return null;
        var tar = this.Element(ev);
        var but = this.Button(ev);
        return {
            button: BROWSER.MOBILE || PLATFORM.WINCE ? 1 : but,
            altKey: ev.altKey || false,
            clientX: ev.clientX || 0,
            clientY: ev.clientY || 0,
            ctrlKey: ev.ctrlKey || false,
            keyCode: ev.which || ev.keyCode || null,
            modifiers: ev.modifiers,
            screenX: ev.screenX,
            screenY: ev.screenY,
            shiftKey: ev.shiftKey || false,
            target: tar || null,
            targetName: WCT.dom.GetNodeName(tar),
            targetType: tar ? tar.nodeType : null,
            type: ev.type || null,
            _orig_: ev
        }
    },
    Observe: function(ev_name, callback) {
        var el = arguments[2] || null;
        var el1 = el || window;
        var el2 = arguments[3] ? el1 : (el ? (el.nodeType == WCT.dom.ELEMENT_NODE ? el : el.document || el) : window.document || window);
        var cpt = arguments[4] || false;
        if (typeof el1.addEventListener == 'function') {
            el1.addEventListener(ev_name, callback, cpt)
        } else if (typeof el2.attachEvent == 'function' || typeof el2.attachEvent == 'object') {
            el2.attachEvent('on' + ev_name, callback);
            if (cpt) el2.setCapture()
        }
    },
    StopObserving: function(ev_name, callback) {
        var el = arguments[2] || null;
        var el1 = el || window;
        var cpt = arguments[3] || false;
        try {
            var el2 = el ? (el.nodeType == WCT.dom.ELEMENT_NODE ? el : el.document || el) : window.document || window;
            if (typeof el1.removeEventListener == 'function') {
                el1.removeEventListener(ev_name, callback, cpt)
            } else if (typeof el2.detachEvent == 'function' || typeof el2.detachEvent == 'object') {
                el2.detachEvent('on' + ev_name, callback);
                if (cpt) el2.releaseCapture()
            }
        } catch (e) {}
    },
    CreateAndDispatchEvent: function(ev_class, ev_type, target) {
        var ev = null;
        if (window[ev_class]) {
            ev = new window[ev_class](ev_type, {
                view: window,
                bubbles: true,
                cancelable: true
            })
        } else {
            var fun = ev_class == 'TouchEvent' ? 'initTouchEvent' : 'initEvent';
            ev = document.createEvent(ev_class);
            ev[fun](ev_type, true, true)
        }
        target.dispatchEvent(ev)
    },
    GetWheelDirection: function(evt) {
        return BROWSER.IE || BROWSER.SAFARI ? (evt.wheelDelta < 0 ? 'down' : 'up') : (evt.detail > 0 ? 'down' : 'up')
    }
};
WCT.event.touches = (function() {
    var touch_id_ = null;
    var touch_start_ = null;
    var touch_moved_ = false;
    var observing_ = false;
    var count_ = 0;
    var cbs_ = {
        touchstart: [],
        touchend: [],
        touchmove: [],
        swipeleft: [],
        swiperight: [],
        swipeup: [],
        swipedown: []
    };

    function call_back_(id, ev) {
        var lst = cbs_ && cbs_[id] || [];
        for (var i = 0, c = null; c = lst[i]; i++) {
            c.f.call(c.s, ev)
        }
    };

    function ontouchstart_(ev) {
        call_back_('touchstart', ev);
        if (ev.touches.length > 1) {
            touch_id_ = null;
            return
        }
        if (ev.changedTouches.length != 1) return;
        var t = ev.changedTouches[0];
        touch_id_ = t.identifier;
        touch_start_ = {
            x: t.clientX,
            y: t.clientY
        };
        touch_moved_ = false
    };

    function ontouchend_(ev) {
        call_back_('touchend', ev);
        if (!touch_id_) return;
        for (var i = 0, ct = null; ct = ev.changedTouches[i]; i++) {
            if (ct.identifier == touch_id_ && touch_moved_) {
                var dx = ct.clientX - touch_start_.x;
                var dy = ct.clientY - touch_start_.y;
                if (Math.abs(dx) > Math.abs(dy)) {
                    if (dx > 0) {
                        call_back_('swiperight', ev)
                    } else if (dx < 0) {
                        call_back_('swipeleft', ev)
                    }
                } else if (Math.abs(dx) < Math.abs(dy)) {
                    if (dy > 0) {
                        call_back_('swipedown', ev)
                    } else if (dy < 0) {
                        call_back_('swipeup', ev)
                    }
                }
                return
            }
        }
    };

    function ontouchmove_(ev) {
        call_back_('touchmove', ev);
        if (!touch_id_) return;
        for (var i = 0, ct = null; ct = ev.changedTouches[i]; i++) {
            if (ct.identifier == touch_id_) {
                touch_moved_ = true;
                return
            }
        }
    };

    function startstop_() {
        if (!observing_ && count_) {
            observing_ = true;
            var wnd = arguments[0] || window;
            var bdy = wnd.document.body;
            WCT.event.Observe('touchstart', ontouchstart_, bdy);
            WCT.event.Observe('touchend', ontouchend_, bdy);
            WCT.event.Observe('touchmove', ontouchmove_, bdy)
        } else if (observing_ && !count_) {
            observing_ = false;
            var wnd = arguments[0] || window;
            var bdy = wnd.document.body;
            WCT.event.StopObserving('touchstart', ontouchstart_, bdy);
            WCT.event.StopObserving('touchend', ontouchend_, bdy);
            WCT.event.StopObserving('touchmove', ontouchmove_, bdy)
        }
    };
    return {
        Cleanup: function() {
            for (var ev in cbs_) {
                for (var i = 0, c = null; c = cbs_[ev][i++];) {
                    c.f = null;
                    c.s = null
                }
                cbs_[ev] = []
            }
            count_ = 0;
            startstop_()
        },
        RegisterCallback: function(ev, fun, scope) {
            var id = (cbs_[ev].id_ || 0) + 1;
            cbs_[ev].push({
                f: fun,
                s: scope,
                i: id
            });
            cbs_[ev].id_ = id;
            count_++;
            startstop_();
            return ev + '#' + id
        },
        UnregisterCallback: function(id) {
            var p = id.split('#');
            var ev = p[0];
            for (var i = 0, c = null; c = cbs_[ev][i]; i++) {
                if (c.i == p[1]) {
                    c.f = null;
                    c.s = null;
                    cbs_[ev].splice(i, 1);
                    count_--;
                    startstop_();
                    break
                }
            }
        }
    }
})();
WCT.event.hotkey = {
    NATIONAL_KEY_CODES: {
        es_ES: {
            'Ñ': 192,
            'Ç': 191,
            '¡': 221,
            '¿': 221
        },
        nb: {
            'Ø': 192,
            'Æ': 222,
            'Å': 221
        }
    },
    KEYS: {
        3: ['break', 'rollen-feststell', 'pause_break'],
        8: ['back'],
        9: ['tab'],
        13: ['enter'],
        16: ['shift'],
        17: ['ctrl'],
        18: ['alt'],
        19: ['pause'],
        20: ['capslock'],
        27: ['esc'],
        32: ['space', 'blank'],
        33: ['pgup'],
        34: ['pgdown'],
        35: ['end'],
        36: ['home'],
        37: ['left'],
        38: ['up'],
        39: ['right'],
        40: ['down'],
        45: ['ins'],
        46: ['del'],
        48: ['0'],
        49: ['1'],
        50: ['2'],
        51: ['3'],
        52: ['4'],
        53: ['5'],
        54: ['6'],
        55: ['7'],
        56: ['8'],
        57: ['9'],
        59: [';'],
        61: [],
        63: [],
        65: ['a'],
        66: ['b'],
        67: ['c'],
        68: ['d'],
        69: ['e'],
        70: ['f'],
        71: ['g'],
        72: ['h'],
        73: ['i'],
        74: ['j'],
        75: ['k'],
        76: ['l'],
        77: ['m'],
        78: ['n'],
        79: ['o'],
        80: ['p'],
        81: ['q'],
        82: ['r'],
        83: ['s'],
        84: ['t'],
        85: ['u'],
        86: ['v'],
        87: ['w'],
        88: ['x'],
        89: ['y'],
        90: ['z'],
        91: ['win', 'cmd'],
        92: ['rwin'],
        93: ['start', 'cmd'],
        96: ['num0'],
        97: ['num1'],
        98: ['num2'],
        99: ['num3'],
        100: ['num4'],
        101: ['num5'],
        102: ['num6'],
        103: ['num7'],
        104: ['num8'],
        105: ['num9'],
        106: ['numx', '*'],
        107: ['numplus'],
        109: ['numminus'],
        110: ['numcomma'],
        111: ['numdiv'],
        112: ['f1'],
        113: ['f2'],
        114: ['f3'],
        115: ['f4'],
        116: ['f5'],
        117: ['f6'],
        118: ['f7'],
        119: ['f8'],
        120: ['f9'],
        121: ['f10'],
        122: ['f11'],
        123: ['f12'],
        144: ['numlock'],
        145: ['roll'],
        171: [],
        173: [],
        186: [],
        187: ['=', '+'],
        188: [','],
        189: ['-'],
        190: ['.'],
        191: ['/'],
        192: ['`'],
        219: ['['],
        220: ['\\', '^'],
        221: ['\'', ']', '�'],
        222: [],
        226: ['<']
    },
    NONE_INPUT_KEYS: {
        pause: true,
        esc: true,
        f1: true,
        f2: true,
        f3: true,
        f4: true,
        f5: true,
        f6: true,
        f7: true,
        f8: true,
        f9: true,
        f10: true,
        f11: true,
        f12: true,
        numlock: true
    }
};
(function() {
    var k = WCT.event.hotkey.KEYS;
    k['186'].push('_252');
    k['191'].push('_35');
    k['192'].push('_246');
    k['219'].push('_223');
    k['222'].push('_228');
    k['222'].push('_222');
    if (!BROWSER.IE) {
        k['59'].push('_252');
        k['61'].push('+');
        k['63'].push('_223');
        k['109'].push('-');
        k['171'].push('+');
        k['173'].push('-')
    }
    k = null;
    var list_ = {};
    var suspended_ = false;
    var suspended_l_ = {};
    var accesskeys_added_ = false;
    var prevent_hotkeys_ = false;
    var prevent_win_ = null;

    function onkey_(ev) {
        ev = WCT.event.Standardize(ev);
        WCT.event.hotkey.CancelBrowserHotkey(ev);
        var ib = WCT.event.hotkey.IsBackKey(ev);
        return !WCT.event.hotkey.Fired(ev) || ib ? WCT.event.Cancel(ev) : true
    };

    function close_prevent_win_() {
        if (prevent_win_) {
            try {
                prevent_win_.close()
            } catch (e) {}
            prevent_win_ = null
        }
    };

    function cancel_with_window_() {
        var prevent_close = arguments[0] || false;
        var use_props = arguments[1] || false;
        try {
            var props = 'left=' + screen.availWidth * 3 + ',top=' + screen.availHeight * 3 + ',width=10,height=10,fullscreen=false,location=false,menubar=false,titlebar=false';
            var win = window.open('about:blank', '_blank', use_props ? props : '');
            win.focus();
            setTimeout("try {top.focus()} catch(e) {}", 100);
            setTimeout("try {top.focus()} catch(e) {}", 250);
            setTimeout("try {top.focus()} catch(e) {}", 500);
            setTimeout("try {top.focus()} catch(e) {}", 750);
            if (!prevent_close) win.close()
        } catch (e) {}
        if (prevent_close) {
            prevent_win_ = win;
            WCT.SetTimeout(close_prevent_win_, 750, this)
        }
    };
    WCT.ExtendObject(WCT.event.hotkey, {
        SetIgnoreHotkey: function(val) {
            prevent_hotkeys_ = val
        },
        CancelBrowserHotkey: function(evt) {
            if (!prevent_hotkeys_ || evt.keyCode >= 16 && evt.keyCode <= 18 || !evt.ctrlKey && !evt.altKey && (evt.keyCode < 112 || evt.keyCode > 123)) {
                return
            }
            if (BROWSER.IE) {
                if (!accesskeys_added_) {
                    accesskeys_added_ = true;
                    var keys = this.KEYS;
                    for (var i = 65; i <= 90; i++) {
                        var k = keys[i];
                        var a = $$('A');
                        a.id = 'access_key_' + k;
                        a.href = '#';
                        a.accessKey = k;
                        document.body.appendChild(a)
                    }
                }
                if (evt.keyCode == 36 && evt.altKey) cancel_with_window_(true, true);
                if (evt.keyCode == 115 && evt.altKey) cancel_with_window_(BROWSER.IE8, true);
                if (evt.keyCode == 115 && evt.ctrlKey) cancel_with_window_(!BROWSER.IE8, BROWSER.IE8)
            }
            WCT.event.Cancel(evt)
        },
        Cleanup: function() {
            for (var key in list_) {
                for (var i = list_[key].length - 1; i >= 0; i--) {
                    list_[key][i].callback = null;
                    list_[key][i].scope = null
                }
                delete list_[key].id_;
                delete list_[key]
            }
            var keys = this.KEYS;
            for (var i = 65; i <= 90; i++) {
                var a = $('access_key_' + keys[i]);
                if (a) a.parentNode.removeChild(a)
            }
            accesskeys_added_ = false;
            close_prevent_win_();
            prevent_hotkeys_ = false;
            suspended_ = false;
            suspended_l_ = {}
        },
        Start: function() {
            WCT.event.Observe('keydown', onkey_, arguments[0]);
            WCT.event.Observe('keyup', onkey_, arguments[0])
        },
        Stop: function() {
            WCT.event.StopObserving('keydown', onkey_, arguments[0]);
            WCT.event.StopObserving('keyup', onkey_, arguments[0])
        },
        Observe: function(key, type, callback, scope) {
            var shift = key.indexOf('shift_') >= 0;
            var ctrl = key.indexOf('ctrl_') >= 0;
            var cmd = key.indexOf('cmd_') >= 0;
            var alt = key.indexOf('alt_') >= 0;
            key = key.replace(/shift_|alt_|ctrl_|cmd_/g, '');
            if (!list_[key]) list_[key] = [];
            if (!list_[key].id_) list_[key].id_ = 0;
            var full = '';
            if (shift) full += 'shift_';
            if (ctrl) full += 'ctrl_';
            if (cmd) full += 'cmd_';
            if (alt) full += 'alt_';
            full += key;
            var id = ++list_[key].id_;
            list_[key].push({
                id: id,
                type: type,
                callback: callback,
                scope: scope,
                shift: shift,
                ctrl: ctrl,
                alt: alt,
                full: full
            });
            return id
        },
        StopObserving: function(key, id) {
            key = key.replace(/shift_|alt_|ctrl_|cmd_/g, '');
            var l = list_[key] || null;
            if (!l) return;
            var idx = l.indexOfAtt(id, 'id');
            if (idx >= 0) {
                l[idx].callback = null;
                l[idx].scope = null;
                l.splice(idx, 1)
            }
            if (!l.length) {
                delete l.id_;
                delete list_[key]
            }
        },
        Fired: function(ev) {
            var type = ev.type.substr(3);
            if (!suspended_) {
                for (var key in list_) {
                    if (key == 'ALL') continue;
                    for (var i = 0, c = null; c = list_[key][i++];) {
                        if (c.type == type && this.IsKey(ev, c.full)) {
                            c.callback.call(c.scope, c.full, type, ev, c.id)
                        }
                    }
                }
                var l = list_.ALL || null;
                if (l) {
                    for (var i = 0, c = null; c = l[i++];) {
                        if (c.type == type) c.callback.call(c.scope, type, ev, c.id)
                    }
                }
            }
            return !ev.hasToBeCancelled
        },
        GetKey: function(ev) {
            var mod = '';
            if (ev.shiftKey) mod += 'shift_';
            if (ev.ctrlKey) mod += 'ctrl_';
            if (ev.cmdKey) mod += 'cmd_';
            if (ev.altKey) mod += 'alt_';
            var key;
            var ks = this.KEYS[ev.keyCode];
            if (ks && ks.length) {
                key = ks[0].charAt(0) == '_' ? String.fromCharCode(ks[0].substr(1) - 0) : ks[0]
            } else {
                key = String.fromCharCode(ev.keyCode).toLowerCase()
            }
            mod = mod.split(key + '_').join('');
            key = mod + key;
            var k = key.replace(/shift|ctrl|cmd|alt/g, '').replace(/_{2,}/g, '').replace(/^_/, '');
            return k && key
        },
        IsKey: function(ev, key) {
            var mod = '';
            if (ev.shiftKey) mod += 'shift_';
            if (ev.ctrlKey) mod += 'ctrl_';
            if (ev.cmdKey) mod += 'cmd_';
            if (ev.altKey) mod += 'alt_';
            var ks = this.KEYS[ev.keyCode];
            if (ks && ks.length) {
                for (var i = 0, c = null; c = ks[i++];) {
                    var k = c.charAt(0) == '_' ? String.fromCharCode(c.substr(1) - 0) : c;
                    if (k + '_' == mod && k == key || mod + k == key) return true
                }
            } else {
                var k = String.fromCharCode(ev.keyCode).toLowerCase();
                return k + '_' == mod && k == key || mod + k == key
            }
            return false
        },
        IsBackKey: function(ev) {
            var b = this.IsKey(ev, 'back');
            if (!b) return false;
            var tn = ev.targetName;
            var tt = {
                text: 1,
                password: 1
            }[ev.target.type];
            return tn !== 'textarea' && (tn !== 'input' || !tt)
        },
        Suspend: function(id, s) {
            if (s) {
                suspended_l_[id] = 1;
                suspended_ = true
            } else {
                delete suspended_l_[id];
                var empty = true;
                for (var id in suspended_l_) {
                    empty = false;
                    break
                }
                if (empty) suspended_ = false
            }
        }
    })
})();
WCT.skin = (function() {
    function apply_xy_(dom, spec, v1, v2) {
        if (typeof spec != 'number') {
            if (spec == '-0') {
                dom.style[v2] = '0'
            } else if (typeof spec == 'string') {
                dom.style[v1] = spec
            }
        } else if (spec >= 0) {
            dom.style[v1] = spec + 'px'
        } else {
            dom.style[v2] = -spec + 'px'
        }
    };

    function apply_wh_(dom, spec, v) {
        if (typeof spec == 'number') {
            dom.style[v] = spec + 'px'
        } else if (typeof spec == 'string') {
            dom.style[v] = spec
        }
    };

    function apply_att_(dom, att, val) {
        var suffix = arguments[3] || '';
        var parts = att.split('_');
        att = parts[0];
        for (var i = 1, l = parts.length; i < l; i++) {
            att += parts[i].toFirstUpperCase()
        }
        dom.style[att] = val + suffix
    };

    function get_wh_(spec, nglobal, nlist) {
        if (typeof spec[nglobal] == 'number') {
            return spec[nglobal] * 2
        }
        var wh = 0;
        for (var i = nlist.length - 1; i >= 0; i--) {
            var n = Number(spec[nlist[i]]);
            isNaN(n) || (wh += n)
        }
        return wh
    };
    return {
        ConvertXToRtl: function(x) {
            if (typeof x == 'number') {
                return x ? -x : '-0'
            } else if (x == '-0') {
                return 0
            }
            return x
        },
        ApplyBgImage: function(dom, spec) {
            var rep = spec.repeat && (spec.repeat == 'x' || spec.repeat == 'y') ? 'repeat-' + spec.repeat : 'no-repeat';
            dom.style.backgroundImage = 'url("' + spec.id + '")';
            dom.style.backgroundPosition = (spec.x || 0) + 'px ' + (spec.y || 0) + 'px';
            dom.style.backgroundRepeat = rep
        },
        ApplyPosition: function(dom, spec) {
            if (typeof spec.x != 'undefined' || typeof spec.y != 'undefined' || typeof spec.w != 'undefined' || typeof spec.h != 'undefined') {
                dom.style.position = spec.pos || 'absolute';
                apply_xy_(dom, spec.x, 'left', 'right');
                apply_xy_(dom, spec.y, 'top', 'bottom');
                apply_wh_(dom, spec.w, 'width');
                apply_wh_(dom, spec.h, 'height');
                if (!arguments[2]) dom.style.fontSize = '1px'
            }
            if (typeof spec.max_w != 'undefined') apply_wh_(dom, spec.max_w, 'maxWidth');
            if (typeof spec.min_w != 'undefined') apply_wh_(dom, spec.min_w, 'minWidth');
            if (typeof spec.max_h != 'undefined') apply_wh_(dom, spec.max_h, 'maxHeight');
            if (typeof spec.min_h != 'undefined') apply_wh_(dom, spec.min_h, 'minHeight')
        },
        ApplyBorder: function(dom, spec) {
            for (var s in spec) {
                switch (s) {
                    case 'border':
                        dom.style.border = spec[s];
                        break;
                    case 'border_color':
                    case 'border_style':
                    case 'border_left':
                    case 'border_right':
                    case 'border_top':
                    case 'border_bottom':
                    case 'box_shadow':
                        apply_att_(dom, s, spec[s]);
                        break;
                    case 'border_width':
                    case 'border_radius':
                    case 'border_top_left_radius':
                    case 'border_top_right_radius':
                    case 'border_bottom_left_radius':
                    case 'border_bottom_right_radius':
                        apply_att_(dom, s, spec[s], 'px');
                        break
                }
            }
        },
        ApplyPadding: function(dom, spec) {
            for (var s in spec) {
                switch (s) {
                    case 'padding':
                        dom.style.padding = spec[s] + 'px';
                        break;
                    case 'padding_left':
                    case 'padding_top':
                    case 'padding_right':
                    case 'padding_bottom':
                        apply_att_(dom, s, spec[s], 'px');
                        break
                }
            }
        },
        ApplyMargin: function(dom, spec) {
            for (var s in spec) {
                switch (s) {
                    case 'margin':
                        dom.style.margin = spec[s] + 'px';
                        break;
                    case 'margin_left':
                    case 'margin_top':
                    case 'margin_right':
                    case 'margin_bottom':
                        apply_att_(dom, s, spec[s], 'px');
                        break
                }
            }
        },
        ApplyTextFormats: function(dom, spec) {
            for (var s in spec) {
                switch (s) {
                    case 'font_family':
                    case 'font_variant':
                    case 'font_weight':
                    case 'text_align':
                    case 'background_color':
                    case 'white_space':
                    case 'text_overflow':
                    case 'text_decoration':
                    case 'overflow_x':
                    case 'overflow_y':
                        apply_att_(dom, s, spec[s]);
                        break;
                    case 'line_height':
                    case 'font_size':
                        apply_att_(dom, s, spec[s], 'px');
                        break;
                    case 'text_color':
                        dom.style.color = spec[s];
                        break;
                    case 'overflow':
                        dom.style[s] = spec[s];
                        break
                }
            }
        },
        Apply: function(dom, spec) {
            var img_mod = arguments[2] || 'image';
            this.ApplyPosition(dom, spec);
            spec[img_mod] && this.ApplyBgImage(dom, spec[img_mod]);
            this.ApplyBorder(dom, spec);
            this.ApplyPadding(dom, spec);
            this.ApplyMargin(dom, spec);
            this.ApplyTextFormats(dom, spec);
            spec.cursor && (dom.style.cursor = spec.cursor)
        },
        GetPaddingWidth: function(spec) {
            return get_wh_(spec, 'padding', ['padding_left', 'padding_right'])
        },
        GetPaddingHeight: function(spec) {
            return get_wh_(spec, 'padding', ['padding_top', 'padding_bottom'])
        },
        GetMarginWidth: function(spec) {
            return get_wh_(spec, 'margin', ['margin_left', 'margin_right'])
        },
        GetMarginHeight: function(spec) {
            return get_wh_(spec, 'margin', ['margin_top', 'margin_bottom'])
        },
        GetPaddingMargin: function(skin) {
            var mod = arguments[1] || '';
            var pn = mod + 'padding';
            var mn = mod + 'margin';
            var pg = 0;
            var mg = 0;
            if (typeof skin[pn] == 'number') {
                pg = skin[pn]
            } else if (typeof skin.padding == 'number') {
                pg = skin.padding
            }
            if (typeof skin[mn] == 'number') {
                mg = skin[mn]
            } else if (typeof skin.margin == 'number') {
                mg = skin.margin
            }
            var r = {
                padding: {
                    l: pg,
                    r: pg,
                    t: pg,
                    b: pg
                },
                margin: {
                    l: mg,
                    r: mg,
                    t: mg,
                    b: mg
                }
            };
            var p = r.padding;
            var m = r.margin;
            var keys = {
                left: 'l',
                right: 'r',
                top: 't',
                bottom: 'b',
                l: 'l',
                r: 'r',
                t: 't',
                b: 'b'
            };
            for (var k in keys) {
                var c = keys[k];
                var pk2 = 'padding_' + k;
                var pk1 = mod + pk2;
                var mk2 = 'margin_' + k;
                var mk1 = mod + mk2;
                if (typeof skin[pk1] == 'number') {
                    p[c] = skin[pk1]
                } else if (typeof skin[pk2] == 'number') {
                    p[c] = skin[pk2]
                }
                if (typeof skin[mk1] == 'number') {
                    m[c] = skin[mk1]
                } else if (typeof skin[mk2] == 'number') {
                    m[c] = skin[mk2]
                }
            }
            p.w = p.l + p.r;
            p.h = p.t + p.b;
            m.w = m.l + m.r;
            m.h = m.t + m.b;
            p.s = [p.t, p.r, p.b, p.l].join('px ') + 'px';
            m.s = [m.t, m.r, m.b, m.l].join('px ') + 'px';
            return r
        },
        GetSpacingWidth: function(spec) {
            return get_wh_(spec, 'outer_spacing', ['outer_spacing_l', 'outer_spacing_r'])
        },
        GetSpacingHeight: function(spec) {
            return get_wh_(spec, 'outer_spacing', ['outer_spacing_t', 'outer_spacing_b'])
        },
        GetBorderWidth: function(spec) {
            if (spec.border_style && spec.border_style != 'none' && typeof spec.border_width == 'number') {
                return spec.border_width * 2
            }
            if (spec.border) {
                var b = spec.border.split(' ');
                if (b.length == 3 && b[1] != 'none') {
                    b = parseInt(b[0]);
                    if (typeof b == 'number') return b * 2
                }
            }
            var bw = 0;
            var map = ['left', 'right'];
            for (var i = map.length - 1; i >= 0; i--) {
                var s = spec['border_' + map[i]];
                if (s) {
                    var b = s.split(' ');
                    if (b.length == 3 && b[1] != 'none') {
                        b = parseInt(b[0]);
                        typeof b == 'number' && (bw += b)
                    }
                }
            }
            return bw
        },
        GetBorderHeight: function(spec) {
            if (spec.border_style && spec.border_style != 'none' && typeof spec.border_width == 'number') {
                return spec.border_width * 2
            }
            if (spec.border) {
                var b = spec.border.split(' ');
                if (b.length == 3 && b[1] != 'none') {
                    b = parseInt(b[0]);
                    if (typeof b == 'number') return b * 2
                }
            }
            var bw = 0;
            var map = ['top', 'bottom'];
            for (var i = map.length - 1; i >= 0; i--) {
                var s = spec['border_' + map[i]];
                if (s) {
                    var b = s.split(' ');
                    if (b.length == 3 && b[1] != 'none') {
                        b = parseInt(b[0]);
                        typeof b == 'number' && (bw += b)
                    }
                }
            }
            return bw
        },
        GetBorder: function(skin) {
            var w = skin.border_w || 0;
            var c = skin.border_color || '';
            var b = {
                l_w: w,
                l_c: c,
                r_w: w,
                r_c: c,
                t_w: w,
                t_c: c,
                b_w: w,
                b_c: c
            };
            var keys = ['l', 'r', 't', 'b'];
            for (var i = 0, k = null; k = keys[i++];) {
                var kw = 'border_' + k + '_w';
                var kc = 'border_' + k + '_color';
                if (typeof skin[kw] == 'number') b[k + '_w'] = skin[kw];
                if (typeof skin[kc] == 'string') b[k + '_c'] = skin[kc]
            }
            b.w = b.l_w + b.r_w;
            b.h = b.t_w + b.b_w;
            b.ws = [b.t_w, b.r_w, b.b_w, b.l_w].join('px ') + 'px';
            b.cs = [b.t_c, b.r_c, b.b_c, b.l_c].join(' ');
            return b
        },
        Merge: function(base) {
            var s = !arguments[2] ? WCT.DeepCopy(base) : base;
            var e = arguments[3] || false;
            var u = arguments[1];
            var pu = arguments[4] || false;
            if (!u) return s;
            for (var k in u) {
                if (typeof s[k] == 'undefined') {
                    if (e) s[k] = WCT.DeepCopy(u[k]);
                    continue
                }
                if (typeof u[k] == 'object') {
                    if (!u[k] || u[k].isArray) {
                        s[k] = u[k]
                    } else {
                        this.Merge(s[k], u[k], true, e)
                    }
                } else {
                    s[k] = pu ? u[k] || s[k] : u[k]
                }
            }
            return s
        },
        ExtendUrls: function(skin, url) {
            var context = arguments[2];
            for (var i in skin) {
                if (skin[i] && typeof skin[i] == 'object') {
                    this.ExtendUrls(skin[i], url, context)
                } else if (typeof skin[i] == 'string' && (skin[i].match(/\.gif$/) || skin[i].match(/\.png$/)) && !WCT.address.IsExternal(skin[i])) {
                    if (context && (skin[i].indexOf('!') >= 0 || skin[i].indexOf(':') >= 0)) {
                        skin[i] = context.ToAbsPath(skin[i])
                    } else {
                        skin[i] = url + skin[i]
                    }
                }
            }
        }
    }
})();
WCT.dnd = function(obj) {
    var area = arguments[1] || null;
    var elem = area || obj;
    var uid = WCT.uid.Generate(16, 'DND_');
    elem.setAttribute('dnd_id', uid);
    elem.style.cursor = 'move';
    elem.onselectstart = function() {
        return false
    };
    elem.ondragstart = function() {
        return false
    };
    this.o_ = obj;
    this.a_ = area;
    this.e_ = elem;
    this.u_ = uid;
    this.x_ = null;
    this.y_ = null;
    this.f_ = null;
    this.px_ = null;
    this.py_ = null;
    this.mx_ = null;
    this.my_ = null;
    this.dragging_ = false;
    this.auto_clamp_ = true;
    this.restrict_ = {
        x: false,
        y: false
    };
    this.min_ = {
        x: null,
        y: null
    };
    this.max_ = {
        x: null,
        y: null
    };
    this.touch_id_ = null;
    this.ignore_ = null;
    this._pause = false;
    this.onbegin_ = null;
    this.onmove_ = null;
    this.onend_ = null;
    this.dragging_class_ = null;
    WCT.dnd.CONTAINER[uid] = this;
    if (arguments[2] !== false && ++WCT.dnd.COUNT == 1) {
        WCT.event.Observe('mousedown', WCT.dnd.mousedown);
        WCT.event.Observe('touchstart', WCT.dnd.touchstart, document.body)
    }
};
WCT.ExtendObject(WCT.dnd, (function() {
    function get_(evt) {
        if (arguments[1] === true) {
            var c = WCT.dnd.CONTAINER;
            for (var id in c) {
                if (c[id].IsDragging()) return c[id]
            }
            return null
        } else {
            var t = evt.target;
            while (t && t.getAttribute && !t.getAttribute('dnd_id')) t = t.parentNode;
            if (!t || !t.getAttribute) return;
            var u = t.getAttribute('dnd_id');
            return WCT.dnd.CONTAINER[u] || null
        }
    };

    function end_all_(evt) {
        var c = WCT.dnd.CONTAINER;
        for (var id in c) {
            if (c[id].IsDragging()) c[id].End()
        }
    };
    return {
        CONTAINER: {},
        COUNT: 0,
        Cleanup: function() {
            var c = WCT.dnd.CONTAINER;
            for (var i in c) {
                if (c[i].Destructor) c[i].Destructor();
                c[i] = null
            }
            WCT.dnd.CONTAINER = {};
            WCT.dnd.COUNT = 0
        },
        mousedown: function(evt) {
            evt = WCT.event.Standardize(evt);
            var o = get_(evt);
            if (o) o.Begin(evt)
        },
        mousemove: function(evt) {
            if (evt.preventDefault) evt.preventDefault();
            evt = WCT.event.Standardize(evt);
            var o = get_(evt, true);
            if (o) o.Move(evt)
        },
        mouseup: function(evt) {
            evt = WCT.event.Standardize(evt);
            var o = get_(evt, true);
            if (o) o.End(evt)
        },
        touchstart: function(evt) {
            if (evt.touches.length > 1) {
                end_all_();
                return
            }
            var t = evt.changedTouches.length == 1 ? evt.changedTouches[0] : null;
            var o = t && get_(t) || null;
            if (o) o.Begin(t, true)
        },
        touchmove: function(evt) {
            if (evt.preventDefault) evt.preventDefault();
            if (evt.touches.length > 1) {
                end_all_();
                return
            }
            var t = evt.changedTouches.length == 1 ? evt.changedTouches[0] : null;
            var o = t && get_(t, true);
            if (o && o.touch_id_ == t.identifier) o.Move(t)
        },
        touchend: function(evt) {
            var t = evt.changedTouches.length == 1 ? evt.changedTouches[0] : null;
            var o = t && get_(t, true);
            if (o && o.touch_id_ == t.identifier) o.End(t, true)
        }
    }
})());
WCT.dnd.prototype = {
    Destructor: function() {
        if (this.dragging_) this.End();
        document.onselectstart = this.f_;
        this.f_ = null;
        if (this.u_) {
            delete WCT.dnd.CONTAINER[this.u_];
            this.u_ = null;
            if (--WCT.dnd.COUNT == 0) {
                WCT.event.StopObserving('mousedown', WCT.dnd.mousedown);
                WCT.event.StopObserving('touchstart', WCT.dnd.mousedown, document.body)
            }
        }
        if (this.e_) {
            this.e_.onselectstart = null;
            this.e_.ondragstart = null;
            this.e_.style.cursor = 'default';
            this.e_ = null
        }
        this.o_ = null;
        this.a_ = null;
        this.restrict_ = null;
        this.min_ = null;
        this.max_ = null;
        this.touch_id_ = null;
        if (this.onbegin_) {
            this.onbegin_.callback = null;
            this.onbegin_.scope = null;
            this.onbegin_ = null
        }
        if (this.onmove_) {
            this.onmove_.callback = null;
            this.onmove_.scope = null;
            this.onmove_ = null
        }
        if (this.onend_) {
            this.onend_.callback = null;
            this.onend_.scope = null;
            this.onend_ = null
        }
        return null
    },
    Ignore: function(dom_id) {
        this.ignore_ = dom_id
    },
    Restrict: function(direc, restrict) {
        var r = this.restrict_;
        r[direc] = restrict;
        if (typeof arguments[2] == 'number') this.min_[direc] = arguments[2];
        if (typeof arguments[3] == 'number') this.max_[direc] = arguments[3];
        var s = this.e_.style;
        if (r.x && r.y) {
            s.cursor = 'default'
        } else if (r.x) {
            s.cursor = 'n-resize'
        } else if (r.y) {
            s.cursor = 'e-resize'
        } else {
            s.cursor = 'move'
        }
    },
    SetStartPos: function(x, y) {
        this.x_ = x;
        this.y_ = y
    },
    SetParOffset: function(x, y) {
        this.px_ = x;
        this.py_ = y
    },
    SetAutoClamp: function(ac) {
        this.auto_clamp_ = ac
    },
    SetCallback: function(evt, cb, s) {
        if (typeof cb == 'function' && (evt == 'onbegin' || evt == 'onmove' || evt == 'onend')) {
            this[evt + '_'] = {
                callback: cb,
                scope: s
            }
        }
    },
    SetDraggingClass: function(cl) {
        this.dragging_class_ = cl
    },
    Begin: function(evt) {
        if (this._pause) return;
        if (evt.target.id == this.ignore_) return;
        if (evt.preventDefault) evt.preventDefault();
        var p = WCT.dom.GetPosition(this.o_, true);
        var po = {
            x: this.px_ != null ? this.px_ : p.left,
            y: this.py_ != null ? this.py_ : p.top
        };
        this.x_ = evt.clientX - po.x;
        this.y_ = evt.clientY - po.y;
        this.mx_ = WCT.dom.GetWindowWidth() - this.o_.offsetWidth;
        this.my_ = WCT.dom.GetWindowHeight() - this.o_.offsetHeight;
        this.dragging_ = true;
        if (this.onbegin_) {
            this.onbegin_.callback.call(this.onbegin_.scope, this.o_)
        }
        if (!arguments[1]) {
            this.f_ = document.onselectstart;
            document.onselectstart = function() {
                return false
            };
            if (document.body.setCapture) document.body.setCapture();
            WCT.event.Observe('mousemove', WCT.dnd.mousemove);
            WCT.event.Observe('mouseup', WCT.dnd.mouseup)
        } else {
            this.touch_id_ = evt.identifier;
            WCT.event.Observe('touchmove', WCT.dnd.touchmove, document.body);
            WCT.event.Observe('touchend', WCT.dnd.touchend, document.body)
        }
        WCT.event.Cancel(evt)
    },
    Move: function(evt) {
        var l = evt.clientX - this.x_;
        var t = evt.clientY - this.y_;
        if (typeof this.min_.x == 'number') l = Math.max(this.min_.x, l);
        if (typeof this.min_.y == 'number') t = Math.max(this.min_.y, t);
        if (typeof this.max_.x == 'number') l = Math.min(this.max_.x, l);
        if (typeof this.max_.y == 'number') t = Math.min(this.max_.y, t);
        if (this.auto_clamp_) {
            l = Math.max(0, Math.min(this.mx_, l));
            t = Math.max(0, Math.min(this.my_, t))
        }
        if (!this.restrict_.x) this.o_.style.left = l + 'px';
        if (!this.restrict_.y) this.o_.style.top = t + 'px';
        if (this.onmove_) {
            if (this.dragging_class_) WCT.dom.AddClass(this.o_, this.dragging_class_);
            this.onmove_.callback.call(this.onmove_.scope, this.o_, l, t)
        }
    },
    End: function(evt) {
        WCT.event.StopObserving('mousemove', WCT.dnd.mousemove);
        WCT.event.StopObserving('mouseup', WCT.dnd.mouseup);
        WCT.event.StopObserving('touchmove', WCT.dnd.touchmove, document.body);
        WCT.event.StopObserving('touchend', WCT.dnd.touchend, document.body);
        if (document.body.releaseCapture) document.body.releaseCapture();
        this.touch_id_ = null;
        this.dragging_ = false;
        document.onselectstart = this.f_;
        this.f_ = null;
        if (this.onend_) {
            if (this.dragging_class_) WCT.dom.RemoveClass(this.o_, this.dragging_class_);
            this.onend_.callback.call(this.onend_.scope, this.o_)
        }
    },
    IsDragging: function() {
        return this.dragging_
    },
    pause: function(pause) {
        this._pause = !!pause
    }
};
WCT.localization = {
    Parse: function(file) {
        file = file.replace(/\r\n/g, '\n');
        var lines = file.split('\n');
        var data = {};
        for (var i = 0, len = lines.length; i < len; i++) {
            var line = lines[i];
            if (!line.length || line.charAt(0) == '#') continue;
            var tab_pos = line.indexOf('\t');
            var white_pos = line.indexOf(' ');
            var my_pos = null;
            if (tab_pos >= 0 && (white_pos < 0 || tab_pos < white_pos)) {
                my_pos = tab_pos
            } else if (white_pos >= 0) {
                my_pos = white_pos
            } else {
                continue
            }
            var key = line.substr(0, my_pos).trim();
            var value = line.substr(my_pos + 1).trim();
            if (key.charAt(key.length - 1) == ';') {
                key = key.substr(0, key.length - 1)
            }
            if (value.charAt(0) == '"' && value.charAt(value.length - 1) == '"') {
                value = value.substr(1, value.length - 2)
            }
            data[key] = value
        }
        for (var key in data) {
            var value = data[key];
            var idx = value.indexOf('@{');
            while (idx >= 0) {
                var close = value.indexOf('}', idx);
                if (close < 0) close = value.length - 1;
                var before = value.substr(0, idx);
                var variable = value.substring(idx + 2, close);
                var after = value.substr(close + 1);
                var replacement = data[variable] || ('[' + variable + ']');
                value = before + replacement + after;
                idx = value.indexOf('@{')
            }
            data[key] = value
        }
        return data
    }
};
WCT.dom = {
    ELEMENT_NODE: 1,
    ATTRIBUTE_NODE: 2,
    TEXT_NODE: 3,
    DOCUMENT_NODE: 9,
    SCROLLBAR_W: null,
    SCROLLBAR_H: null,
    isLink: function(node) {
        while (node) {
            if (this.GetNodeName(node) === 'a') return true;
            node = node.parentNode
        }
        return false
    },
    GetNodeName: function(node) {
        return node && node.nodeName ? node.nodeName.toLowerCase() : ''
    },
    isNodeName: function(e, name) {
        if (!e || !name) return false;
        var n = this.GetNodeName(e);
        return n === name.toLowerCase()
    },
    CreateElementMSIE: function(tag) {
        var type = arguments[1] || null;
        var name = arguments[2] || null;
        var doc = arguments[3] || document;
        var el = null;
        if (BROWSER.IE && BROWSER.VERSION < 11) {
            var t = type != null ? ' type="' + type + '"' : '';
            var n = name != null ? ' name="' + name + '"' : '';
            try {
                el = $$('<' + tag + t + n + '>', doc)
            } catch (e) {
                try {
                    el = $$(tag, doc);
                    if (type != null) el.type = type;
                    if (name != null) el.name = name
                } catch (e) {}
            }
        } else {
            el = $$(tag, doc);
            if (type != null) el.type = type;
            if (name != null) el.name = name
        }
        return el
    },
    PreviousSibling: function(e) {
        if (BROWSER.IE && BROWSER.VERSION < 9) {
            var pos = 0;
            var cn = e.parentNode.childNodes;
            for (var i = 0, child = null; child = cn[i]; i++) {
                if (e === child) {
                    pos = i - 1;
                    break
                }
            }
            return cn[pos]
        }
        return e.previousSibling
    },
    NextSibling: function(e) {
        if (BROWSER.IE && BROWSER.VERSION < 9) {
            var pos = 0;
            var cn = e.parentNode.childNodes;
            for (var i = 0, child = null; child = cn[i]; i++) {
                if (e === child) {
                    pos = i + 1;
                    break
                }
            }
            return cn[pos]
        }
        return e.nextSibling
    },
    CreateInputElement: function() {
        var t = arguments[0] || 'text';
        var e = this.CreateElementMSIE('input', t, arguments[1], arguments[2]);
        if (!e && t != 'text') e = this.CreateElementMSIE('input', 'text', arguments[1], arguments[2]);
        return e
    },
    GetPosition: function(node) {
        var box;
        if (PLATFORM.IOS && node.style.display == 'none') {
            var nv = node.style.visibility;
            node.style.visibility = 'hidden';
            node.style.display = 'block';
            box = node.getBoundingClientRect();
            node.style.display = 'none';
            node.style.visibility = nv
        } else {
            box = node.getBoundingClientRect()
        }
        var doc = node.ownerDocument;
        var doc_el = doc.documentElement;
        var cl = doc_el.clientLeft || doc.body.clientLeft || 0;
        var ct = doc_el.clientTop || doc.body.clientTop || 0;
        var l = box.left - cl;
        var t = box.top - ct;
        if (arguments[1]) {
            var win = doc.defaultView || doc.parentWindow;
            var sl = win.pageXOffset || doc_el.scrollLeft;
            var st = win.pageYOffset || doc_el.scrollTop;
            l += sl;
            t += st
        }
        if (arguments[2]) {
            var lim = this.GetPosition(arguments[2], arguments[1]);
            l -= lim.left;
            t -= lim.top
        }
        return {
            left: l,
            top: t
        }
    },
    RemoveCssTransition: function(node) {
        this.CssTransition(node, '', '0s');
        if (arguments[1]) {
            node.removeEventListener('webkitTransitionEnd', arguments[1], false);
            node.removeEventListener('transitionend', arguments[1], false);
            node.removeEventListener('oTransitionEnd', arguments[1], false)
        }
    },
    CssTransition: function(node) {
        var property = arguments[1] || '';
        var duration = arguments[2] || '1s';
        var timing = arguments[3] || 'ease';
        var delay = arguments[4] || '0s';
        var cb = arguments[5] || null;
        node.style.transitionProperty = property;
        node.style.transitionDuration = duration;
        node.style.transitionTimingFunction = timing;
        node.style.transitionDelay = delay;
        node.style.MozTransitionProperty = property == 'transform' ? '-moz-transform' : property;
        node.style.MozTransitionDuration = duration;
        node.style.MozTransitionTimingFunction = timing;
        node.style.MozTransitionDelay = delay;
        node.style.WebkitTransitionProperty = property == 'transform' ? '-webkit-transform' : property;
        node.style.WebkitTransitionDuration = duration;
        node.style.WebkitTransitionTimingFunction = timing;
        node.style.WebkitTransitionDelay = delay;
        node.style.OTransitionProperty = property;
        node.style.OTransitionDuration = duration;
        node.style.OTransitionTimingFunction = timing;
        node.style.OTransitionDelay = delay;
        if (cb) {
            node.addEventListener('webkitTransitionEnd', cb, false);
            node.addEventListener('transitionend', cb, false);
            node.addEventListener('oTransitionEnd', cb, false)
        }
    },
    CssZoom: function(node, value) {
        node.style.zoom = value
    },
    CssTransform: function(node, method, x, y, z) {
        var css = method + '(' + x + 'px,' + y + 'px,' + z + 'px)';
        node.style.transform = css;
        node.style.msTransform = css;
        node.style.MozTransform = css;
        node.style.WebkitTransform = css;
        node.style.OTransform = css
    },
    CssTransformScale: function(node, scale) {
        var sc = 'scale(' + scale + ')';
        node.style.Transform = sc;
        node.style.msTransform = sc;
        node.style.MozTransform = sc;
        node.style.WebkitTransform = sc;
        node.style.OTransform = sc;
        var ox = arguments[2] != null ? arguments[2] : '50%';
        var oy = arguments[3] != null ? arguments[3] : '50%';
        var or = ox + ' ' + oy;
        node.style.TransformOrigin = or;
        node.style.msTransformOrigin = or;
        node.style.MozTransformOrigin = or;
        node.style.WebkitTransformOrigin = or;
        node.style.OTransformOrigin = or
    },
    ApplyBackgroundStyle: function(node, params) {
        var gr = params.gradient || '';
        if (BROWSER.IE && BROWSER.VERSION < 9) gr = '';
        switch (gr) {
            case 'gradient_0':
            case 'gradient_45':
            case 'gradient_90':
            case 'gradient_135':
            case 'gradient_180':
            case 'gradient_225':
            case 'gradient_270':
            case 'gradient_315':
            case 'gradient_1':
                var deg = gr.substr(9);
                var wkdeg = deg >= 180 ? deg - 180 : deg + 180;
                var a = !BROWSER.SAFARI ? 'linear-gradient(' + deg + 'deg, ' : '-webkit-linear-gradient(' + wkdeg + 'deg, ';
                var b = params.background_color + ', ' + params.background_color2 + ')';
                var t = arguments[2] || '';
                if (!(PLATFORM.IOS && t === 'select')) {
                    node.style.background = a + b
                }
                node.style.backgroundColor = params.background_color;
                break;
            case 'gradient_flat':
            default:
                node.style.backgroundColor = params.background_color || '';
                break
        }
    },
    ApplyShadowStyle: function(node, params) {
        var sh = params.shadow_show;
        if (!sh) return;
        var h = params.shadow_h || 0;
        var v = params.shadow_v || 0;
        var b = params.shadow_blur || 0;
        var s = params.shadow_spread || 0;
        var t = typeof params.shadow_trans === 'number' ? params.shadow_trans : 100;
        var c = WCT.HexToRgb(params.shadow_color || '#888888', t / 100);
        node.style.boxShadow = h + 'px ' + v + 'px ' + b + 'px ' + s + 'px ' + c
    },
    NotSelectable: function(node) {
        var mo = arguments[1] || false;
        var a1 = mo ? 'text' : 'none';
        var a2 = mo ? 'off' : 'on';
        node.style.MozUserSelect = a1;
        node.style.WebkitTouchCallout = a1;
        node.style.WebkitUserSelect = a1;
        node.style.KhtmlUserSelect = a1;
        node.style.msUserSelect = a1;
        node.style.OUserSelect = a1;
        node.style.userSelect = a1;
        node.setAttribute('unselectable', a2);
        node.unselectable = !mo
    },
    GetWindowHeight: function() {
        var wnd = arguments[0] || window;
        return wnd.innerHeight ? wnd.innerHeight : (wnd.document.documentElement.clientHeight || wnd.document.body.offsetHeight)
    },
    GetWindowWidth: function() {
        var wnd = arguments[0] || window;
        return wnd.innerWidth ? wnd.innerWidth : (wnd.document.documentElement.clientWidth || wnd.document.body.offsetWidth)
    },
    GetScrollbarWidth: function() {
        if (this.SCROLLBAR_W == null) {
            var div = $$('div');
            if (arguments[0]) div.className = arguments[0];
            div.style.height = '100px';
            div.style.width = '100px';
            div.style.overflow = 'scroll';
            div.style.visibility = 'hidden';
            div.style.position = 'absolute';
            div.style.top = '0';
            div.style.left = '0';
            document.body.appendChild(div);
            this.SCROLLBAR_W = 100 - div.clientWidth;
            this.SCROLLBAR_H = 100 - div.clientHeight;
            document.body.removeChild(div)
        }
        return this.SCROLLBAR_W
    },
    GetScrollbarHeight: function() {
        if (this.SCROLLBAR_H == null) {
            var div = $$('div');
            if (arguments[0]) div.className = arguments[0];
            div.style.height = '100px';
            div.style.width = '100px';
            div.style.overflow = 'scroll';
            div.style.visibility = 'hidden';
            div.style.position = 'absolute';
            div.style.top = '0';
            div.style.left = '0';
            document.body.appendChild(div);
            this.SCROLLBAR_W = 100 - div.clientWidth;
            this.SCROLLBAR_H = 100 - div.clientHeight;
            document.body.removeChild(div)
        }
        return this.SCROLLBAR_H
    },
    HasVerticalScrollbar: function(elem) {
        return elem.offsetHeight < elem.scrollHeight
    },
    HasHorizontalScrollbar: function(elem) {
        return elem.offsetWidth < elem.scrollWidth
    },
    SwapNode: function(n1, n2) {
        if (n1.swapNode) {
            n1.swapNode(n2);
            return
        }
        var tmp = $$('div');
        n1.parentNode.replaceChild(tmp, n1);
        n2.parentNode.replaceChild(n1, n2);
        tmp.parentNode.replaceChild(n2, tmp)
    },
    IOSOpacitySwitch: function(el) {
        if (!PLATFORM.IOS || !el) return;
        var op = el.style.opacity;
        el.style.opacity = op == 1 ? '0.999' : '1';
        el.style.WebkitOverflowScrolling = 'touch'
    },
    AndroidOpacitySwitch: function(el) {
        if (!PLATFORM.ANDROID || !el) return;
        el.style.opacity = '0.999';
        var flush = el.offsetHeight;
        el.style.opacity = '1'
    },
    GetZoomLevel: function() {
        if (BROWSER.IE) {
            if (BROWSER.VERSION <= 7) {
                var b = document.body;
                var r = b.getBoundingClientRect();
                return Math.round((r.right - r.left) / b.clientWidth * 100)
            }
            return Math.round(screen.deviceXDPI / screen.logicalXDPI * 100)
        } else if (document.body.style.webkitTextSizeAdjust != null) {
            if (window.ontouchstart != null) {
                return Math.round(document.documentElement.clientWidth / window.innerWidth * 100)
            }
            var c = $$('div');
            c.style.position = 'absolute';
            c.style.visibility = 'hidden';
            c.style.overflow = 'hidden';
            c.style.width = 0;
            c.style.height = 0;
            document.body.appendChild(c);
            var d = $$('div');
            d.style.overflow = 'visible';
            d.style.padding = 0;
            d.style.width = '1em';
            d.style.height = 'auto';
            d.style.WebkitTextSizeAdjust = 'none';
            d.style.font = '100px/1em sans-serif';
            d.innerHTML = '1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>0';
            c.appendChild(d);
            var z = Math.round(1000 / d.clientHeight * 100);
            document.body.removeChild(c);
            return z
        } else if (BROWSER.FIREFOX) {
            return Math.ceil(window.devicePixelRatio * 100)
        } else if (BROWSER.CHROME) {
            var w1 = document.width;
            var w2 = document.documentElement.clientWidth;
            return Math.round((1 + (w1 - w2) / w2) * 100)
        }
        return 100
    },
    SupportsHtml5Video: function() {
        if (!!document.createElement('video').canPlayType) {
            var v = document.createElement('video');
            var ogg = v.canPlayType('video/ogg; codecs="theora, vorbis"');
            if (ogg) return ogg == 'probably' ? 1 : 2;
            var c = ['42E01E', '58A01E', '4D401E'];
            var h264 = null;
            for (var i = 0, l = c.length; i < l; i++) {
                h264 = v.canPlayType('video/mp4; codecs="avc1.' + c[i] + ', mp4a.40.2"');
                if (h264) return h264 == 'probably' ? 1 : 2
            }
        }
        return 0
    },
    GetLatestTextNode: function(e) {
        var cn = e.childNodes;
        for (var i = cn.length - 1; i >= 0; i--) {
            var cur = cn[i];
            if (cur.nodeType == this.TEXT_NODE) {
                return cur
            }
            var tn = this.GetLatestTextNode(cur);
            if (tn) return tn
        }
        return null
    },
    GetFirstTextNode: function(e) {
        for (var i = 0, cur = null, cn = e.childNodes; cur = cn[i]; i++) {
            if (cur.nodeType == this.TEXT_NODE) {
                return cur
            }
            var tn = this.GetLatestTextNode(cur);
            if (tn) return tn
        }
        return null
    },
    Empty: function(e) {
        while (e.firstChild) {
            e.removeChild(e.firstChild)
        }
    },
    TextContent: function(e) {
        if (e.nodeType == this.TEXT_NODE) {
            return e.textContent || e.nodeValue || ''
        } else if (e.textContent) {
            return e.textContent
        } else if (e.childNodes.length) {
            var res = '';
            var cn = e.childNodes;
            for (var i = 0, child = null; child = cn[i]; i++) {
                res += this.TextContent(child)
            }
            return res
        }
        return ''
    },
    GetNodeName: function(el) {
        return el && el.nodeName ? el.nodeName.toLowerCase() : ''
    },
    GetComputedStyle: function(e, win, prop_name) {
        var res = '';
        if (win.getComputedStyle) {
            if (e.nodeType == WCT.dom.TEXT_NODE) e = e.parentNode;
            res = win.getComputedStyle(e, null).getPropertyValue(prop_name)
        } else if (e.currentStyle) {
            res = e.currentStyle[prop_name]
        } else if (e.parentNode && e.parentNode.currentStyle) {
            res = e.parentNode.currentStyle[prop_name]
        }
        return res
    },
    IndexInParent: function(e) {
        var cn = e.parentNode.childNodes;
        for (var i = 0, cur = null; cur = cn[i]; i++) {
            if (cur == e) return i
        }
    },
    InsertAfter: function(new_child, elem) {
        if (elem.nextSibling) {
            elem.parentNode.insertBefore(new_child, elem.nextSibling)
        } else {
            elem.parentNode.appendChild(new_child)
        }
    },
    AddClass: function(el, cls) {
        for (var i = 1, c = null; i < arguments.length; i++) {
            c = arguments[i];
            if (!this.HasClass(el, c)) {
                el.className += ' ' + c
            }
        }
    },
    RemoveClass: function(el, cls) {
        var regex = new RegExp('\\b' + cls + '\\b', 'g');
        el.className = el.className.replace(regex, '').replace(/\s\s/g, ' ').replace(/\s$/g, '')
    },
    HasClass: function(el, cls) {
        var str_re = ['^', '$|^', ' | ', '$| ', ' '].join(cls);
        var re = new RegExp(str_re);
        return re.test(el.className)
    },
    ToggleClass: function(el, cls) {
        if (this.HasClass(el, cls)) {
            this.RemoveClass(cls, el)
        }
        this.AddClass(cls, el)
    },
    GetStyles: function(node) {
        var styles = node.getAttribute('style');
        var result = {};
        if (styles && typeof styles == 'object') {
            styles = styles.cssText || null
        }
        if (typeof styles == 'string') {
            styles = styles.split(';');
            for (var i = styles.length - 1; i >= 0; i--) {
                var parts = styles[i].split(':');
                var key = parts[0];
                var value = parts[1];
                if (typeof key == 'string' && typeof value == 'string') {
                    result[key.trim()] = value.trim()
                }
            }
        }
        return result
    },
    GetAttributes: function(node) {
        var attribs = node.attributes;
        var result = {};
        var has_style = false;
        for (var i = 0, attrib_ = null; attrib_ = attribs[i]; i++) {
            var value = attrib_.nodeValue;
            if (value != null && value != '') {
                if (this.GetNodeName(attrib_) == 'style') {
                    has_style = true
                }
                result[attrib_.nodeName] = value
            }
        }
        if (!has_style) {
            var style = node.getAttribute('style');
            !style || (style = style.cssText || null);
            if (style) {
                result['style'] = style
            }
        }
        return result
    },
    CreateFromHtml: function(t) {
        var d = $$('div');
        d.innerHTML = t;
        return d.firstChild
    },
    RemoveFromDom: function(e) {
        var p = e && e.parentNode;
        if (e && p) {
            p.removeChild(e);
            return null
        }
        return e
    }
};
WCT.Transform = {
    ConvertFontSizeToPx: function(font) {
        switch (font) {
            case 'xx-small':
            case '1':
                return '11px';
            case 'x-small':
            case '2':
                return '13px';
            case 'small':
            case '3':
                return '16px';
            case 'medium':
            case '4':
                return '19px';
            case 'large':
            case '5':
                return '24px';
            case 'x-large':
            case '6':
                return '32px';
            case 'xx-large':
            case '7':
                return '48px';
            default:
                return null
        }
    },
    ConvertFontSizeToPt: function(font) {
        switch (font) {
            case 'xx-small':
            case '1':
                return '8pt';
            case 'x-small':
            case '2':
                return '10pt';
            case 'small':
            case '3':
                return '12pt';
            case 'medium':
            case '4':
                return '14pt';
            case 'large':
            case '5':
                return '18pt';
            case 'x-large':
            case '6':
                return '24pt';
            case 'xx-large':
            case '7':
                return '36pt';
            default:
                return null
        }
    },
    ConvertPxToFontSize: function(size) {
        size = parseInt(size);
        if (size < 12) {
            return '1'
        } else if (size < 15) {
            return '2'
        } else if (size < 18) {
            return '3'
        } else if (size < 22) {
            return '4'
        } else if (size < 28) {
            return '5'
        } else if (size < 40) {
            return '6'
        } else if (size >= 40) {
            return '7'
        } else {
            return null
        }
    },
    IsValidSize: function(size) {
        return !isNaN(parseInt(size))
    },
    IsWebkitSize: function(size) {
        switch (size) {
            case 'xx-small':
            case 'x-small':
            case 'small':
            case 'medium':
            case 'large':
            case 'x-large':
            case 'xx-large':
                return true;
            default:
                return false
        }
    },
    ConvertPtToPx: function(size) {
        return Math.min(80, Math.max(6, Math.ceil(parseInt(size) * 1.3333333))) + 'px'
    }
};
WCT.fullscreen = {
    Supported: function(el) {
        return el.requestFullScreen || el.mozRequestFullScreen || el.webkitRequestFullScreen ? true : false
    },
    Active: function() {
        return document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen ? true : false
    },
    Enable: function(el) {
        if (el.requestFullScreen) {
            el.requestFullScreen()
        } else if (el.mozRequestFullScreen) {
            el.mozRequestFullScreen()
        } else if (el.webkitRequestFullScreen) {
            if (BROWSER.CHROME) {
                el.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT)
            } else {
                el.webkitRequestFullScreen()
            }
        }
    },
    Disable: function(el) {
        if (document.exitFullScreen) {
            document.exitFullScreen()
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen()
        } else if (document.webkitCancelFullScreen) {
            document.webkitCancelFullScreen()
        }
    }
};
WCT.Ease = {
    None: function(t) {
        return t
    },
    SineInOut: function(t) {
        return -0.5 * (Math.cos(Math.PI * t) - 1)
    },
    SineIn: function(t) {
        return -Math.cos(t * Math.PI / 2) + 1
    },
    SineOut: function(t) {
        return Math.sin(t * Math.PI / 2)
    },
    QuadInOut: function(t) {
        if ((t *= 2) < 1) {
            return 0.5 * t * t
        } else {
            return -0.5 * (--t * (t - 2) - 1)
        }
    },
    QuadIn: function(t) {
        return t * t
    },
    QuadOut: function(t) {
        return -t * (t - 2)
    },
    CubeIn: function(t) {
        return t * t * t
    },
    CubeOut: function(t) {
        return (t = t - 1) * t * t + 1
    },
    CubeInOut: function(t) {
        if ((t *= 2) < 1) {
            return t * t * t / 2
        } else {
            return ((t -= 2) * t * t + 2) / 2
        }
    },
    Bounce: function(t) {
        var a = 0;
        var b = 1;
        do {
            if (t >= (7 - 4 * a) / 11) {
                return -Math.pow((11 - 6 * a - 11 * t) / 4, 2) + Math.pow(b, 2)
            }
            a += b;
            b /= 2
        } while (true)
    }
};
WCT.POI = (function() {
    var map_ = {};
    return {
        Focus: {
            Simple: function(poi, canvas) {
                var x = null;
                if (poi.x > canvas.w + canvas.x) {
                    x = poi.x + poi.w - canvas.w + WCT.dom.GetScrollbarWidth()
                } else if (poi.x < canvas.x) {
                    x = poi.x - poi.w
                }
                var y = null;
                if (poi.y > canvas.h + canvas.y) {
                    y = poi.y + poi.h - canvas.h + WCT.dom.GetScrollbarHeight()
                } else if (poi.y < canvas.y) {
                    y = poi.y - poi.h
                }
                return {
                    x: x,
                    y: y
                }
            },
            Centered: function(poi, canvas) {
                return {
                    x: poi.x - (canvas.w >> 1),
                    y: poi.y - (canvas.h >> 1)
                }
            }
        },
        Animate: function(dom, start, end, type, time) {
            var int = arguments[5] || 50;
            var cb = arguments[6] || function() {};
            var scope = arguments[7];
            var by_css = arguments[8] || false;
            var dx = end.x - start.x;
            var dy = end.y - start.y;
            if (!dx && !dy) {
                cb.call(scope);
                return
            }
            if (PLATFORM.WINCE) {
                if (by_css) {
                    dom.style.left = end.x + 'px';
                    dom.style.top = end.y + 'px'
                } else {
                    dom.scrollLeft = end.x;
                    dom.scrollTop = end.y
                }
                cb.call(scope);
                return
            }
            var uid = WCT.uid.Generate();
            map_[uid] = {
                uid: uid,
                dom: dom,
                start_x: start.x,
                start_y: start.y,
                end_x: end.x,
                end_y: end.y,
                delta_x: dx / time,
                delta_y: dy / time,
                type: type,
                time: time,
                interval: int,
                callback: cb,
                scope: scope,
                by_css: by_css,
                cur_time: 0
            };
            WCT.SetTimeout(WCT.POI.animate_, int, WCT.POI, [uid]);
            return uid
        },
        StopAnimation: function(uid) {
            delete map_[uid]
        },
        animate_: function(uid) {
            var d = map_[uid];
            if (!d) return;
            if ((d.cur_time += d.interval) >= d.time || arguments[1]) {
                delete map_[uid];
                if (d.by_css) {
                    d.dom.style.left = d.end_x + 'px';
                    d.dom.style.top = d.end_y + 'px'
                } else {
                    d.dom.scrollLeft = d.end_x;
                    d.dom.scrollTop = d.end_y
                }
                d.callback.call(d.scope)
            } else {
                var t = WCT.Ease[d.type](d.cur_time / d.time) * d.time;
                var dx = Math.round(d.delta_x * t);
                var dy = Math.round(d.delta_y * t);
                var nx = d.start_x + dx;
                var ny = d.start_y + dy;
                if (isNaN(nx) || isNaN(ny)) {
                    WCT.POI.animate_.call(WCT.POI, uid, true)
                } else {
                    if (d.by_css) {
                        d.dom.style.left = nx + 'px';
                        d.dom.style.top = ny + 'px'
                    } else {
                        d.dom.scrollLeft = nx;
                        d.dom.scrollTop = ny
                    }
                    WCT.SetTimeout(WCT.POI.animate_, d.interval, WCT.POI, [uid])
                }
            }
        }
    }
})();
WCT.iframe = {
    IFRAME_ID: 'WCT_IFR',
    STORE: {},
    Cleanup: function() {
        if (arguments[0]) {
            var c = this.STORE[arguments[0]];
            if (c) {
                c.d = null;
                c.f = null;
                c.s = null;
                c.a = null;
                delete this.STORE[arguments[0]]
            }
        } else {
            for (var id in this.STORE) {
                var c = this.STORE[id];
                c.d = null;
                c.f = null;
                c.s = null;
                c.a = null;
                delete this.STORE[id]
            }
        }
    },
    Create: function() {
        var f = null;
        var t = !!arguments[1];
        var n = arguments[2] || '';
        if (BROWSER.IE && (t || n)) {
            var h1 = t ? 'allowTransparency="true"' : '';
            var h2 = n ? [' id="', '" name="', '"'].join(n) : '';
            if (BROWSER.IE7) {
                f = WCT.dom.CreateFromHtml('<iframe ' + h1 + h2 + '></iframe>')
            } else if (BROWSER.VERSION < 11 || PLATFORM.WINCE) {
                try {
                    f = $$('<iframe ' + h1 + h2 + '>')
                } catch (e) {
                    f = $$('iframe');
                    if (t) {
                        f.setAttribute('allowTransparency', 'true');
                        f.style.filter = 'Alpha(style=0, opacity=0)'
                    }
                    if (n) {
                        f.id = n;
                        f.name = n
                    }
                }
            }
        }
        if (!f) {
            f = $$('iframe');
            if (t) f.setAttribute('allowTransparency', 'true');
            if (n) {
                f.id = n;
                f.name = n
            }
        }
        f.frameBorder = '0';
        f.style.borderWidth = '0px';
        f.style.width = '100%';
        f.style.height = '100%';
        f.style.overflow = 'hidden';
        f.style.position = 'absolute';
        f.style.backgroundColor = 'transparent';
        if (arguments[0]) f.src = arguments[0];
        return f
    },
    Load: function(iframe, callback, scope) {
        var uid = WCT.uid.Generate(12, this.IFRAME_ID);
        this.STORE[uid] = {
            d: iframe,
            f: callback,
            s: scope,
            a: arguments[4] || []
        };
        iframe.setAttribute(this.IFRAME_ID, uid);
        var dom = arguments[3] || document.body;
        if (BROWSER.IE && BROWSER.VERSION < 11) {
            dom.appendChild(iframe);
            iframe.onreadystatechange = this.iframe_ready_
        } else {
            iframe.onload = this.iframe_ready_;
            dom.appendChild(iframe)
        }
    },
    Eval: function(js, wd) {
        if (!wd.eval && wd.execScript) {
            wd.execScript("null")
        }
        if (wd.eval) {
            wd.eval(js)
        }
    },
    iframe_ready_: function() {
        var uid = this.getAttribute(WCT.iframe.IFRAME_ID);
        var obj = WCT.iframe.STORE[uid];
        if (BROWSER.IE && BROWSER.VERSION < 11) {
            var rs = null;
            try {
                rs = this.readyState;
                if (rs == 'complete') {
                    this.onreadystatechange = null;
                    this.removeAttribute(WCT.iframe.IFRAME_ID)
                } else {
                    return
                }
            } catch (e) {
                try {
                    this.onreadystatechange = null;
                    this.removeAttribute(WCT.iframe.IFRAME_ID)
                } catch (e) {}
            }
        } else {
            try {
                this.onload = null;
                this.removeAttribute(WCT.iframe.IFRAME_ID)
            } catch (e) {}
        }
        if (obj && obj.f) obj.f.apply(obj.s, obj.a);
        WCT.iframe.Cleanup[uid]
    }
};
(function() {
    var stored_hash_ = '';
    var interval_id_ = null;
    var iframe_ = null;
    var callback_ = null;
    var scope_ = null;

    function cb_() {
        var hash = WCT.bookmark.Get();
        if (iframe_) {
            var ihash = WCT.bookmark.Get(true);
            if (hash != stored_hash_) {
                stored_hash_ = hash;
                ihash_(hash);
                callback_.call(scope_, hash)
            } else if (ihash != stored_hash_) {
                stored_hash_ = ihash;
                location.hash = ihash;
                callback_.call(scope_, ihash)
            }
        } else if (hash != stored_hash_) {
            stored_hash_ = hash;
            callback_.call(scope_, stored_hash_)
        }
    };

    function ihash_(hash) {
        var idoc = iframe_ ? iframe_.contentWindow.document : null;
        var ihash = WCT.bookmark.Get(true);
        if (idoc && ihash != hash) {
            idoc.open();
            idoc.close();
            idoc.location.hash = hash
        }
    };
    WCT.bookmark = {
        Observe: function(cb, scope) {
            callback_ = cb;
            scope_ = scope;
            stored_hash_ = this.Get();
            if ('onhashchange' in window || document.documentMode == 8) {
                WCT.event.Observe('hashchange', cb_, window, true)
            } else {
                iframe_ = $$('iframe');
                iframe_.src = 'javascript:false;';
                iframe_.style.display = 'none';
                var bdy = document.body;
                bdy.parentNode.insertBefore(iframe_, bdy);
                ihash_(stored_hash_);
                interval_id_ = setInterval(cb_, 100)
            }
        },
        StopObserving: function() {
            WCT.event.StopObserving('hashchange', cb_);
            if (interval_id_) {
                clearInterval(interval_id_);
                interval_id_ = null
            }
            callback_ = null;
            scope_ = null
        },
        Set: function(hash) {
            hash = hash.toString();
            if (hash.charAt(0) == '#') hash = hash.substr(1);
            ihash_(hash);
            var curHash = location.hash.substr(1);
            var ca = curHash.split('&');
            var res = [];
            for (var i = 0, l = ca.length; i < l; i++) {
                var cur = ca[i].split('=');
                if (cur.length > 1 && cur[0] !== 'hash') res.push(ca[i])
            }
            if (res.length) hash += '&' + res.join('&');
            location.hash = hash;
            if (!arguments[1]) stored_hash_ = hash
        },
        Get: function() {
            var h = arguments[0] ? (iframe_ ? iframe_.contentWindow.location.hash : '') : location.hash;
            h = h.substr(1);
            var ha = h.split('&');
            for (var i = 0, l = ha.length; i < l; i++) {
                var cur = ha[i].split('=');
                if (cur.length === 1 || cur[0] === 'hash') {
                    return cur[1] || cur[0]
                }
            }
            return h
        }
    }
})();
WCT.store = {
    KEYS: {
        lib_favorites: 'lib_f',
        lib_recent: 'lib_r',
        lib_search: 'lib_s',
        lib_settings: 'lib_set',
        lib_context_info: 'lib_ctx',
        panel_ori: {
            lesson: 'pori_l',
            book: 'pori_b',
            slide: 'pori_s',
            library: 'pori_lib',
            file: 'pori_f',
            cdoc: 'pori_c'
        },
        backend_cookie: 'T2T',
        scorm_api: 'SCAPI'
    },
    Get: function(key) {
        return window.localStorage && localStorage.getItem ? localStorage.getItem(key) : WCT.cookie.Get(key)
    },
    Set: function(key, value) {
        if (window.localStorage && localStorage.setItem) {
            localStorage.setItem(key, value)
        } else {
            WCT.cookie.Set(key, value)
        }
    },
    Remove: function(key) {
        WCT.cookie.Remove(key);
        if (window.localStorage && localStorage.removeItem) {
            localStorage.removeItem(key)
        }
    }
};
WCT.TREE_ICONS = {
    w: 16,
    h: 16,
    id: 'tree_icons.png',
    audio: {
        x: 0,
        y: -288
    },
    doc: {
        x: 0,
        y: -240
    },
    doc_doc: {
        x: 0,
        y: -160
    },
    doc_docx: {
        x: 0,
        y: -160
    },
    doc_html: {
        x: 0,
        y: -192
    },
    doc_pdf: {
        x: 0,
        y: -176
    },
    doc_ppt: {
        x: 0,
        y: -208
    },
    doc_pptx: {
        x: 0,
        y: -208
    },
    doc_unknown: {
        x: 0,
        y: -240
    },
    doc_word: {
        x: 0,
        y: -160
    },
    doc_xlf: {
        x: 0,
        y: -256
    },
    doc_xls: {
        x: 0,
        y: -224
    },
    doc_xlsx: {
        x: 0,
        y: -224
    },
    docu_doc: {
        x: 0,
        y: -160
    },
    docu_doc_bpp: {
        x: -96,
        y: -160
    },
    docu_doc_business_script: {
        x: -80,
        y: -160
    },
    docu_doc_fda: {
        x: -112,
        y: -160
    },
    docu_doc_hands_on: {
        x: -144,
        y: -160
    },
    docu_doc_hpqc: {
        x: -128,
        y: -160
    },
    docu_doc_jobhelp: {
        x: -16,
        y: -160
    },
    docu_doc_standard: {
        x: 0,
        y: -160
    },
    docu_doc_testsheet: {
        x: -48,
        y: -160
    },
    docu_doc_training: {
        x: -32,
        y: -160
    },
    docu_doc_work: {
        x: -64,
        y: -160
    },
    docu_html_bpp: {
        x: -96,
        y: -192
    },
    docu_html_business_script: {
        x: -80,
        y: -192
    },
    docu_html_fda: {
        x: -112,
        y: -192
    },
    docu_html_hands_on: {
        x: -144,
        y: -192
    },
    docu_html_html: {
        x: 0,
        y: -192
    },
    docu_html_jobhelp: {
        x: -16,
        y: -192
    },
    docu_html_standard: {
        x: 0,
        y: -192
    },
    docu_html_testsheet: {
        x: -48,
        y: -192
    },
    docu_html_training: {
        x: -32,
        y: -192
    },
    docu_html_work: {
        x: -64,
        y: -192
    },
    docu_pdf_bpp: {
        x: -96,
        y: -176
    },
    docu_pdf_business_script: {
        x: -80,
        y: -176
    },
    docu_pdf_fda: {
        x: -112,
        y: -176
    },
    docu_pdf_hands_on: {
        x: -144,
        y: -176
    },
    docu_pdf_jobhelp: {
        x: -16,
        y: -176
    },
    docu_pdf_standard: {
        x: 0,
        y: -176
    },
    docu_pdf_testsheet: {
        x: -48,
        y: -176
    },
    docu_pdf_training: {
        x: -32,
        y: -176
    },
    docu_pdf_work: {
        x: -64,
        y: -176
    },
    docu_ppt_ppt: {
        x: 0,
        y: -208
    },
    img: {
        x: 0,
        y: -272
    },
    ref_book: {
        x: -32,
        y: -32
    },
    ref_group: {
        x: -16,
        y: -32
    },
    ref_orphans: {
        x: 0,
        y: -336
    },
    ref_orphans_my: {
        x: -16,
        y: -336
    },
    ref_project: {
        x: -48,
        y: -64
    },
    ref_project_context_assistant: {
        x: -16,
        y: -64
    },
    ref_project_context_help: {
        x: -16,
        y: -64
    },
    ref_project_process_support: {
        x: -32,
        y: -64
    },
    ref_project_standard: {
        x: 0,
        y: -64
    },
    ref_project_undefined: {
        x: -48,
        y: -64
    },
    ref_project_quiz: {
        x: -64,
        y: -64
    },
    ref_cdoc: {
        x: 0,
        y: -112
    },
    ref_cdoc_general: {
        x: 0,
        y: -112
    },
    ref_cdoc_concept: {
        x: -16,
        y: -112
    },
    ref_cdoc_task: {
        x: -32,
        y: -112
    },
    ref_cdoc_reference: {
        x: -48,
        y: -112
    },
    ref_cdoc_problem: {
        x: 0,
        y: -128
    },
    ref_cdoc_todo: {
        x: -16,
        y: -128
    },
    ref_cdoc_defect: {
        x: -32,
        y: -128
    },
    ref_cdoc_requirement: {
        x: -48,
        y: -128
    },
    ref_cdoc_subsystem: {
        x: 0,
        y: -144
    },
    ref_cdoc_component: {
        x: -16,
        y: -144
    },
    ref_cdoc_function: {
        x: -32,
        y: -144
    },
    ref_cdoc_glossary_entry: {
        x: -64,
        y: -128
    },
    ref_slide: {
        x: -64,
        y: -96
    },
    ref_slide_template: {
        x: -48,
        y: -32
    },
    ref_trash: {
        x: 0,
        y: -352
    },
    res_adaptable: {
        x: 0,
        y: -320
    },
    res_book_style: {
        x: -16,
        y: -368
    },
    res_bubble: {
        x: -64,
        y: -368
    },
    res_doc_settings: {
        x: -32,
        y: -320
    },
    res_glossary: {
        x: -80,
        y: -368
    },
    res_help: {
        x: 0,
        y: -384
    },
    res_library: {
        x: -16,
        y: -368
    },
    res_macroset: {
        x: -96,
        y: -368
    },
    res_mouse: {
        x: -48,
        y: -368
    },
    res_panel: {
        x: -16,
        y: -368
    },
    res_popup: {
        x: -16,
        y: -368
    },
    res_quiz_style: {
        x: -16,
        y: -368
    },
    res_recognize: {
        x: -128,
        y: -368
    },
    res_record_glossary: {
        x: -80,
        y: -368
    },
    res_resource: {
        x: -16,
        y: -320
    },
    res_root: {
        x: 0,
        y: -368
    },
    res_script: {
        x: -112,
        y: -368
    },
    res_style: {
        x: -32,
        y: -368
    },
    res_task_style: {
        x: -16,
        y: -368
    },
    res_trainer: {
        x: -16,
        y: -368
    },
    res_wa_filters: {
        x: -16,
        y: -384
    },
    tour_context_assistant: {
        x: -96,
        y: -96
    },
    tour_context_help: {
        x: -96,
        y: -96
    },
    tour_demo: {
        x: 0,
        y: -96
    },
    tour_pres: {
        x: -144,
        y: -96
    },
    tour_guided: {
        x: -160,
        y: -96
    },
    tour_dnt: {
        x: -128,
        y: -96
    },
    tour_epo: {
        x: -112,
        y: -96
    },
    tour_praxis: {
        x: -48,
        y: -96
    },
    tour_process_support: {
        x: -80,
        y: -96
    },
    tour_test: {
        x: -32,
        y: -96
    },
    tour_uebung: {
        x: -16,
        y: -96
    },
    unknown: {
        x: 0,
        y: -240
    },
    video: {
        x: 0,
        y: -304
    },
    workarea_root: {
        x: 0,
        y: -32
    }
};
WCT.QrCode = function() {
    this.mods_ = null;
    this.cache_ = null;
    this.bit_ = null;
    this.byte_ = null;
    this.math_ = null;
    this.mod_count_ = 0;
    this.type_id_ = 1
};
WCT.QrCode.LEN_INIT_MAP = {
    1: 10,
    2: 20,
    3: 40,
    4: 60,
    5: 80,
    6: 100,
    7: 120,
    8: 150,
    9: 180,
    10: 210,
    11: 250,
    12: 280,
    13: 330,
    14: 360,
    15: 410,
    16: 450,
    17: 500,
    18: 560,
    19: 620,
    20: 660,
    21: 710,
    22: 770,
    23: 850,
    24: 910,
    25: 990,
    26: 1050
};
WCT.QrCode.Cleanup = function() {
    WCT.QrCode.math.EXP_TABLE = null;
    WCT.QrCode.math.LOG_TABLE = null
};
WCT.QrCode.GenerateHtml = function(txt) {
    var q = new WCT.QrCode();
    var r = q.GenerateHtml(txt, arguments[1], arguments[2], arguments[3]) || '';
    q.Destructor();
    return r
};
WCT.QrCode.prototype = (function() {
    var PAD0 = 0xEC;
    var PAD1 = 0x11;
    var G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);
    var G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);
    var G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);
    var RS_BLOCK_TABLE = [
        [1, 26, 16],
        [1, 44, 28],
        [1, 70, 44],
        [2, 50, 32],
        [2, 67, 43],
        [4, 43, 27],
        [4, 49, 31],
        [2, 60, 38, 2, 61, 39],
        [3, 58, 36, 2, 59, 37],
        [4, 69, 43, 1, 70, 44],
        [1, 80, 50, 4, 81, 51],
        [6, 58, 36, 2, 59, 37],
        [8, 59, 37, 1, 60, 38],
        [4, 64, 40, 5, 65, 41],
        [5, 65, 41, 5, 66, 42],
        [7, 73, 45, 3, 74, 46],
        [10, 74, 46, 1, 75, 47],
        [9, 69, 43, 4, 70, 44],
        [3, 70, 44, 11, 71, 45],
        [3, 67, 41, 13, 68, 42],
        [17, 68, 42],
        [17, 74, 46],
        [4, 75, 47, 14, 76, 48],
        [6, 73, 45, 14, 74, 46],
        [8, 75, 47, 13, 76, 48],
        [19, 74, 46, 4, 75, 47],
        [22, 73, 45, 3, 74, 46],
        [3, 73, 45, 23, 74, 46],
        [21, 73, 45, 7, 74, 46],
        [19, 75, 47, 10, 76, 48],
        [2, 74, 46, 29, 75, 47],
        [10, 74, 46, 23, 75, 47],
        [14, 74, 46, 21, 75, 47],
        [14, 74, 46, 23, 75, 47],
        [12, 75, 47, 26, 76, 48],
        [6, 75, 47, 34, 76, 48],
        [29, 74, 46, 14, 75, 47],
        [13, 74, 46, 32, 75, 47],
        [40, 75, 47, 7, 76, 48],
        [18, 75, 47, 31, 76, 48]
    ];
    var PATTERN_POSITION_TABLE = [
        [],
        [6, 18],
        [6, 22],
        [6, 26],
        [6, 30],
        [6, 34],
        [6, 22, 38],
        [6, 24, 42],
        [6, 26, 46],
        [6, 28, 50],
        [6, 30, 54],
        [6, 32, 58],
        [6, 34, 62],
        [6, 26, 46, 66],
        [6, 26, 48, 70],
        [6, 26, 50, 74],
        [6, 30, 54, 78],
        [6, 30, 56, 82],
        [6, 30, 58, 86],
        [6, 34, 62, 90],
        [6, 28, 50, 72, 94],
        [6, 26, 50, 74, 98],
        [6, 30, 54, 78, 102],
        [6, 28, 54, 80, 106],
        [6, 32, 58, 84, 110],
        [6, 30, 58, 86, 114],
        [6, 34, 62, 90, 118],
        [6, 26, 50, 74, 98, 122],
        [6, 30, 54, 78, 102, 126],
        [6, 26, 52, 78, 104, 130],
        [6, 30, 56, 82, 108, 134],
        [6, 34, 60, 86, 112, 138],
        [6, 30, 58, 86, 114, 142],
        [6, 34, 62, 90, 118, 146],
        [6, 30, 54, 78, 102, 126, 150],
        [6, 24, 50, 76, 102, 128, 154],
        [6, 28, 54, 80, 106, 132, 158],
        [6, 32, 58, 84, 110, 136, 162],
        [6, 26, 54, 82, 110, 138, 166],
        [6, 30, 58, 86, 114, 142, 170]
    ];

    function generate_(is_test, pat) {
        var mc = this.type_id_ * 4 + 17;
        this.mod_count_ = mc;
        this.mods_ = build_pic_(mc);
        add_pos_pattern_.call(this, 0, 0);
        add_pos_pattern_.call(this, mc - 7, 0);
        add_pos_pattern_.call(this, 0, mc - 7);
        add_adjust_pattern_.call(this);
        add_timing_pattern_.call(this);
        set_type_.call(this, is_test, pat);
        if (this.type_id_ > 6) build_type_test_.call(this, is_test);
        if (this.cache_ == null) this.cache_ = create_data_.call(this);
        write_data_.call(this, this.cache_, pat)
    };

    function get_best_pattern_() {
        var min_lp = 0;
        var pattern = 0;
        for (var i = 0; i < 8; i++) {
            generate_.call(this, true, i);
            var lp = get_lost_point_.call(this);
            if (!i || min_lp > lp) {
                min_lp = lp;
                pattern = i
            }
        }
        return pattern
    };

    function get_lost_point_() {
        var mc = this.mod_count_;
        var md = this.mods_;
        var dc = 0;
        var res = 0;
        for (var row = 0; row < mc; row++) {
            for (var col = 0; col < mc; col++) {
                var sc = 0;
                var is_black = md[row][col];
                if (is_black) dc++;
                for (var r = -1; r <= 1; r++) {
                    if (row + r < 0 || mc <= row + r) continue;
                    for (var c = -1; c <= 1; c++) {
                        if (!r && !c || col + c < 0 || mc <= col + c) continue;
                        if (is_black == md[row + r][col + c]) sc++
                    }
                }
                if (sc > 5) res += sc - 2
            }
        };
        for (var row = 0; row < mc - 1; row++) {
            for (var col = 0; col < mc - 1; col++) {
                var count = 0;
                if (md[row][col]) count++;
                if (md[row + 1][col]) count++;
                if (md[row][col + 1]) count++;
                if (md[row + 1][col + 1]) count++;
                if (!count || count == 4) res += 3
            }
        }
        for (var row = 0; row < mc; row++) {
            for (var col = 0; col < mc - 6; col++) {
                if (md[row][col] && !md[row][col + 1] && md[row][col + 2] && md[row][col + 3] && md[row][col + 4] && !md[row][col + 5] && md[row][col + 6]) {
                    res += 40
                }
            }
        }
        for (var col = 0; col < mc; col++) {
            for (var row = 0; row < mc - 6; row++) {
                if (md[row][col] && !md[row + 1][col] && md[row + 2][col] && md[row + 3][col] && md[row + 4][col] && !md[row + 5][col] && md[row + 6][col]) {
                    res += 40
                }
            }
        }
        return res + Math.abs(100 * dc / mc / mc - 50) / 5 * 10
    };

    function build_pic_(size) {
        var a = new Array(size);
        var s = size - 1;
        for (var i = s; i >= 0; i--) {
            a[i] = new Array(size);
            for (var j = s; j >= 0; j--) {
                a[i][j] = null
            }
        }
        return a
    };

    function add_pos_pattern_(row, col) {
        var mc = this.mod_count_;
        var mods = this.mods_;
        for (var r = -1; r <= 7; r++) {
            if (row + r <= -1 || mc <= row + r) continue;
            for (var c = -1; c <= 7; c++) {
                if (col + c <= -1 || mc <= col + c) continue;
                mods[row + r][col + c] = 0 <= r && r <= 6 && c % 6 == 0 || 0 <= c && c <= 6 && r % 6 == 0 || 2 <= r && r <= 4 && 2 <= c && c <= 4
            }
        }
    };

    function add_adjust_pattern_() {
        var pos = PATTERN_POSITION_TABLE[this.type_id_ - 1];
        var mods = this.mods_;
        var len = pos.length;
        for (var i = 0; i < len; i++) {
            for (var j = 0; j < len; j++) {
                var row = pos[i];
                var col = pos[j];
                if (mods[row][col] != null) continue;
                for (var r = -2; r <= 2; r++) {
                    var r2 = Math.abs(r) == 2;
                    for (var c = -2; c <= 2; c++) {
                        mods[row + r][col + c] = !r && !c || r2 || Math.abs(c) == 2
                    }
                }
            }
        }
    };

    function add_timing_pattern_() {
        var mods = this.mods_;
        var lim = this.mod_count_ - 8;
        for (var r = 8; r < lim; r++) {
            if (mods[r][6] != null) continue;
            mods[r][6] = r % 2 == 0
        }
        for (var c = 8; c < lim; c++) {
            if (mods[6][c] != null) continue;
            mods[6][c] = c % 2 == 0
        }
    };

    function set_type_(is_test, pat) {
        var bits = type_info_(pat);
        var mc = this.mod_count_;
        var mods = this.mods_;
        for (var i = 0; i < 15; i++) {
            var mod = !is_test && ((bits >> i) & 1) == 1;
            if (i < 6) {
                mods[i][8] = mod
            } else if (i < 8) {
                mods[i + 1][8] = mod
            } else {
                mods[mc - 15 + i][8] = mod
            }
        }
        for (var i = 0; i < 15; i++) {
            var mod = !is_test && ((bits >> i) & 1) == 1;
            if (i < 8) {
                mods[8][mc - i - 1] = mod
            } else if (i == 8) {
                mods[8][15 - i] = mod
            } else {
                mods[8][15 - i - 1] = mod
            }
        }
        mods[mc - 8][8] = !is_test
    };

    function type_info_(data) {
        var d = data << 10;
        var dg15 = get_bch_digit_(G15);
        while (get_bch_digit_(d) - dg15 >= 0) {
            d ^= G15 << (get_bch_digit_(d) - dg15)
        }
        return ((data << 10) | d) ^ G15_MASK
    };

    function get_bch_digit_(data) {
        var digit = 0;
        while (data != 0) {
            digit++;
            data >>>= 1
        }
        return digit
    };

    function build_type_test_(is_test) {
        var bits = bch_type_number_(this.type_id_);
        var mc83 = this.mod_count_ - 8 - 3;
        var mods = this.mods_;
        for (var i = 0; i < 18; i++) {
            mods[Math.floor(i / 3)][i % 3 + mc83] = !is_test && ((bits >> i) & 1) == 1;
            mods[i % 3 + mc83][Math.floor(i / 3)] = !is_test && ((bits >> i) & 1) == 1
        }
    };

    function bch_type_number_(data) {
        var d = data << 12;
        var dg18 = get_bch_digit_(G18);
        while (get_bch_digit_(d) - dg18 >= 0) {
            d ^= G18 << (get_bch_digit_(d) - dg18)
        }
        return (data << 12) | d
    };

    function create_data_() {
        var d = this.byte_;
        var b = new WCT.QrCode.bit();
        b.Put(4, 4);
        b.Put(d.GetLength(), get_length_in_bits_.call(this));
        d.Write(b);
        var cnt = 0;
        var blocks = get_rs_blocks_.call(this);
        for (var i = 0, len = blocks.length; i < len; i++) {
            cnt += blocks[i].data_count
        }
        var bl = b.GetLength();
        if (bl > cnt * 8) {
            throw new Error('code length overflow. (' + bl + '>' + cnt * 8 + ')')
        }
        if (bl + 4 <= cnt * 8) b.Put(0, 4);
        while (b.GetLength() % 8 != 0) b.PutBit(false);
        while (true) {
            if (b.GetLength() >= cnt * 8) break;
            b.Put(PAD0, 8);
            if (b.GetLength() >= cnt * 8) break;
            b.Put(PAD1, 8)
        }
        if (this.bit_) this.bit_.Destructor();
        this.bit_ = b;
        return create_bytes_.call(this, blocks)
    };

    function get_length_in_bits_() {
        var t = this.type_id_;
        if (1 <= t && t < 10) {
            return 8
        } else if (t < 41) {
            return 16
        } else {
            throw new Error('type:' + t)
        }
    };

    function get_rs_blocks_() {
        var b = RS_BLOCK_TABLE[this.type_id_ - 1];
        var l = b.length / 3;
        var a = [];
        for (var i = 0; i < l; i++) {
            for (var j = 0, cnt = b[i * 3]; j < cnt; j++) {
                a.push({
                    total_count: b[i * 3 + 1],
                    data_count: b[i * 3 + 2]
                })
            }
        }
        return a
    };

    function create_bytes_(blocks) {
        var offset = 0;
        var blen = blocks.length;
        var max_dc_count = new Array(blen);
        var max_ec_count = new Array(blen);
        var dcdata = new Array(blen);
        var ecdata = new Array(blen);
        var buffer = this.bit_.GetBuffer();
        var math = this.math_;
        var cnt = 0;
        for (var i = 0; i < blen; i++) {
            var dc_count = blocks[i].data_count;
            var ec_count = blocks[i].total_count - dc_count;
            cnt += blocks[i].total_count;
            max_dc_count[i] = dc_count;
            max_ec_count[i] = ec_count;
            dcdata[i] = new Array(dc_count);
            for (var j = 0; j < dc_count; j++) {
                dcdata[i][j] = 0xff & buffer[j + offset]
            }
            offset += dc_count;
            var rs_poly = get_error_correct_polynomial_.call(this, ec_count);
            var rpl = rs_poly.GetLength() - 1;
            var raw_poly = new WCT.QrCode.polynomial(dcdata[i], rpl);
            var mod_poly = raw_poly.Mod(rs_poly, math);
            var mpl = mod_poly.GetLength();
            ecdata[i] = new Array(rpl);
            for (var j = 0; j < ecdata[i].length; j++) {
                var midx = j + mpl - ecdata[i].length;
                ecdata[i][j] = midx >= 0 ? mod_poly.Get(midx) : 0
            }
            rs_poly.Destructor();
            raw_poly.Destructor();
            mod_poly.Destructor()
        }
        max_dc_count.push(0);
        max_ec_count.push(0);
        max_dc_count = Math.max.apply(null, max_dc_count);
        max_ec_count = Math.max.apply(null, max_ec_count);
        var data = new Array(cnt);
        var idx = 0;
        for (var i = 0; i < max_dc_count; i++) {
            for (var r = 0; r < blen; r++) {
                if (i < dcdata[r].length) data[idx++] = dcdata[r][i]
            }
        }
        for (var i = 0; i < max_ec_count; i++) {
            for (var r = 0; r < blen; r++) {
                if (i < ecdata[r].length) data[idx++] = ecdata[r][i]
            }
        }
        return data
    };

    function get_error_correct_polynomial_(len) {
        var a = new WCT.QrCode.polynomial([1], 0);
        var m = this.math_;
        for (var i = 0; i < len; i++) {
            var h1 = new WCT.QrCode.polynomial([1, m.GetExp(i)], 0);
            var h2 = a.Multiply(h1, m);
            h1.Destructor();
            a.Destructor();
            a = h2
        }
        return a
    };

    function write_data_(data, pat) {
        var inc = -1;
        var mc = this.mod_count_;
        var md = this.mods_;
        var row = mc - 1;
        var bit_index = 7;
        var byte_index = 0;
        for (var col = mc - 1; col > 0; col -= 2) {
            if (col == 6) col--;
            while (true) {
                for (var c = 0; c < 2; c++) {
                    if (md[row][col - c] == null) {
                        var blk = false;
                        if (byte_index < data.length) {
                            blk = ((data[byte_index] >>> bit_index) & 1) == 1
                        }
                        var mask = null;
                        var j = col - c;
                        switch (pat) {
                            case 0:
                                mask = (row + j) % 2 == 0;
                                break;
                            case 1:
                                mask = row % 2 == 0;
                                break;
                            case 2:
                                mask = j % 3 == 0;
                                break;
                            case 3:
                                mask = (row + j) % 3 == 0;
                                break;
                            case 4:
                                mask = (Math.floor(row / 2) + Math.floor(j / 3)) % 2 == 0;
                                break;
                            case 5:
                                mask = (row * j) % 2 + (row * j) % 3 == 0;
                                break;
                            case 6:
                                mask = ((row * j) % 2 + (row * j) % 3) % 2 == 0;
                                break;
                            case 7:
                                mask = ((row * j) % 3 + (row + j) % 2) % 2 == 0;
                                break;
                            default:
                                throw new Error('Bad mask pattern: ' + pat)
                        }
                        if (mask) blk = !blk;
                        md[row][col - c] = blk;
                        bit_index--;
                        if (bit_index == -1) {
                            byte_index++;
                            bit_index = 7
                        }
                    }
                }
                row += inc;
                if (row < 0 || mc <= row) {
                    row -= inc;
                    inc = -inc;
                    break
                }
            }
        }
    };

    function get_html_() {
        var size = arguments[0] || 0;
        var css = arguments[1] || {};
        var colors = arguments[2] || ['#000000', '#FFFFFF'];
        var style = [];
        for (var k in css) {
            style.push(k + ':' + css[k] + ';')
        }
        var h = ['<table style="', style, ' border-width: 0px; border-style: none;', ' border-collapse: collapse;', ' padding: 0px;direction:ltr', '">', '<tbody>'];
        var mc = this.mod_count_;
        var md = this.mods_;
        size = size > 0 ? Math.floor(size / mc) : 8;
        if (!size) return '';
        for (var i = 0; i < mc; i++) {
            h.push('<tr>');
            for (var j = 0; j < mc; j++) {
                h.push('<td style="', ' border-width: 0px; border-style: none;', ' border-collapse: collapse;', ' padding: 0px; margin: 0px;', ' width: ' + size + 'px;', ' height: ' + size + 'px;', ' background-color: ', md[i][j] ? colors[0] : colors[1], ';">', '</td>')
            }
            h.push('</tr>')
        }
        h.push('</tbody>', '</table>');
        return h.join('')
    };
    return {
        Destructor: function() {
            this.mods_ = null;
            this.cache_ = null;
            if (this.bit_) {
                this.bit_.Destructor();
                this.bit_ = null
            }
            if (this.byte_) {
                this.byte_.Destructor();
                this.byte_ = null
            }
            if (this.math_) {
                this.math_.Destructor();
                this.math_ = null
            }
        },
        GenerateHtml: function(txt) {
            var map = WCT.QrCode.LEN_INIT_MAP;
            var len = txt.length;
            len = Math.round(len / 10) * 10;
            for (var i in map) {
                if (map[i] <= len) {
                    this.type_id_ = i
                } else {
                    break
                }
            }
            while (true) {
                try {
                    if (this.byte_) this.byte_.Destructor();
                    this.byte_ = new WCT.QrCode.byte(txt);
                    if (this.math_) this.math_.Destructor();
                    this.math_ = new WCT.QrCode.math();
                    this.cache_ = null;
                    generate_.call(this, false, get_best_pattern_.call(this));
                    return get_html_.call(this, arguments[1], arguments[2], arguments[3])
                } catch (e) {
                    if (this.type_id_++ < 40) {
                        this.mod_count_ = 0;
                        this.mods_ = null
                    } else {
                        return ''
                    }
                }
            }
        }
    }
})();
WCT.QrCode.bit = function() {
    this.b_ = [];
    this.l_ = 0
};
WCT.QrCode.bit.prototype = {
    Destructor: function() {
        this.b_ = null
    },
    GetBuffer: function() {
        return this.b_
    },
    Get: function(idx) {
        var bidx = Math.floor(idx / 8);
        return ((this.b_[bidx] >>> (7 - idx % 8)) & 1) == 1
    },
    Put: function(num, length) {
        for (var i = 0; i < length; i++) {
            this.PutBit(((num >>> (length - i - 1)) & 1) == 1)
        }
    },
    GetLength: function() {
        return this.l_
    },
    PutBit: function(bit) {
        var bidx = Math.floor(this.l_ / 8);
        if (this.b_.length <= bidx) this.b_.push(0);
        if (bit) this.b_[bidx] |= (0x80 >>> (this.l_ % 8));
        this.l_++
    }
};
WCT.QrCode.byte = function(str) {
    var l = str.length;
    var b = new Array(l);
    for (var i = 0; i < l; i++) {
        b[i] = str.charCodeAt(i) & 0xff
    }
    this.b_ = b
};
WCT.QrCode.byte.prototype = {
    Destructor: function() {
        this.b_ = null
    },
    GetLength: function() {
        return this.b_.length
    },
    Write: function(buff) {
        for (var i = 0, b = this.b_, len = b.length; i < len; i++) {
            buff.Put(b[i], 8)
        }
    }
};
WCT.QrCode.polynomial = function(num, shift) {
    if (typeof num.length == 'undefined') {
        throw new Error(num.length + ' / ' + shift)
    }
    var len = num.length;
    var off = 0;
    while (off < len && num[off] == 0) off++;
    len -= off;
    var aux = new Array(len + shift);
    for (var i = 0; i < len; i++) {
        aux[i] = num[i + off]
    }
    this.n_ = aux
};
WCT.QrCode.polynomial.prototype = {
    Destructor: function() {
        this.n_ = null
    },
    Get: function(idx) {
        return this.n_[idx]
    },
    GetLength: function() {
        return this.n_.length
    },
    Multiply: function(e, math) {
        var n1 = this.n_;
        var n2 = e.n_;
        var l1 = n1.length;
        var l2 = n2.length;
        var a = new Array(l1 + l2 - 1);
        for (var i = 0; i < l1; i++) {
            for (var j = 0; j < l2; j++) {
                var v1 = math.GetLog(n1[i]);
                var v2 = math.GetLog(n2[j]);
                a[i + j] ^= math.GetExp(v1 + v2)
            }
        }
        return new WCT.QrCode.polynomial(a, 0)
    },
    Mod: function(e, math) {
        var n1 = this.n_;
        var n2 = e.n_;
        var l1 = n1.length;
        var l2 = n2.length;
        if (l1 - l2 < 0) return this;
        var ratio = math.GetLog(n1[0]) - math.GetLog(n2[0]);
        var a = new Array(l1);
        for (var i = 0; i < l1; i++) {
            a[i] = n1[i]
        }
        for (var i = 0; i < l2; i++) {
            a[i] ^= math.GetExp(math.GetLog(n2[i]) + ratio)
        }
        return new WCT.QrCode.polynomial(a, 0).Mod(e, math)
    }
};
WCT.QrCode.math = function() {
    var me = WCT.QrCode.math;
    if (!me.EXP_TABLE) {
        var e = new Array(256);
        var l = new Array(256);
        for (var i = 0; i < 8; i++) {
            e[i] = 1 << i
        }
        for (var i = 8; i < 256; i++) {
            e[i] = e[i - 4] ^ e[i - 5] ^ e[i - 6] ^ e[i - 8]
        }
        for (var i = 0; i < 255; i++) {
            l[e[i]] = i
        }
        me.EXP_TABLE = e;
        me.LOG_TABLE = l
    }
    this.e_ = WCT.DeepCopy(me.EXP_TABLE);
    this.l_ = WCT.DeepCopy(me.LOG_TABLE)
};
WCT.QrCode.math.EXP_TABLE = null;
WCT.QrCode.math.LOG_TABLE = null;
WCT.QrCode.math.prototype = {
    Destructor: function() {
        this.e_ = null;
        this.l_ = null
    },
    GetExp: function(n) {
        while (n < 0) n += 255;
        while (n >= 256) n -= 255;
        return this.e_[n]
    },
    GetLog: function(n) {
        if (n < 1) throw new Error('GetLog(' + n + ')');
        return this.l_[n]
    }
};
WCT.Tree = function(uid, context, env, callbacks) {
    this.uid_ = uid;
    this.context_ = context;
    this.env_ = env;
    this.callbacks_ = callbacks;
    this.tree_ = {};
    this.id_map_ = {};
    this.nbr_ = 0;
    this.sel_ = null;
    this.limit_ = {};
    this.expanded_ = {};
    this.gif_1_ = '1.png';
    var c = this.config_ || {};
    c.root = null;
    c.as_list = false;
    c.auto_select_root = true;
    c.expand_on_select = false;
    c.rtl = false;
    var config = arguments[4];
    if (config) {
        if (config.src_1_gif) this.gif_1_ = config.src_1_gif;
        for (var k in config) {
            if (typeof c[k] != 'undefined') c[k] = config[k]
        }
    }
    this.config_ = c;
    this.skin_ = WCT.skin.Merge(WCT.Tree.SKIN, arguments[5]);
    this.ncss_ = ' style="';
    this.nhtml_ = [];
    this.set_skin_();
    WCT.Tree.STORE[uid] = this
};
WCT.Tree.LESSON_MODE = window.DATA ? window.DATA.LESSON_MODE : {
    demo: true,
    uebung: true,
    praxis: true,
    test: true
};
WCT.ExtendObject(WCT.Tree, {
    STORE: {},
    EXPANDABLE: {
        Ref: true,
        Res: true,
        OU: true
    },
    SKIN: {
        image_closed: {
            id: 's.png',
            x: -293,
            y: -73,
            w: 16,
            h: 16
        },
        image_closed_rtl: {
            id: 's.png',
            x: -293,
            y: -92,
            w: 16,
            h: 16
        },
        image_open: {
            id: 's.png',
            x: -312,
            y: -73
        },
        image_opening: {
            id: 'o.gif'
        },
        text_color: '#000000',
        text_color_h: '#F0AB00',
        text_color_a: '#FFFFFF',
        selected_text_color_h: '#FFFFFF',
        font_weight_a: 'bold',
        background_color: '#FFFFFF',
        background_color_a: '#F0AB00',
        background_color_h: '#FFFFFF',
        node: {
            img_text_spacing: 2,
            list_border_bottom: '1px solid #EFEFEF',
            list_margin: 4,
            tree_margin: 4
        }
    },
    Cleanup: function() {
        for (var i in WCT.Tree.STORE) {
            WCT.Tree.STORE[i].Destructor()
        }
        WCT.Tree.STORE = {}
    },
    GetIconImage: function(data) {
        var skin = WCT.TREE_ICONS || {};
        var img = '';
        var alt = '';
        switch (data.type) {
            case 'Res':
                img = data.tclass == 'resources' ? 'res_resource' : 'res_' + data.tclass;
                break;
            case undefined:
            case 'Ref':
                var tClass = data.tclass;
                var subType = data.sub_type;
                img = tClass === 'wa' ? 'workarea_root' : 'ref_' + tClass;
                if (subType) {
                    if (subType === 'template') {
                        img += '_template'
                    } else if (tClass === 'project') {
                        var m = {
                            pa: '_process_support',
                            ca: '_context_assistant',
                            quiz_project: '_quiz'
                        };
                        if (m[subType]) {
                            img += m[subType];
                            break
                        }
                    } else if (tClass === 'group' && subType === 'desktop_assistant') {} else {
                        var ctx = arguments[3] || this.context_;
                        var acl = WCT.AdaptableClasses && ctx && WCT.AdaptableClasses.GetIcon(data, ctx);
                        if (acl) return acl
                    }
                }
                alt = img;
                var iext = {
                    project: 'macroset',
                    cdoc: 'doc_type'
                }[tClass];
                if (iext) img += '_' + data[iext];
                break;
            case 'Tour':
                img = 'tour_' + data.mode;
                break;
            case 'Docu':
                if (!data.mode || !data.mode.indexOf('compound_doc') || !data.mode.indexOf('master/') || data.mode == 'ppt') {
                    img = 'doc_' + data.doc_type
                } else {
                    var m = data.mode.split('_');
                    if (m.top() == data.doc_type) {
                        m.pop();
                        data = WCT.DeepCopy(data);
                        data.mode = m.join('_')
                    }
                    img = 'docu_' + data.doc_type + '_' + data.mode
                }
                break;
            case 'Doc':
                img = 'doc_' + data.doc_type;
                break;
            default:
                img = typeof data.type == 'string' ? data.type.toLowerCase() : 'unknown';
                break
        }
        var mod1 = arguments[1] || '';
        var mod2 = arguments[2] || '';
        if (mod1) mod1 += '_';
        if (mod2) mod2 = '_' + mod2;
        img = skin[mod1 + img + mod2] || skin[mod1 + img] || skin[img + mod2] || skin[img] || skin[alt] || skin.unknown || null;
        img = WCT.DeepCopy(img);
        if (img) {
            img.id = skin.id || '';
            if (!img.w && skin.w) img.w = skin.w;
            if (!img.h && skin.h) img.h = skin.h
        }
        return img
    }
});
WCT.Tree.prototype = (function() {
    function on_event_(ev) {
        ev = WCT.event.Standardize(ev);
        var t = ev.target;
        var n = ev.targetName;
        var d = n == 'img' || n == 'span' ? t.parentNode : t;
        var uid = d.id.split('#');
        var nid = Number(uid.pop());
        var me = WCT.Tree.STORE[uid.join('#')];
        if (!me || isNaN(nid)) return;
        var o = n == 'img' && t.getAttribute('i') == 1;
        var c = n == 'img' && t.getAttribute('i') == 2 || n == 'span';
        if (!o && !c && me.config_.as_list) {
            var tc = WCT.dom.GetPosition(t.lastChild, true);
            var ti = WCT.dom.GetPosition(t.childNodes[1], true);
            if (me.config_.rtl) {
                if (ev.clientX < tc.left) {
                    c = true
                } else if (ev.clientX >= ti.left) {
                    o = true
                }
            } else if (ev.clientX >= tc.left) {
                c = true
            } else if (ev.clientX < ti.left) {
                o = true
            }
        }
        switch (ev.type) {
            case 'click':
                if (o) {
                    me[me.expanded_[nid] ? 'Collapse' : 'Expand'](nid)
                } else if (c) {
                    if (me.config_.expand_on_select && !me.expanded_[nid]) {
                        me.Expand(nid)
                    }
                    me.Select(nid)
                }
                break;
            case 'mouseover':
            case 'mouseout':
                if (!c) break;
                var sk = me.skin_;
                var co = null;
                var bc = null;
                if (ev.type == 'mouseover') {
                    co = nid == me.sel_ && sk.selected_text_color_h ? sk.selected_text_color_h : sk.text_color_h;
                    bc = nid != me.sel_ && sk.background_color_h ? sk.background_color_h : null
                } else {
                    co = nid == me.sel_ && sk.text_color_a ? sk.text_color_a : sk.text_color;
                    bc = nid != me.sel_ && sk.background_color
                }
                if (!me.config_.as_list) d = d.childNodes[2];
                if (co) d.style.color = co;
                if (bc) d.style.backgroundColor = bc;
                break
        }
    };
    return {
        Destructor: function() {
            delete WCT.Tree.STORE[this.uid_];
            var d = $(this.uid_);
            if (d) {
                d.onclick = null;
                d.onmouseover = null;
                d.onmouseout = null;
                d.parentNode.removeChild(d)
            }
            d = $(this.uid_ + '#opening');
            if (d) d.parentNode.removeChild(d);
            this.tree_ = null;
            this.id_map_ = null;
            this.limit_ = null;
            this.expanded_ = null;
            this.context_ = null;
            this.env_ = null;
            this.callbacks_ = null;
            this.config_ = null;
            this.skin_ = null;
            this.nhtml_ = null
        },
        SetLimit: function(key, value) {
            this.limit_[key] = value
        },
        Create: function(dom) {
            var s = this.skin_;
            if (!s || !s.image_open || !s.image_closed) return null;
            if (s.image_opening) {
                var img = $$('img');
                img.id = this.uid_ + '#opening';
                img.src = s.image_opening.id;
                img.style.position = 'absolute';
                img.style.visibility = 'hidden';
                dom.appendChild(img)
            }
            var o = this.config_;
            var d = $$('div');
            d.id = this.uid_;
            d.className = 'wct-controls-tree';
            if (o.as_list) {
                WCT.skin.Apply(d, s)
            } else {
                WCT.skin.ApplyTextFormats(d, s)
            }
            if (s.font_size) d.style.lineHeight = s.font_size + 4 + 'px';
            if (o.rtl) d.style.direction = 'rtl';
            d.style.overflow = 'auto';
            d.style.whiteSpace = 'nowrap';
            dom.appendChild(d);
            d.onclick = on_event_;
            d.onmouseover = on_event_;
            d.onmouseout = on_event_;
            return d
        },
        Select: function(item) {
            var ni = typeof item == 'string' ? this.select_(item) : this.get_node_info_(item);
            if (!ni) return false;
            var sk = this.skin_;
            if (sk.background_color_a || sk.text_color_a) {
                var co = this.config_;
                var al = co.as_list;
                if (this.sel_ != null) {
                    var oi = this.get_node_info_(this.sel_);
                    if (oi) {
                        var od = oi.dom;
                        od.className = 'node';
                        if (!al) od = od.childNodes[2];
                        od.style.backgroundColor = sk.background_color || '#FFFFFF';
                        od.style.color = sk.text_color || '#000000';
                        od.style.fontWeight = sk.font_weight || 'normal'
                    }
                }
                var nd = ni.dom;
                nd.className = 'node active';
                if (!al) nd = nd.childNodes[2];
                if (sk.background_color_a) nd.style.backgroundColor = sk.background_color_a;
                if (sk.text_color_a) nd.style.color = sk.text_color_a;
                if (sk.font_weight_a) nd.style.fontWeight = sk.font_weight_a;
                var en = this.env_;
                if ((BROWSER.IE9 || BROWSER.IE10) && co.rtl && en.RefreshIE) {
                    WCT.SetTimeout(en.RefreshIE, 100, en)
                }
                var p = al ? nd : nd.parentNode;
                var d = $(this.uid_);
                if (d) {
                    if (d.getBoundingClientRect) {
                        var br_d = d.getBoundingClientRect();
                        var br_p = p.getBoundingClientRect();
                        var lh = sk.font_size ? sk.font_size + 4 : sk.image_closed.h;
                        var sbh = WCT.dom.GetScrollbarHeight();
                        var r_d = {
                            x: 0,
                            y: br_d.top,
                            w: 10,
                            h: d.offsetHeight - sbh
                        };
                        var r_p = {
                            x: 0,
                            y: br_p.top,
                            w: 5,
                            h: lh
                        };
                        if (!WCT.geometry.IncludesRect(r_d, r_p)) {
                            d.scrollTop = r_p.y + d.scrollTop + r_p.h + sbh - r_d.y - r_d.h
                        }
                    } else {
                        var sl = d.scrollLeft;
                        p.scrollIntoView(true);
                        d.scrollLeft = sl
                    }
                }
            }
            this.sel_ = ni.id;
            this.send_notification_('select', ni);
            return true
        },
        Expand: function(item) {
            var ni = this.get_node_info_(item);
            if (!ni || !WCT.Tree.EXPANDABLE[ni.type] || ni.expandable === false || this.expanded_[ni.id]) return false;
            var sk = this.skin_;
            if (sk.image_opening) this.set_opener_icon_(ni, 'opening', sk.image_opening);
            var op = this.config_;
            if (op.as_list) {
                var c = {};
                c[op.rtl ? 'padding-right' : 'padding-left'] = 16 * (ni.lvl + 1) + 'px';
                var s = this.create_subtree_(ni.id, c);
                if (!s) return this.set_not_expandable_(ni);
                var d = $(this.uid_);
                var b = ni.dom.nextSibling;
                while (s.firstChild) {
                    d.insertBefore(s.firstChild, b)
                }
            } else {
                var s = this.create_subtree_(ni.id);
                s.className = 'subtree';
                if (!s) return this.set_not_expandable_(ni);
                s.style[op.rtl ? 'marginRight' : 'marginLeft'] = '16px';
                ni.dom.appendChild(s)
            }
            this.set_opener_icon_(ni, 'open', sk.image_open);
            this.expanded_[ni.id] = true;
            this.send_notification_('expand', ni);
            return true
        },
        Collapse: function(item) {
            var ni = this.get_node_info_(item);
            if (!ni || !this.expanded_[ni.id]) return false;
            var c = ni.children;
            var e = this.expanded_;
            var o = this.config_;
            if (o.as_list) {
                for (var i = c.length - 1; i >= 0; i--) {
                    if (e[c[i]]) this.Collapse(c[i]);
                    var cni = this.get_node_info_(c[i]);
                    cni.dom.parentNode.removeChild(cni.dom);
                    this.remove_id_(cni, ni)
                }
            } else if (ni.dom.childNodes.length > 3) {
                for (var i = c.length - 1; i >= 0; i--) {
                    if (e[c[i]]) this.Collapse(c[i]);
                    var cni = this.get_node_info_(c[i]);
                    this.remove_id_(cni, ni)
                }
                ni.dom.removeChild(ni.dom.lastChild)
            }
            var sk = this.skin_;
            this.set_opener_icon_(ni, 'closed', sk[o.rtl ? 'image_closed_rtl' : 'image_closed'] || sk.image_closed);
            delete this.expanded_[ni.id];
            this.send_notification_('collapse', ni);
            return true
        },
        GetPath: function(item) {
            var ni = this.get_node_info_(item);
            if (!ni) return null;
            var p = [];
            while (ni.parent != null) {
                ni = this.get_node_info_(ni.parent);
                p.unshift({
                    type: ni.type,
                    tclass: ni.tclass,
                    uid: ni.uid,
                    caption: ni.caption
                })
            }
            return p
        },
        GetDom: function() {
            return $(this.uid_)
        },
        GetRootNode: function() {
            return this.config_.root
        },
        Contains: function(item) {
            var as = typeof arguments[1] == 'boolean' ? arguments[1] : true;
            var ni = this.get_node_info_(item);
            if (!ni && as && typeof item == 'string') ni = this.search_(item);
            return ni != null
        },
        SearchSelectionBottomUp: function(tclass) {
            var ni = this.get_node_info_(this.sel_);
            if (!ni) return null;
            do {
                if (ni.tclass == tclass) return ni.uid;
                ni = ni.parent != null ? this.get_node_info_(ni.parent) : null
            } while (ni);
            return null
        },
        Reselect: function() {
            return this.sel_ != null ? this.Select(this.sel_) : false
        },
        SelectPrev: function() {
            var ni = this.get_node_info_(this.sel_);
            var pi = ni ? this.get_node_info_(ni.parent) : null;
            if (!pi) return false;
            var po = pi.children.indexOf(ni.id);
            if (--po < 0) {
                return this.Select(pi.id)
            }
            while (true) {
                var si = this.get_node_info_(pi.children[po]);
                this.Expand(si.id);
                po = si.children.length;
                if (po) {
                    pi = si;
                    po--
                } else {
                    return this.Select(si.id)
                }
            }
        },
        SelectNext: function() {
            var ni = this.get_node_info_(this.sel_);
            if (!ni) return false;
            if (ni.expandable !== false) {
                this.Expand(this.sel_);
                if (ni.children.length) {
                    return this.Select(ni.children[0])
                }
            }
            while (true) {
                var pi = this.get_node_info_(ni.parent);
                if (!pi) return false;
                var po = pi.children.indexOf(ni.id);
                if (++po < pi.children.length) {
                    return this.Select(pi.children[po])
                }
                ni = pi
            }
        },
        set_skin_: function() {
            var skin = this.skin_;
            var opt = this.config_;
            var al = opt.as_list;
            if (al) {
                if (skin.list_border_top) {
                    skin.border_top = skin.list_border_top;
                    delete skin.list_border_top
                }
                if (skin.list_border_bottom) {
                    skin.border_bottom = skin.list_border_bottom;
                    delete skin.list_border_bottom
                }
            }
            var sn = skin.node || {};
            var lm = sn.list_margin || '';
            var tm = sn.tree_margin || '';
            if (typeof lm != 'number' || lm < 0) lm = null;
            if (typeof tm != 'number' || tm < 0) tm = null;
            var style = ['-webkit-touch-callout:none', '-webkit-user-select:none', '-khtml-user-select:none', '-moz-user-select:none', '-ms-user-select:none', '-o-user-select:none', 'user-select:none'];
            if (al) {
                style.push('overflow:hidden', 'text-overflow:ellipsis', 'cursor:pointer');
                if (lm) style.push('padding:' + lm + 'px 0');
                if (sn.list_border_top) style.push('border-top:' + sn.list_border_top);
                if (sn.list_border_bottom) style.push('border-bottom:' + sn.list_border_bottom)
            } else if (tm) {
                style.push('margin:' + tm + 'px 0')
            }
            this.ncss_ = ' style="' + style.join(';') + ';';
            var margin = (opt.rtl ? 'margin-left:' : 'margin-right:') + (sn.img_text_spacing || 2) + 'px';
            this.nhtml_ = ['<div class="node" onselectstart="this.blur(); return false;" onclick="javascript:void(0);" id="' + this.uid_ + '#', '"', '>' + '<img i="1" src="' + this.gif_1_ + '" ', ' style="', ';vertical-align:middle', '" />' + '<img class="icon" i="2" src="' + this.gif_1_ + '" ', ' style="', ';vertical-align:middle;cursor:pointer;' + margin + '" />' + '<span class="text" style="vertical-align:middle;padding:0 2px;cursor:pointer" title="', '">', '</span>' + '</div>']
        },
        create_tree_item_: function(addr, data) {
            var t = this.tree_;
            if (t[addr]) {
                t[addr].caption = data.caption || data.name || '';
                t[addr].expandable = data.expandable;
                t[addr].img = arguments[2] || WCT.Tree.GetIconImage(data, null, null, this.context_)
            } else {
                t[addr] = {
                    addr: addr,
                    id: [],
                    lvl: [],
                    parent: [],
                    children: [],
                    type: data.type || 'Ref',
                    tclass: data.tclass,
                    uid: data.uid || null,
                    caption: data.caption || data.name || '',
                    expandable: data.expandable,
                    img: arguments[2] || WCT.Tree.GetIconImage(data, null, null, this.context_)
                }
            }
        },
        create_id_: function(addr, lvl, parent) {
            var id = this.nbr_++;
            var o = this.tree_[addr];
            o.id.push(id);
            o.lvl.push(lvl);
            o.parent.push(parent);
            o.children.push([]);
            this.id_map_[id] = addr;
            return id
        },
        remove_id_: function(info, parent) {
            if (info.id == this.sel_) {
                this.sel_ = null;
                if (info.parent != null) {
                    this.Select(info.parent)
                }
            }
            var o = this.tree_[info.addr];
            var i = o.id.indexOf(info.id);
            o.id.splice(i, 1);
            o.lvl.splice(i, 1);
            o.parent.splice(i, 1);
            o.children.splice(i, 1);
            var m = this.id_map_;
            delete m[info.id];
            var l = [];
            for (var k in m) {
                l.push(Number(k))
            }
            l = Math.max.apply(null, l);
            this.nbr_ = l + 1;
            var p = parent.children.indexOf(info.id);
            parent.children.splice(p, 1)
        },
        get_node_info_: function(item) {
            var id = item;
            var ni = null;
            var po = 0;
            if (typeof item == 'number') {
                item = this.id_map_[id];
                ni = this.tree_[item];
                po = ni.id.indexOf(id)
            } else if (typeof item == 'string') {
                ni = this.tree_[item];
                id = ni ? ni.id[po] : null
            } else {
                return null
            }
            if (arguments[1]) return ni;
            var nd = $(this.uid_ + '#' + id);
            return ni && nd ? {
                addr: item,
                id: id,
                lvl: ni.lvl[po],
                parent: ni.parent[po],
                children: ni.children[po],
                type: ni.type,
                tclass: ni.tclass,
                uid: ni.uid,
                caption: ni.caption,
                expandable: ni.expandable,
                img: ni.img,
                dom: nd
            } : null
        },
        create_node_: function(addr, lvl, parent, img, css) {
            var ni = this.get_node_info_(addr, true);
            if (!ni) return null;
            var id = this.create_id_(addr, lvl, parent);
            var i1_wh = 'width="' + img.w + '" height="' + img.h + '"';
            var i1 = 'background:transparent url() no-repeat 0 0';
            var cp = '';
            var cls = '" class="indent';
            if (WCT.Tree.EXPANDABLE[ni.type] && ni.expandable !== false) {
                i1 = 'background:transparent url(' + img.id + ') no-repeat ' + img.x + 'px ' + img.y + 'px';
                cp = ';cursor:pointer';
                cls = '" class="indent close'
            }
            var i2 = 'background:transparent url() no-repeat 0 0';
            var i2_w = 0;
            var i2_h = 0;
            if (ni.img) {
                i2 = 'background:transparent url(' + ni.img.id + ') scroll no-repeat ' + (ni.img.x || 0) + 'px ' + (ni.img.y || 0) + 'px';
                i2_w = ni.img.w || 0;
                i2_h = ni.img.h || 0
            }
            var i2_wh = 'width="' + i2_w + '" height="' + i2_h + '"';
            var nh = this.nhtml_;
            var cap = ni.caption.replace(/</g, '&lt;').replace(/>/g, '&gt;');
            return {
                dom: [nh[0], id, nh[1], css, nh[2], i1_wh, nh[3], i1, nh[4], cp, cls, nh[5], i2_wh, nh[6], i2, nh[7], cap, nh[8], cap, nh[9]].join(''),
                id: id
            }
        },
        get_node_css_: function() {
            var css = [];
            var st = arguments[0] || {};
            for (var k in st) {
                css.push(k + ':' + st[k])
            }
            return this.ncss_ + css.join(';') + '" '
        },
        create_subtree_: function(id) {
            var ni = this.get_node_info_(id);
            var sub = this.get_subtree_(ni.addr);
            if (!sub.length) return null;
            var sk = this.skin_;
            var img = sk[this.config_.rtl ? 'image_closed_rtl' : 'image_closed'] || sk.image_closed;
            var css = this.get_node_css_(arguments[1]);
            var lvl = ni.lvl + 1;
            var exp = this.expanded_;
            var dom = [];
            for (var i = 0, c = null; c = sub[i++];) {
                var n = this.create_node_(c, lvl, id, img, css);
                if (!n) continue;
                dom.push(n.dom);
                ni.children.push(n.id);
                delete exp[n.id]
            }
            var d = $$('div');
            d.innerHTML = dom.join('');
            return d
        },
        set_not_expandable_: function(info) {
            info.expandable = false;
            this.set_opener_icon_(info, 'none');
            return false
        },
        set_opener_icon_: function(info, state) {
            var node = info.dom.firstChild;
            var skin = arguments[2];
            var ico1 = 'transparent url() no-repeat 0 0';
            switch (state) {
                case 'open':
                case 'closed':
                    var ico2 = 'transparent url(' + skin.id + ') no-repeat ' + skin.x + 'px ' + skin.y + 'px';
                    node.src = this.gif_1_;
                    node.style.background = ico2;
                    node.style.cursor = 'pointer';
                    node.className = state === 'open' ? 'indent open' : 'indent close';
                    break;
                case 'opening':
                    node.src = skin.id;
                    node.style.background = ico1;
                    node.style.cursor = 'default';
                    break;
                case 'none':
                    node.src = this.gif_1_;
                    node.style.background = ico1;
                    node.style.cursor = 'default';
                    break
            }
        },
        search_: function(addr) {
            var cur = arguments[1];
            var c = cur || this.config_.root;
            var d = this.load_(c);
            if (!d) return null;
            if (addr == cur) return [cur];
            if (d.assets) {
                for (var i = 0, a = null; a = d.assets[i++];) {
                    if (a.tclass && a.uid) {
                        var s = this.search_(addr, a.tclass + '!' + a.uid);
                        if (s) {
                            s.unshift(c);
                            return s
                        }
                    }
                }
            }
            return null
        },
        select_: function(addr) {
            var ni = this.get_node_info_(addr);
            if (ni) return ni;
            var s = this.search_(addr);
            if (!s) return null;
            for (var i = 0, c = null; c = s[i++];) {
                this.Expand(c)
            }
            return this.get_node_info_(s.top())
        }
    }
})();
WCT.EntityTree = function(uid, context, env, callbacks) {
    this.config_ = {
        language: '1033',
        filter: null,
        show_nonref: true,
        show_orphans: false,
        show_orphans_my: false,
        show_resources: false,
        show_trash: false,
        expand_slides: true,
        expand_projects: true,
        expand_cdocs: true,
        expand_books: true,
        expand_groups: true,
        full_expand_check: true
    };
    WCT.Tree.apply(this, arguments)
};
WCT.EntityTree.prototype = new WCT.Tree;
WCT.EntityTree.RESOURCE_TYPES = {
    adaptable: true,
    book_style: true,
    bubble: true,
    deployments: true,
    doc_settings: true,
    glossary: true,
    help: true,
    library: true,
    macroset: true,
    mouse: true,
    panel: true,
    popup: true,
    quiz_style: true,
    recognize: true,
    record_glossary: true,
    script: true,
    style: true,
    task_style: true,
    trainer: true,
    wa_filters: true
};
WCT.EntityTree.CalcNonRefAddr = function(addr, nonref) {
    return addr + ':' + (nonref.mode || nonref.filename || nonref.fileName)
};
WCT.ExtendObject(WCT.EntityTree.prototype, (function() {
    function get_specific_subtree_(addr) {
        var d = [];
        switch (addr) {
            case 'wa':
                var o = this.config_;
                if (o.show_resources) {
                    this.load_('resources');
                    d.push('resources')
                }
                if (o.show_orphans_my) {
                    var omd = this.load_('orphans_my');
                    if (omd && omd.expandable !== false) d.push('orphans_my')
                }
                d.push(this.config_.root);
                if (o.show_orphans) {
                    var od = this.load_('orphans');
                    if (od && od.expandable !== false) d.push('orphans')
                }
                if (o.show_trash) {
                    var td = this.load_('trash');
                    if (td && td.expandable !== false) d.push('trash')
                }
                break;
            case 'resources':
                for (var res in WCT.EntityTree.RESOURCE_TYPES) {
                    if (this.load_res_(res)) d.push(res)
                }
                break;
            default:
                d = WCT.EntityTree.RESOURCE_TYPES[addr] ? this.get_res_subtree_(addr) : null;
                break
        }
        return d
    }

    function preload_assets_(assets) {
        var e = this.env_;
        if (!e.GetSM) return {};
        var r = [];
        for (var i = 0, o = this.config_, l = this.limit_, a = null; a = assets[i++];) {
            var ad = a.tclass + '!' + a.uid;
            if (!a.tclass || !a.uid || o.filter != null && a.filter && a.filter.indexOf(o.filter) < 0 || l[ad] && l[ad].self === false) {
                continue
            }
            r.push(ad + ':entity.txt')
        }
        var s = e.GetSM(r) || [];
        r = {};
        for (var i = 0, a = null; a = s[i++];) {
            r[a.tclass + '!' + a.uid] = a
        }
        return r
    };
    return {
        Create: function(dom) {
            var o = this.config_;
            var r = o.root;
            if (!r) return null;
            var d = WCT.Tree.prototype.Create.apply(this, arguments);
            if (!d) return null;
            var s = this.skin_;
            var img = s[o.rtl ? 'image_closed_rtl' : 'image_closed'] || s.image_closed;
            var ncss = this.get_node_css_();
            this.load_(r);
            if (o.show_orphans || o.show_orphans_my || o.show_resources || o.show_trash) {
                this.load_('wa');
                var wa = this.create_node_('wa', 0, null, img, ncss);
                d.innerHTML = wa.dom;
                if (o.auto_select_root) this.Select('wa');
                this.Expand('wa')
            } else {
                var root = this.create_node_(r, 0, null, img, ncss);
                if (root) d.innerHTML = root.dom;
                if (o.auto_select_root) this.Select(r)
            }
            return d
        },
        translate_res_: function(key1, key2, fallback) {
            var en = this.env_;
            var r1 = en.Localize(key1);
            var r2 = en.Localize(key2);
            return !r1.search(/^\[.*?\]$/) ? (!r2.search(/^\[.*?\]$/) ? fallback : r2) : r1
        },
        load_res_: function(addr) {
            var d = this.env_.GetS(addr + ':');
            d = d && d.resource || null;
            if (!d) return false;
            var ca = addr.split('_');
            var cs = 'IDS_WAPI_';
            for (var i = 0, l = ca.length; i < l; i++) {
                cs += ca[i].toFirstUpperCase()
            }
            var r = {
                type: 'Res',
                tclass: addr,
                uid: null,
                caption: this.translate_res_(cs, 'entity.' + addr, addr),
                expandable: d.length ? null : false
            };
            this.create_tree_item_(addr, r);
            return r.expandable !== false
        },
        load_: function(addr) {
            var c = '';
            var d = null;
            var s = false;
            switch (addr) {
                case 'wa':
                    d = {
                        tclass: 'wa',
                        caption: 'wa'
                    };
                    s = true;
                    break;
                case 'resources':
                    c = this.translate_res_('IDS_WAPI_RESOURCES', 'entity.res', 'resources');
                    d = {
                        type: 'Res',
                        tclass: 'resources',
                        caption: c
                    };
                    s = true;
                    break;
                case 'orphans':
                case 'orphans_my':
                case 'trash':
                    c = this.translate_res_('IDS_WAPI_' + addr.toUpperCase(), 'entity.' + addr, addr);
                    d = {
                        tclass: addr,
                        caption: c
                    };
                    var assets = this.env_.GetS('.' + addr + ':');
                    d.assets = assets && (assets.response && assets.response.assets || assets.assets) || [];
                    break;
                default:
                    d = arguments[1] || this.env_.GetS(addr + ':entity.txt');
                    d = WCT.DeepCopy(d);
                    break
            }
            if (!d) return null;
            var o = this.config_;
            d.expandable = o['expand_' + d.tclass + 's'] === false ? false : null;
            this.create_tree_item_(addr, d);
            if (d.assets && d.assets.length) {
                for (var i = 0, a = null; a = d.assets[i++];) {
                    if (a.type && !WCT.Tree.EXPANDABLE[a.type]) {
                        var ad = WCT.EntityTree.CalcNonRefAddr(addr, a);
                        a = WCT.DeepCopy(a);
                        a.expandable = false;
                        this.create_tree_item_(ad, a)
                    }
                }
            } else if (!s) {
                this.tree_[addr].expandable = false;
                d.expandable = false
            }
            return d
        },
        get_res_language_: function(addr, caption) {
            var x = ev.GetS(addr + ':entity.xml', 'string');
            if (typeof x != 'string') return caption;
            x = x.replace(/\r|\n/g, '');
            var i1 = x.indexOf('<Language name="' + this.config_.language + '"');
            if (i1 < 0) i1 = x.indexOf('<Language name="1033"');
            if (i1 < 0) return caption;
            var i2 = x.indexOf('</Language>', i1);
            x = x.substring(i1, i2);
            var m = x.match(/<Text name="(.*?)">(.*?)<\/Text>/);
            var r = {};
            while (m && m.length == 3) {
                r[m[1]] = m[2];
                x = x.replace(/<Text name="(.*?)">(.*?)<\/Text>/, '');
                m = x.match(/<Text name="(.*?)">(.*?)<\/Text>/)
            }
            return r[caption] || caption
        },
        get_res_subtree_: function(addr) {
            var d = this.env_.GetS(addr + ':');
            d = d && d.resource || null;
            if (!d) return [];
            var r = [];
            for (var i = 0, c = null; c = d[i++];) {
                var a = addr + '!' + c.uid;
                c = {
                    addr: a,
                    type: 'Res',
                    tclass: addr,
                    uid: c.uid,
                    caption: this.get_res_language_(a, c.caption)
                };
                this.create_tree_item_(a, c);
                r.push(a)
            }
            return r
        },
        get_subtree_: function(addr) {
            var pre = {};
            var data = get_specific_subtree_.call(this, addr);
            if (data == null) {
                data = this.load_(addr);
                if (!data) return [];
                pre = preload_assets_.call(this, data.assets)
            } else {
                return data
            }
            var lim = this.limit_;
            var cli = lim[data.tclass + '!' + data.uid];
            var tre = this.tree_;
            var auto = null;
            if (data.autostart) {
                auto = new WCT.address(data.autostart).AsObject(WCT.Tree.LESSON_MODE);
                auto = auto.tclass == 'slide' && !auto.fileName ? auto.uid : null
            }
            var r = [];
            var opt = this.config_;
            for (var i = 0, a = null; a = data.assets[i++];) {
                if (opt.filter != null && a.filter && a.filter.indexOf(opt.filter) < 0) continue;
                var ad;
                if (a.tclass && a.uid) {
                    var as = WCT.ClampBoolean(a.autostart);
                    if (a.tclass == 'slide' && (as || a.uid == auto)) continue;
                    ad = a.tclass + '!' + a.uid;
                    if (lim[ad] && lim[ad].self === false) continue;
                    if (cli) {
                        a = this.load_(ad, pre[ad]);
                        if (cli[a.tclass] === false || cli.language != null && a.language != 'mul' && a.language != cli.language) {
                            continue
                        }
                        lim[ad] = cli;
                        delete lim[ad].self
                    }
                    if (arguments[1] !== false) {
                        this.load_(ad, pre[ad]);
                        if (opt.full_expand_check) {
                            var ae = this.get_subtree_(ad, false).length > 0;
                            if (!ae && tre[ad]) tre[ad].expandable = false
                        }
                    }
                } else {
                    if (!opt.show_nonref) continue;
                    ad = WCT.EntityTree.CalcNonRefAddr(addr, a)
                }
                r.push(ad)
            }
            return r
        },
        send_notification_: function(type, info) {
            var cb = this.callbacks_;
            if (!cb.callback_f) return;
            var d;
            if (info.type == 'Res') {
                d = {
                    type: 'Res',
                    tclass: info.tclass,
                    caption: info.caption
                }
            } else if (info.type == 'Ref') {
                switch (info.addr) {
                    case 'wa':
                    case 'orphans':
                    case 'orphans_my':
                    case 'resources':
                    case 'trash':
                        d = {
                            tclass: info.tclass,
                            caption: info.caption
                        };
                        break;
                    default:
                        d = this.env_.GetS(info.addr + ':entity.txt');
                        d = WCT.DeepCopy(d);
                        break
                }
                if (!d) return;
                d.type = 'Ref'
            } else {
                var pi = this.get_node_info_(info.parent);
                d = pi ? this.env_.GetS(pi.addr + ':entity.txt') : null;
                if (!d || !d.assets) return;
                for (var i = 0, a = null; a = d.assets[i++];) {
                    if (WCT.EntityTree.CalcNonRefAddr(pi.addr, a) == info.addr) {
                        d = a;
                        break
                    }
                }
                if (d.assets) return
            }
            d.event = type;
            if (type == 'select') d.path = this.GetPath(info.id);
            WCT.SetTimeout(cb.callback_f, 100, cb.callback_s, [d])
        }
    }
})());
WCT.IdentityTree = function(uid, context, env, callbacks) {
    this.config_ = {
        src_icons: '',
        expand_ous: true,
        expand_groups: true,
        expand_users: false,
        show_ous: true,
        show_groups: true,
        show_users: true,
        show_active_only: true
    };
    WCT.Tree.apply(this, arguments)
};
WCT.IdentityTree.prototype = new WCT.Tree;
WCT.ExtendObject(WCT.IdentityTree.prototype, (function() {
    function get_data_(addr) {
        var d = this.env_.GetS('mgr:' + addr);
        d = d || null;
        if (!d) return null;
        if (!addr.search(/^ou!/i)) {
            var h = d.ou;
            d = WCT.DeepCopy(d.self);
            d.assets = h
        } else if (!addr.search(/^group!/i)) {
            d = WCT.DeepCopy(d.group);
            d.type = 'Group'
        } else if (!addr.search(/^user/i)) {
            d = WCT.DeepCopy(d.user);
            d.type = 'User'
        } else {
            return null
        }
        return d
    };

    function get_icon_(addr) {
        var i = addr.split('!')[0].toLowerCase();
        return {
            id: this.config_.src_icons + '/' + i + '.png',
            w: 16,
            h: 16
        }
    };
    return {
        Create: function() {
            var o = this.config_;
            var r = o.root;
            if (!r) return null;
            var d = WCT.Tree.prototype.Create.apply(this, arguments);
            if (!d) return d;
            var s = this.skin_;
            var img = s[o.rtl ? 'image_closed_rtl' : 'image_closed'] || s.image_closed;
            var ncss = this.get_node_css_();
            this.load_(r);
            var root = this.create_node_(r, 0, null, img, ncss);
            if (root) d.innerHTML = root.dom;
            if (o.auto_select_root) this.Select(r);
            return d
        },
        load_: function(addr) {
            var d = get_data_.call(this, addr);
            if (!d) return null;
            var o = this.config_;
            var i = get_icon_.call(this, addr);
            d.expandable = o['expand_' + d.type.toLowerCase() + 's'] === false ? false : null;
            this.create_tree_item_(addr, d, i);
            if (!d.assets || !d.assets.length) {
                this.tree_[addr].expandable = false;
                d.expandable = false
            }
            return d
        },
        get_subtree_: function(addr) {
            var data = this.load_(addr);
            var assets = data && data.assets;
            if (!assets) return [];
            var t = this.tree_;
            var o = this.config_;
            var r = [];
            for (var i = 0, a = null; a = assets[i++];) {
                var lc_type = a.type.toLowerCase();
                var ad = lc_type + '!' + a.uid;
                var ac = WCT.ClampBoolean(a.active, true);
                if (!o['show_' + lc_type + 's'] || o.show_active_only && ac === false) continue;
                if (WCT.Tree.EXPANDABLE[a.type] && arguments[1] !== false) {
                    this.load_(ad);
                    var ae = this.get_subtree_(ad, false).length > 0;
                    if (!ae && t[ad]) t[ad].expandable = false
                } else {
                    var ai = get_icon_.call(this, ad);
                    this.create_tree_item_(ad, a, ai)
                }
                r.push(ad)
            }
            return r
        },
        send_notification_: function(type, info) {
            var cb = this.callbacks_;
            if (!cb.callback_f) return;
            var d = get_data_.call(this, info.addr);
            if (!d) return null;
            d.event = type;
            if (type == 'select') d.path = this.GetPath(info.id);
            WCT.SetTimeout(cb.callback_f, 100, cb.callback_s, [d])
        }
    }
})());
WCT.ResourceSelectorTree = function(uid, context, env, callbacks) {
    this.entity_list_ = arguments[4] && (arguments[4].entity_list || null);
    this.cbox_map_ = {};
    this.config_ = {
        language: '1033',
        filter: null,
        show_nonref: true,
        show_orphans: false,
        show_orphans_my: false,
        show_resources: false,
        show_trash: false,
        expand_slides: true,
        expand_projects: true,
        expand_cdocs: true,
        expand_books: true,
        expand_groups: true,
        full_expand_check: true
    };
    WCT.Tree.apply(this, arguments)
};
WCT.ResourceSelectorTree.prototype = new WCT.Tree;
WCT.ResourceSelectorTree.RESOURCE_TYPES = {
    adaptable: true,
    book_style: true,
    bubble: true,
    deployments: true,
    doc_settings: true,
    glossary: true,
    help: true,
    library: true,
    macroset: true,
    mouse: true,
    panel: true,
    popup: true,
    quiz_style: true,
    recognize: true,
    record_glossary: true,
    script: true,
    style: true,
    task_style: true,
    trainer: true,
    wa_filters: true
};
WCT.ResourceSelectorTree.CalcNonRefAddr = function(addr, nonref) {
    return addr + ':' + (nonref.mode || nonref.filename || nonref.fileName)
};
WCT.ResourceSelectorTree.UPLOAD_MAP = {
    equal: {
        on_server: false,
        available: false,
        not_available: false
    },
    missing: {
        on_server: true,
        available: true,
        not_available: true
    },
    modified: {
        on_server: false,
        available: true,
        not_available: false
    }
};
WCT.ExtendObject(WCT.ResourceSelectorTree.prototype, (function() {
    this.entity_list_ = null;

    function get_specific_subtree_(addr) {
        var d = [];
        switch (addr) {
            case 'wa':
                var o = this.config_;
                if (o.show_resources) {
                    this.load_('resources');
                    d.push('resources')
                }
                if (o.show_orphans_my) {
                    var omd = this.load_('orphans_my');
                    if (omd && omd.expandable !== false) d.push('orphans_my')
                }
                d.push(this.config_.root);
                if (o.show_orphans) {
                    var od = this.load_('orphans');
                    if (od && od.expandable !== false) d.push('orphans')
                }
                if (o.show_trash) {
                    var td = this.load_('trash');
                    if (td && td.expandable !== false) d.push('trash')
                }
                break;
            case 'resources':
                for (var res in WCT.ResourceSelectorTree.RESOURCE_TYPES) {
                    if (this.load_res_(res)) d.push(res)
                }
                break;
            default:
                d = WCT.ResourceSelectorTree.RESOURCE_TYPES[addr] ? this.get_res_subtree_(addr) : null;
                break
        }
        return d
    };

    function preload_assets_(assets) {
        var e = this.env_;
        if (!e.GetSM) return {};
        var r = [];
        for (var i = 0, o = this.config_, l = this.limit_, a = null; a = assets[i++];) {
            var ad = a.tclass + '!' + a.uid;
            if (!a.tclass || !a.uid || o.filter != null && a.filter && a.filter.indexOf(o.filter) < 0 || l[ad] && l[ad].self === false) {
                continue
            }
            r.push(ad + ':entity.txt')
        }
        var s = e.GetSM(r) || [];
        r = {};
        for (var i = 0, a = null; a = s[i++];) {
            r[a.tclass + '!' + a.uid] = a
        }
        return r
    };

    function get_orphan_nodes_(entity_list) {
        var sub_roots = [];
        for (var i = 0; i < entity_list.length; i++) {
            var eli = entity_list[i];
            if (WCT.ResourceSelectorTree.RESOURCE_TYPES[eli.tclass] || eli.phony) continue;
            var myUid = eli.uid;
            var isRoot = true;
            for (var j = 0; j < entity_list.length; j++) {
                var elj = entity_list[j];
                if (!elj.assets || WCT.ResourceSelectorTree.RESOURCE_TYPES[elj.tclass] || elj.phony) continue;
                for (var k = 0; k < elj.assets.length; k++) {
                    if (myUid === elj.assets[k].uid) isRoot = false
                }
            }
            if (isRoot) sub_roots.push({
                uid: myUid
            })
        }
        return sub_roots
    };

    function get_resource_nodes_(entity_list) {
        var type_map = {};
        for (var i = 0; i < entity_list.length; i++) {
            var e = entity_list[i];
            if (!WCT.ResourceSelectorTree.RESOURCE_TYPES[e.tclass]) continue;
            if (!e.type) e.type = 'Res';
            if (type_map[e.tclass]) {
                var list = type_map[e.tclass];
                list.push(e.uid)
            } else {
                type_map[e.tclass] = [e.uid]
            }
        }
        var phony_nodes = [];
        for (var i in type_map) {
            if (type_map.hasOwnProperty(i)) {
                var cap = this.translate_res_('IDS_WAPI_' + i.toUpperCase(), 'entity.' + i, i);
                var pnode = {
                    uid: WCT.uid.Generate(8),
                    assets: [],
                    tclass: i,
                    caption: cap,
                    type: 'Res',
                    phony: true
                };
                var assets = type_map[i];
                for (var j = 0; j < assets.length; j++) {
                    pnode.assets.push({
                        uid: assets[j]
                    })
                }
                phony_nodes.push(pnode)
            }
        }
        return phony_nodes
    };

    function create_phony_node_(addr) {
        var d = {};
        var tc = {
            orphans: addr,
            resources: 'root',
            All: 'group'
        }[addr];
        if (addr === 'resources') {
            d = {
                type: 'Res',
                tclass: tc,
                caption: this.translate_res_('IDS_WAPI_RESOURCES', 'entity.res', 'resources')
            }
        } else if (addr === 'orphans' || addr === 'All') {
            d = {
                type: 'Ref',
                tclass: tc,
                caption: this.translate_res_(addr, 'entity.' + addr, addr)
            }
        }
        return {
            uid: WCT.uid.Generate(8),
            caption: d.caption,
            assets: [],
            tclass: d.tclass,
            type: d.type,
            phony: true
        }
    };

    function get_root_ids_() {
        var root = create_phony_node_.call(this, 'All');
        var subRoots = [];
        var entityList = this.entity_list_;
        var resNodes = get_resource_nodes_.call(this, entityList);
        var resNode = null;
        if (resNodes.length > 0) {
            resNode = create_phony_node_.call(this, 'resources');
            for (var i = 0; i < resNodes.length; i++) {
                entityList.push(resNodes[i]);
                resNode.assets.push({
                    uid: resNodes[i].uid
                })
            }
        }
        if (resNode) {
            entityList.push(resNode);
            subRoots.push({
                uid: resNode.uid
            })
        }
        var nonResOrphans = get_orphan_nodes_.call(this, entityList);
        var orphanNode = null;
        if (nonResOrphans.length > 0) {
            orphanNode = create_phony_node_.call(this, 'orphans');
            for (var i = 0; i < nonResOrphans.length; i++) {
                orphanNode.assets.push({
                    uid: nonResOrphans[i].uid
                })
            }
        }
        if (orphanNode) {
            entityList.push(orphanNode);
            subRoots.push({
                uid: orphanNode.uid
            })
        }
        for (var i = 0; i < subRoots.length; i++) {
            root.assets.push({
                uid: subRoots[i].uid
            })
        }
        entityList.push(root);
        return root.uid
    };
    return {
        Create: function(dom) {
            this.cbox_map_ = {};
            var r = get_root_ids_.call(this);
            if (!r) return null;
            var d = WCT.Tree.prototype.Create.apply(this, arguments);
            if (!d) return null;
            d.className = 'wct-controls-tree selection';
            var c = this.config_;
            var s = this.skin_;
            var img = s[c.rtl ? 'image_closed_rtl' : 'image_closed'] || s.image_closed;
            var ncss = this.get_node_css_();
            this.load_();
            if (c.show_orphans || c.show_orphans_my || c.show_resources || c.show_trash) {
                this.load_('wa');
                var wa = this.create_node_('wa', 0, null, img, ncss);
                if (wa) d.innerHTML = wa.dom;
                if (c.auto_select_root) this.Select('wa');
                this.Expand('wa')
            } else {
                var root = this.create_node_(r, 0, null, img, ncss);
                if (root) d.innerHTML = root.dom;
                this.expand_all_(r)
            }
            var ccb = this.checkbox_cb_.bind(this);
            for (var uid in this.cbox_map_) {
                var cba = this.get_cbox_array_(uid);
                for (var j = 0, l = cba.length; j < l; j++) {
                    WCT.event.Observe('click', ccb, document.getElementById(cba[j].cid))
                }
            }
            return d
        },
        Expand: function(item) {
            WCT.Tree.prototype.Expand.call(this, item);
            var ni = this.get_node_info_(item);
            var a = this.get_entity_by_id_(ni.uid).assets || [];
            var ccb = this.checkbox_cb_.bind(this);
            for (var i = 0, l = a.length; i < l; i++) {
                var cba = this.get_cbox_array_(a[i].uid);
                for (var j = 0, len = cba.length; j < len; j++) {
                    WCT.event.Observe('click', ccb, document.getElementById(cba[j].cid))
                }
            }
            return true
        },
        expand_all_: function(r) {
            if (!this.tree_[r] || !this.tree_[r].expandable) return;
            this.Expand(r);
            var children = this.get_subtree_(r);
            for (var i = 0, l = children.length; i < l; i++) {
                this.expand_all_(children[i])
            }
        },
        translate_res_: function(key1, key2, fallback) {
            var en = this.env_;
            var r1 = en.Localize(key1);
            var r2 = en.Localize(key2);
            return !r1.search(/^\[.*?\]$/) ? (!r2.search(/^\[.*?\]$/) ? fallback : r2) : r1
        },
        create_node_: function(addr, lvl, parent, img, css) {
            var ni = this.get_node_info_(addr, true);
            if (!ni) return null;
            var id = this.create_id_(addr, lvl, parent);
            var i1_wh = 'width="' + img.w + '" height="' + img.h + '"';
            var i1 = 'background:transparent url() scroll no-repeat 0px 0px';
            var cp = '';
            var cls = '" class="indent';
            if (WCT.Tree.EXPANDABLE[ni.type] && ni.expandable !== false) {
                i1 = 'background:transparent url(' + img.id + ') scroll no-repeat ' + img.x + 'px ' + img.y + 'px';
                cp = ';cursor:pointer';
                cls = '" class="indent close'
            }
            var i2 = 'background:transparent url() no-repeat 0 0';
            var i2_w = 0;
            var i2_h = 0;
            if (ni.img) {
                i2 = 'background:transparent url(' + ni.img.id + ') no-repeat ' + (ni.img.x || 0) + 'px ' + (ni.img.y || 0) + 'px';
                i2_w = ni.img.w || 0;
                i2_h = ni.img.h || 0
            }
            var i2_wh = 'width="' + i2_w + '" height="' + i2_h + '"';
            var cid = WCT.uid.Generate(8);
            var state = this.get_checkbox_state_(ni.uid);
            var chkbox = "<input type='checkbox' " + "id='" + cid + "'" + (state ? ' checked' : '') + " class='wct-checkbox'></input>";
            this.add_to_cbox_map_(ni.uid, {
                cid: cid,
                state: state
            });
            var nh = this.nhtml_;
            var nh5 = nh[5];
            nh5 = nh5.slice(0, 4) + chkbox + nh5.slice(4);
            var cap = ni.caption.replace(/</g, '&lt;').replace(/>/g, '&gt;');
            return {
                dom: [nh[0], id, nh[1], css, nh[2], i1_wh, nh[3], i1, nh[4], cp, cls, nh5, i2_wh, nh[6], i2, nh[7], cap, nh[8], cap, nh[9]].join(''),
                id: id
            }
        },
        get_entity_by_id_: function(uid) {
            var entityList = this.entity_list_;
            for (var i = entityList.length - 1; i >= 0; i--) {
                if (uid === entityList[i].uid) break
            }
            return i !== -1 ? entityList[i] : []
        },
        get_checkbox_state_: function(uid) {
            var a = this.cbox_map_[uid] || null;
            if (a) return a[0].state;
            var e = this.get_entity_by_id_(uid);
            return e.phony || WCT.ResourceSelectorTree.UPLOAD_MAP[e.sync][e.token]
        },
        get_parents_by_child_: function(cuid) {
            var parents = [];
            var entityList = this.entity_list_;
            for (var i = 0, l = entityList.length; i < l; i++) {
                var e = entityList[i];
                if (e.assets) {
                    var a = e.assets;
                    for (var j = 0, len = a.length; j < len; j++) {
                        if (a[j].uid === cuid) parents.push(e)
                    }
                }
            }
            return parents
        },
        add_to_cbox_map_: function(uid, sobj) {
            var a = this.cbox_map_[uid] || null;
            if (a) {
                for (var i = 0, l = a.length; i < l; i++) {
                    var ai = a[i];
                    var o = document.getElementById(ai.cid);
                    if (o) {
                        ai.state = sobj.state
                    } else {
                        a.splice(i, 1)
                    }
                }
                a.push(sobj)
            } else {
                this.cbox_map_[uid] = [sobj]
            }
        },
        get_assets_by_entity_id_: function(id) {
            var entityList = this.entity_list_;
            for (var i = entityList.length - 1; i >= 0; i--) {
                if (id === entityList[i].uid) break
            }
            return i !== -1 ? entityList[i].assets || [] : []
        },
        get_cbox_array_: function(uid) {
            return this.cbox_map_[uid] || []
        },
        get_cbox_state_: function(uid) {
            var a = this.cbox_map_[uid] || null;
            return a ? a[0].state : null
        },
        updt_cbox_dom_: function(id, value) {
            var cb = document.getElementById(id);
            if (cb) cb.checked = value
        },
        updt_parent_cbox_: function(uid, value) {
            var cba = this.cbox_map_[uid];
            for (var i = 0, l = cba.length; i < l; i++) {
                var o = cba[i];
                o.state = value;
                this.updt_cbox_dom_(o.cid, value);
                var parents = this.get_parents_by_child_(uid);
                if (!parents.length) return;
                for (var j = 0, len = parents.length; j < len; j++) {
                    this.updt_parent_cbox_(parents[j].uid, value)
                }
            }
        },
        updt_child_cbox_: function(uid, value, ctrlKey) {
            var cba = this.cbox_map_[uid];
            for (var i = 0; i < cba.length; i++) {
                var o = cba[i];
                o.state = value;
                this.updt_cbox_dom_(o.cid, value);
                if (ctrlKey) return;
                var a = this.get_assets_by_entity_id_(uid);
                for (var j = 0, l = a.length; j < l; j++) {
                    this.updt_child_cbox_(a[j].uid, value, ctrlKey)
                }
            }
        },
        get_uid_by_cid_: function(cid) {
            var cbm = this.cbox_map_;
            for (var uid in cbm) {
                var cba = cbm[uid];
                for (var i = cba.length - 1; i >= 0; i--) {
                    if (cid === cba[i].cid) break
                }
                if (i !== -1) return uid
            }
            return null
        },
        updt_own_cbox_: function(uid, value) {
            var cba = this.cbox_map_[uid];
            for (var i = 0, l = cba.length; i < l; i++) {
                cba[i].state = value;
                this.updt_cbox_dom_(cba[i].cid, value)
            }
        },
        updt_cbox_state_: function(cid, value, ctrlKey) {
            var uid = this.get_uid_by_cid_.call(this, cid);
            this.updt_own_cbox_.call(this, uid, value, ctrlKey);
            this.updt_child_cbox_(uid, value, ctrlKey);
            if (value) this.updt_parent_cbox_(uid, value)
        },
        checkbox_cb_: function(ev) {
            ev = WCT.event.Standardize(ev);
            var tar = ev.target;
            var cid = tar.id;
            var val = tar.checked;
            this.updt_cbox_state_(cid, val, ev.ctrlKey)
        },
        load_: function(addr) {
            var d = null;
            for (var j = 0, l = this.entity_list_.length; j < l; j++) {
                d = this.entity_list_[j];
                d.expandable = d.assets && d.assets.length > 0 ? true : false;
                this.create_tree_item_(d.uid, d)
            }
            return d
        },
        get_subtree_: function(addr) {
            var entityList = this.entity_list_;
            var cur = null;
            for (var i = entityList.length - 1; i >= 0; i--) {
                if (addr === entityList[i].uid) break
            }
            if (i !== -1) cur = entityList[i];
            var children = [];
            if (cur && cur.assets) {
                for (var i = 0, l = cur.assets.length; i < l; i++) {
                    children[i] = cur.assets[i].uid
                }
            }
            return children
        },
        send_notification_: function(type, info) {}
    }
})());
WCT.SplitterButton = function(uid) {
    this.uid_ = uid;
    this.connectors_ = arguments[2] || {};
    this.skin_ = WCT.skin.Merge(WCT.SplitterButton.SKIN, arguments[3]);
    var c = arguments[1] || {};
    this.config_ = {
        rtl: c.rtl || false,
        image_id: c.image_id || 'image'
    };
    this.visible_ = true;
    this.enabled_ = true;
    this.active_ = false;
    this._title = '';
    WCT.SplitterButton.STORE[uid] = this
};
WCT.ExtendObject(WCT.SplitterButton, {
    STORE: {},
    SKIN: {
        align: 'center',
        vertical_align: 'middle',
        image: {
            id: '',
            x: 0,
            y: 0
        },
        image_h: {
            id: '',
            x: 0,
            y: 0
        },
        image_a: {
            id: '',
            x: 0,
            y: 0
        },
        w: 0,
        h: 0
    },
    Cleanup: function() {
        for (var id in WCT.SplitterButton.STORE) {
            WCT.SplitterButton.STORE[id].Destructor()
        }
        WCT.SplitterButton.STORE = {}
    }
});
WCT.SplitterButton.prototype = (function() {
    function on_mouse_event_(e) {
        e = WCT.event.Standardize(e);
        if (e.type == 'dblclick') {
            if (BROWSER.IE6 || BROWSER.IE7 || BROWSER.IE8) {
                e.type = 'click'
            } else {
                return null
            }
        }
        var t = e.target;
        if (!t || !t.id) return true;
        var o = WCT.SplitterButton.STORE[t.id];
        if (!o) return true;
        if (o.visible_ && o.enabled_ && !o.active_) {
            var s = o.skin_;
            var c = o.config_;
            var n = o.connectors_;
            if (e.type == 'click') {
                if (!BROWSER.MOBILE) WCT.skin.ApplyBgImage(t, s[c.image_id]);
                if (n.callback_f) n.callback_f.call(n.callback_s, t.id, e)
            } else {
                if (!BROWSER.MOBILE) {
                    var m = {
                        mouseover: '_h',
                        mouseout: '',
                        mousedown: '_a',
                        mouseup: '_h'
                    }[e.type];
                    WCT.skin.ApplyBgImage(t, s[c.image_id + m] || s[c.image_id] || {
                        id: ''
                    })
                }
                if (n.callback_f) n.callback_f.call(n.callback_s, t.id, e)
            }
            e.cancelBubble = true;
            return false
        }
        return true
    };

    function on_touch_event_(e) {
        e = WCT.event.Standardize(e)
    };
    return {
        Destructor: function() {
            var d = $(this.uid_);
            if (d) {
                d.ondblclick = null;
                d.onclick = null;
                d.onmouseover = null;
                d.onmouseout = null;
                d.onmousedown = null;
                d.onmouseup = null;
                d.ontouchstart = null;
                d.ontouchend = null;
                d.onselectstart = null;
                d.ondragstart = null;
                d.parentNode.removeChild(d)
            }
            this.connectors_ = null;
            this.skin_ = null
        },
        Create: function(dom) {
            var skn = this.skin_;
            var cfg = this.config_;
            var doc = dom.ownerDocument || document;
            var x = cfg.rtl ? WCT.skin.ConvertXToRtl(skn.x) : skn.x;
            var d = doc.createElement('div');
            d.id = this.uid_;
            d.style.cursor = 'pointer';
            d.title = this._title;
            WCT.skin.ApplyPosition(d, {
                x: x,
                y: skn.y,
                w: skn.w,
                h: skn.h
            });
            if (skn.image) WCT.skin.ApplyBgImage(d, skn.image);
            dom.appendChild(d);
            d.ondblclick = on_mouse_event_;
            d.onclick = on_mouse_event_;
            d.onmouseover = on_mouse_event_;
            d.onmouseout = on_mouse_event_;
            d.onmousedown = on_mouse_event_;
            d.onmouseup = on_mouse_event_;
            d.ontouchstart = on_touch_event_;
            d.ontouchend = on_touch_event_;
            d.onselectstart = function() {
                return false
            };
            d.ondragstart = function() {
                return false
            }
        },
        SetXY: function(x, y) {
            var d = $(this.uid_);
            if (!d) return;
            if (typeof x == 'number') d.style.left = x + 'px';
            if (typeof y == 'number') d.style.top = y + 'px'
        },
        SetTitle: function(title) {
            this._title = title || '';
            var d = $(this.uid_);
            if (!d) return;
            d.title = title || ''
        },
        Visible: function() {
            var v = arguments[0];
            if (typeof v === 'undefined') return this.visible_;
            this.visible_ = v;
            var d = $(this.uid_);
            if (d) d.style.visibility = v ? '' : 'hidden';
            return v
        },
        Enabled: function() {
            var e = arguments[0];
            if (typeof e !== 'undefined') this.enabled_ = e;
            return this.enabled_
        },
        Active: function() {
            var a = arguments[0];
            if (typeof a !== 'undefined') this.active_ = a;
            return this.active_
        }
    }
})();
WCT.Splitter = function(uid, context, env, callbacks) {
    if (!this.type_) return;
    this.id_ = uid;
    this.context_ = new WCT.context(context);
    this.env_ = env;
    this.callbacks_ = callbacks;
    var c = arguments[4] || {};
    this.config_ = {
        cover_iframe: !!c.cover_iframe,
        cover_src: c.cover_src || '',
        cover_x: c.cover_x || 0,
        cover_y: c.cover_y || 0,
        cover_w: c.cover_w || '100%',
        cover_h: c.cover_h || '100%',
        cover_z: c.cover_z || 2
    };
    this.skin_ = WCT.skin.Merge(WCT.Splitter.SKIN[this.type_], arguments[5]);
    WCT.skin.ExtendUrls(this.skin_, '', this.context_);
    this.dnd_ = null;
    this.icon_ = null;
    this.fader_ = null;
    this.in_drag_ = false;
    this.valid_click_ = false
};
WCT.Splitter.SKIN = {
    h: {
        background_color: '#777777',
        h: 9,
        border_right: '1px solid #999999',
        image: {
            id: 'mgr:resources!skin:sh.png',
            x: 0,
            y: -667,
            repeat: 'x'
        },
        icon: {
            image: {
                id: 'mgr:resources!skin:s.png',
                x: -204,
                y: -120
            },
            image_h: {
                id: 'mgr:resources!skin:s.png',
                x: -247,
                y: -120
            },
            image_a: {
                id: 'mgr:resources!skin:s.png',
                x: -288,
                y: -120
            },
            w: 37,
            h: 9,
            align: 'center'
        }
    },
    v: {
        background_color: '#777777',
        w: 9,
        border_bottom: '1px solid #999999',
        image: {
            id: 'mgr:resources!skin:sv.png',
            x: -160,
            y: 0,
            repeat: 'y'
        },
        icon: {
            image: {
                id: 'mgr:resources!skin:s.png',
                x: -204,
                y: -73
            },
            image_h: {
                id: 'mgr:resources!skin:s.png',
                x: -224,
                y: -73
            },
            image_a: {
                id: 'mgr:resources!skin:s.png',
                x: -244,
                y: -73
            },
            w: 9,
            h: 37,
            vertical_align: 'middle'
        }
    }
};
WCT.Splitter.prototype = (function() {
    function on_begin_() {
        var d = $(this.id_);
        if (!d) return;
        var c = this.config_;
        d.style.zIndex = c.cover_z + 1;
        var f = new WCT.Fader(this.id_ + '#c', {
            cursor: this.type_ == 'h' ? 'n-resize' : 'e-resize',
            opacity: 0.01,
            iframe: c.cover_iframe,
            src: c.cover_src,
            x: c.cover_x,
            y: c.cover_y,
            w: c.cover_w,
            h: c.cover_h,
            z: c.cover_z
        });
        f.Create(d.parentNode);
        this.fader_ = f;
        this.in_drag_ = true;
        this.valid_click_ = true;
        var cn = this.callbacks_;
        if (cn.callback_f) cn.callback_f.call(cn.callback_s, this.id_, 'begin')
    };

    function on_end_() {
        if (this.fader_) {
            this.fader_.Destructor();
            this.fader_ = null
        }
        var d = $(this.id_);
        if (d) d.style.zIndex = '';
        this.in_drag_ = false;
        var c = this.callbacks_;
        if (c.callback_f) c.callback_f.call(c.callback_s, this.id_, 'end')
    };

    function on_move_(dom, x, y) {
        var c = this.callbacks_;
        if (c.callback_f) c.callback_f.call(c.callback_s, this.id_, 'move', x, y);
        if (this.in_drag_) this.valid_click_ = false
    };

    function on_click_(id, evt) {
        if (evt.type == 'click' && this.valid_click_) {
            var c = this.callbacks_;
            if (c.callback_f) c.callback_f.call(c.callback_s, this.id_, 'click');
            this.valid_click_ = false
        }
    };
    return {
        Destructor: function() {
            if (this.icon_) {
                this.icon_.Destructor();
                this.icon_ = null
            }
            if (this.dnd_) {
                this.dnd_.Destructor();
                this.dnd_ = null
            }
            if (this.context_) {
                this.context_.Destructor();
                this.context_ = null
            }
            var d = $(this.id_);
            if (d) d.parentNode.removeChild(d);
            this.env_ = null;
            this.callbacks_ = null;
            this.config_ = null;
            this.skin_ = null
        },
        Create: function(dom) {
            var id = this.id_;
            var s = this.skin_;
            var d = $$('div');
            d.id = id;
            WCT.dom.AddClass(d, 'wct-controls-splitter ', this.type_ === 'h' ? 'hor' : 'ver');
            WCT.skin.Apply(d, s);
            dom.appendChild(d);
            s = s.icon;
            if (s && s.image && s.image.id) {
                var btn = new WCT.SplitterButton(id + '#ico', null, {
                    callback_f: on_click_,
                    callback_s: this
                }, s);
                btn.Create(d);
                this.icon_ = btn
            }
            var dnd = new WCT.dnd(d);
            dnd.SetCallback('onbegin', on_begin_, this);
            dnd.SetCallback('onend', on_end_, this);
            dnd.SetCallback('onmove', on_move_, this);
            dnd.Restrict(this.type_ == 'h' ? 'x' : 'y', true);
            this.dnd_ = dnd;
            return d
        },
        SetPosition: function(pos) {
            var id = this.id_;
            var d = $(id);
            if (!d) return;
            d.style.left = pos.x + 'px';
            d.style.top = pos.y + 'px';
            var s = this.skin_;
            var i = $(id + '#ico');
            if (this.type_ == 'v') {
                d.style.width = s.w + 'px';
                d.style.height = pos.h + 'px';
                if (this.icon_) {
                    var iy = 0;
                    var va = s.icon.vertical_align;
                    if (va == 'middle') {
                        iy = (pos.h - s.icon.h) >> 1
                    } else if (va == 'bottom') {
                        iy = pos.h - s.icon.h
                    }
                    this.icon_.SetXY(null, iy)
                }
            } else {
                d.style.width = pos.w + 'px';
                d.style.height = s.h + 'px';
                if (this.icon_) {
                    var ix = 0;
                    var ia = s.icon.align;
                    if (ia == 'center') {
                        ix = (pos.w - s.icon.w) >> 1
                    } else if (ia == 'right') {
                        ix = pos.w - s.icon.w
                    }
                    this.icon_.SetXY(ix)
                }
            }
        },
        SetRange: function(min, max) {
            var is_h = this.type_ == 'h';
            this.dnd_.Restrict(is_h ? 'y' : 'x', true, min, max);
            $(this.id_).style.cursor = is_h ? 'n-resize' : 'e-resize'
        },
        GetSize: function() {
            return this.skin_[{
                v: 'w',
                h: 'h'
            }[this.type_]]
        },
        SetVisible: function(val) {
            var d = $(this.id_);
            if (!d) return;
            var fun = val ? 'RemoveClass' : 'AddClass';
            WCT.dom[fun](d, 'hide')
        }
    }
})();
WCT.Splitter.Hor = function() {
    this.type_ = 'h';
    WCT.Splitter.apply(this, arguments)
};
WCT.Splitter.Hor.prototype = new WCT.Splitter;
WCT.Splitter.Vert = function() {
    this.type_ = 'v';
    WCT.Splitter.apply(this, arguments)
};
WCT.Splitter.Vert.prototype = new WCT.Splitter;
WCT.Fader = function(uid) {
    this.uid_ = uid;
    var c = arguments[1] || {};
    this.config_ = {
        opacity: c.opacity || 0.3,
        bgcolor: c.bgcolor || '#000000',
        src: c.src != null ? c.src : 'about:blank',
        cursor: c.cursor || 'default',
        use_iframe: typeof c.iframe == 'boolean' ? c.iframe : true,
        x: c.x || 0,
        y: c.y || 0,
        w: c.w || '',
        h: c.h || '',
        z: typeof c.z == 'number' ? c.z : 1
    };
    this.connectors_ = arguments[2] || {};
    WCT.Fader.STORE[uid] = this
};
WCT.Fader.STORE = {};
WCT.Fader.Cleanup = function() {
    for (var id in WCT.Fader.STORE) {
        WCT.Fader.STORE[id].Destructor()
    }
};
WCT.Fader.prototype = (function() {
    function on_click_(ev) {
        var id = this.id.replace(/#cover$/, '');
        var me = WCT.Fader.STORE[id];
        if (!me) return;
        var c = me.connectors_;
        if (c.callback_f) c.callback_f.call(c.callback_s)
    };

    function on_fader_(frame) {
        var b = null;
        try {
            var wnd = frame.contentWindow;
            b = wnd.document.body
        } catch (e) {}
        if (!b) return;
        b.style.backgroundColor = this.config_.bgcolor
    };
    return {
        Destructor: function() {
            delete WCT.Fader.STORE[this.uid_];
            var f = $(this.uid_);
            if (f) f.parentNode.removeChild(f);
            var c = $(this.uid_ + '#cover');
            if (c) {
                c.onclick = null;
                c.ontouchend = null;
                c.parentNode.removeChild(c)
            }
            this.config_ = null;
            this.connectors_ = null
        },
        Create: function(dom) {
            if ($(this.uid_)) return;
            var o = this.config_;
            if (typeof o.w == 'number') o.w += 'px';
            if (typeof o.h == 'number') o.h += 'px';
            var android_def = PLATFORM.ANDROID && !BROWSER.CHROME;
            if (o.use_iframe) {
                var f = WCT.iframe.Create(o.src);
                f.id = this.uid_;
                f.className = 'wct-controls-fader frame';
                if (o.w) f.style.width = o.w || '100%';
                if (o.h) f.style.height = o.h || '100%';
                f.style.left = o.x + 'px';
                f.style.top = o.y + 'px';
                f.style.backgroundColor = '#FFFFFF';
                f.style.opacity = o.opacity;
                f.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=' + (o.opacity * 100) + ')';
                f.style.zIndex = o.z;
                if (!android_def) WCT.iframe.Load(f, on_fader_, this, dom, [f])
            }
            var c = $$('div');
            c.id = this.uid_ + '#cover';
            c.className = 'wct-controls-fader cover';
            c.style.left = o.x + 'px';
            c.style.top = o.y + 'px';
            c.style.width = o.w || '100%';
            c.style.height = o.h || '100%';
            c.style.overflow = 'hidden';
            c.style.position = 'absolute';
            if (!android_def) c.style.backgroundColor = '#FFFFFF';
            c.style.opacity = o.opacity;
            c.style.cursor = o.cursor;
            c.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=' + (o.opacity * 100) + ')';
            c.style.zIndex = o.z;
            dom.appendChild(c);
            if (this.connectors_.callback_f) {
                if (BROWSER.MOBILE) {
                    c.onclick = function() {};
                    c.ontouchend = on_click_
                } else {
                    c.onclick = on_click_
                }
            }
        },
        GetDim: function() {
            var el = $(this.uid_) || $(this.uid_ + '#cover');
            if (!el) return null;
            return {
                w: el.offsetWidth,
                h: el.offsetHeight
            }
        },
        SetZIndex: function(val) {
            var i = this.uid_;
            var f = $(i);
            if (f) f.style.zIndex = val;
            var c = $(i + '#cover');
            if (c) c.style.zIndex = val
        },
        Resize: function(dim) {
            var uid = this.uid_;
            var f = $(uid);
            if (f) {
                f.style.left = dim.x + 'px';
                f.style.top = dim.y + 'px';
                f.style.width = dim.w + 'px';
                f.style.height = dim.h + 'px'
            }
            var c = $(uid + '#cover');
            if (c) {
                c.style.left = dim.x + 'px';
                c.style.top = dim.y + 'px';
                c.style.width = dim.w + 'px';
                c.style.height = dim.h + 'px'
            }
        }
    }
})();
WCT.map = function() {
    this.data_ = arguments[0] || {};
    this.sid_ = arguments[1] || null
};
WCT.map.prototype = {
    Destructor: function() {
        this.data_ = null
    },
    Copy: function() {
        return new WCT.map(WCT.DeepCopy(this.data_), this.sid_)
    },
    Set: function() {
        if (arguments.length == 2) {
            if (arguments[0] === null) {
                var d = this.data_;
                var v = arguments[1];
                for (var i in d) {
                    d[i] = v
                }
            } else {
                this.data_[arguments[0] + ''] = arguments[1]
            }
        } else {
            this.data_ = arguments[0]
        }
    },
    Get: function() {
        var k = arguments[0];
        return typeof k == 'string' ? this.data_[k] : this.data_
    },
    HasKey: function(key) {
        return typeof this.data_[key] != 'undefined'
    },
    HasValue: function(value) {
        var d = this.data_;
        for (var i in d) {
            if (d[i] === value) return true
        }
        return false
    },
    Del: function() {
        var k = arguments[0];
        if (typeof k == 'string') {
            delete this.data_[k]
        } else if (k == null) {
            this.data_ = {}
        }
    },
    FromArray: function(arr) {
        var de = arguments[1];
        var fb = arguments[2];
        var hd = typeof de != 'undefined';
        var hf = typeof fb != 'undefined';
        var map = {};
        if (hd) {
            for (var i = arr.length - 1; i >= 0; i--) {
                var c = arr[i].split(de);
                map[c[0]] = hf ? (typeof c[1] != 'undefined' ? c[1] : fb) : c[1]
            }
        } else {
            for (var i = arr.length - 1; i >= 0; i--) {
                map[arr[i]] = hf ? fb : null
            }
        }
        this.data_ = map
    },
    InStore: function() {
        var sid = WCT.store.KEYS[this.sid_];
        if (!sid) return false;
        var s = WCT.store.Get(sid);
        return s != null
    },
    ToStore: function() {
        var sid = WCT.store.KEYS[this.sid_];
        if (!sid) return;
        var a = [];
        var d = this.data_;
        for (var i in d) {
            var v = d[i];
            var t = (typeof v).charAt(0);
            switch (t) {
                case 'b':
                    v = v ? 1 : 0;
                    break;
                case 'o':
                    v = '';
                    break
            }
            a.push(i + '=' + t + '=' + v)
        }
        WCT.store.Set(sid, a.join(','))
    },
    FromStore: function() {
        if (!arguments[0]) this.data_ = {};
        var sid = WCT.store.KEYS[this.sid_];
        if (!sid) return;
        var s = WCT.store.Get(sid);
        s = s ? s.split(',') : [];
        var d = this.data_;
        for (var i = s.length - 1; i >= 0; i--) {
            var c = s[i].split('=');
            var v = c[2];
            switch (c[1]) {
                case 'b':
                    v = WCT.ClampBoolean(v);
                    break;
                case 'n':
                    v = Number(v);
                    break;
                case 'o':
                    v = null;
                    break
            }
            d[c[0]] = v
        }
    },
    RemoveStore: function() {
        var sid = WCT.store.KEYS[this.sid_];
        if (sid) WCT.store.Remove(sid)
    }
};
WCT.Popup = function(uid, context, env, callbacks) {
    this.uid_ = uid;
    this.context_ = context;
    this.env_ = env;
    this.callbacks_ = callbacks;
    var cpa = arguments[4] || {};
    var cfg = this.config_ || {};
    this.config_ = cfg;
    cfg.resource_path = cfg.resource_path || '';
    cfg.rtl = !!cfg.rtl;
    cfg.z = cfg.z || 0;
    cfg.close_on_cover_click = !!cfg.close_on_cover_click;
    for (var k in cpa) {
        if (typeof cfg[k] != 'undefined') cfg[k] = cpa[k]
    }
    if (context) {
        var rp = context.ToAbsPath('mgr:' + (cfg.resource_path || ''));
        this.skin_ = WCT.skin.Merge(this.default_skin_ || WCT.Popup.SKIN, arguments[5]);
        WCT.skin.ExtendUrls(this.skin_, rp);
        this.default_skin_ = null
    }
    this.dnd_ = null;
    this.fader_ = null;
    this.moved_ = false;
    this.buttons_ = [];
    this.b_skins_ = {}
};
WCT.ExtendObject(WCT.Popup, {
    SKIN: {
        background_color: '#FFFFFF',
        w: 390,
        h: 415,
        frame: {
            w_w: 130,
            e_w: 20,
            n_h: 36,
            s_h: 36,
            nw: {
                image: {
                    id: 's.png',
                    x: -204,
                    y: -387
                }
            },
            n: {
                image: {
                    id: 'sh.png',
                    x: 0,
                    y: -160,
                    repeat: 'x'
                }
            },
            ne: {
                image: {
                    id: 's.png',
                    x: -344,
                    y: -387
                }
            },
            w: {
                background_color: '#999999',
                w: 2
            },
            e: {
                background_color: '#999999',
                w: 2
            },
            sw: {
                image: {
                    id: 's.png',
                    x: -204,
                    y: -433
                }
            },
            s: {
                image: {
                    id: 'sh.png',
                    x: 0,
                    y: -206,
                    repeat: 'x'
                }
            },
            se: {
                image: {
                    id: 's.png',
                    x: -344,
                    y: -433
                }
            }
        },
        title: {
            text_color: '#333333',
            font_family: 'Arial,Helvetica,sans-serif',
            font_size: 15,
            font_weight: 'bold',
            x: 10,
            y: 10
        },
        text: {
            background_color: '#FFFFFF',
            text_color: '#000000',
            font_family: 'Arial,Helvetica,sans-serif',
            font_size: 12,
            line_height: 34,
            outer_spacing_l: 20,
            outer_spacing_r: 5
        },
        button: {
            background_color: '#EEEEEE',
            background_color_h: '#FBE5AE',
            background_color_a: '#F0AB00',
            background_color_d: '#EEEEEE',
            text_color: '#333333',
            text_color_h: '#333333',
            text_color_a: '#333333',
            text_color_d: '#333333',
            border_width: 1,
            border_color: '#B4B4B4',
            border_color_h: '#B4B4B4',
            border_color_a: '#B4B4B4',
            border_color_d: '#B4B4B4',
            padding_left: 2,
            padding_right: 2,
            font_weight: 'bold',
            font_size: 12,
            font_family: 'Arial,Helvetica,sans-serif',
            h: 20
        }
    },
    GetContentDim: function(skin) {
        var o = {
            l: 0,
            r: 0,
            t: 0,
            b: 0,
            w: 0,
            h: 0
        };
        o.l = [skin.w_w || 0];
        if (skin.nw && skin.nw.w) o.l.push(skin.nw.w);
        if (skin.w && skin.w.w) o.l.push(skin.w.w);
        if (skin.sw && skin.sw.w) o.l.push(skin.sw.w);
        o.l = o.l.min();
        o.r = [skin.e_w || 0];
        if (skin.ne && skin.ne.w) o.r.push(skin.ne.w);
        if (skin.e && skin.e.w) o.r.push(skin.e.w);
        if (skin.se && skin.se.w) o.r.push(skin.se.w);
        o.r = o.r.min();
        o.t = [skin.n_h || 0];
        if (skin.nw && skin.nw.h) o.t.push(skin.nw.h);
        if (skin.n && skin.n.h) o.t.push(skin.n.h);
        if (skin.ne && skin.ne.h) o.t.push(skin.ne.h);
        o.t = o.t.min();
        o.b = [skin.s_h || 0];
        if (skin.sw && skin.sw.h) o.b.push(skin.sw.h);
        if (skin.s && skin.s.h) o.b.push(skin.s.h);
        if (skin.se && skin.se.h) o.b.push(skin.se.h);
        o.b = o.b.min();
        o.w = o.l + o.r;
        o.h = o.t + o.b;
        return o
    },
    CreateFrame: function(dom, skin, cfg) {
        skin = WCT.DeepCopy(skin);
        if (skin.w_w == null) skin.w_w = 0;
        if (skin.e_w == null) skin.e_w = 0;
        if (skin.n_h == null) skin.n_h = 0;
        if (skin.s_h == null) skin.s_h = 0;
        if (cfg.w == null) cfg.w = 0;
        if (cfg.h == null) cfg.h = 0;
        var ret = {};
        var lst = ['nw', 'n', 'ne', 'w', 'e', 'sw', 's', 'se'];
        for (var i = 0, x = 0, y = 0, id = null; id = lst[i++];) {
            var s = skin[id];
            if (!s) continue;
            switch (id) {
                case 'nw':
                    s.p = {
                        x: 0,
                        y: 0,
                        w: skin.w_w,
                        h: skin.n_h
                    };
                    break;
                case 'n':
                    x = skin.nw ? skin.nw.p.w : 0;
                    s.p = {
                        x: x,
                        y: y,
                        w: cfg.w - skin.w_w - skin.e_w,
                        h: skin.n_h
                    };
                    break;
                case 'ne':
                    x += skin.n ? skin.n.p.w : 0;
                    s.p = {
                        x: x,
                        y: y,
                        w: skin.e_w,
                        h: skin.n_h
                    };
                    break;
                case 'w':
                    x = 0;
                    y = skin.ne ? skin.ne.p.h : 0;
                    s.p = {
                        x: x,
                        y: y,
                        w: s.w || skin.w_w,
                        h: cfg.h - skin.n_h - skin.s_h
                    };
                    break;
                case 'e':
                    var w = s.w || skin.e_w;
                    x += cfg.w - w;
                    s.p = {
                        x: x,
                        y: y,
                        w: w,
                        h: skin.w ? skin.w.p.h : 0
                    };
                    break;
                case 'sw':
                    x = 0;
                    y += skin.e ? skin.e.p.h : 0;
                    s.p = {
                        x: x,
                        y: y,
                        w: skin.w_w,
                        h: skin.s_h
                    };
                    break;
                case 's':
                    x += skin.sw ? skin.sw.p.w : 0;
                    s.p = {
                        x: x,
                        y: y,
                        w: skin.n ? skin.n.p.w : 0,
                        h: skin.s_h
                    };
                    break;
                case 'se':
                    x += skin.s ? skin.s.p.w : 0;
                    s.p = {
                        x: x,
                        y: y,
                        w: skin.e_w,
                        h: skin.s_h
                    };
                    break
            }
            var d = $(cfg.id + id) || $$('div', cfg.doc);
            d.className = 'area-' + id;
            if (cfg.resizable && !cfg.mini) {
                d.style.cursor = id + '-resize';
                d.onmousedown = cfg.onmousedown || null;
                if (cfg.controls) cfg.controls.push(d)
            }
            if (s.p.w < 0) s.p.w = 0;
            if (s.p.h < 0) s.p.h = 0;
            WCT.skin.ApplyPosition(d, s.p);
            if (s.image) WCT.skin.ApplyBgImage(d, s.image);
            if (s.background_color) d.style.backgroundColor = s.background_color;
            if (!d.id) {
                d.id = cfg.id + id;
                dom.appendChild(d)
            }
            ret[id] = d
        }
        return ret
    },
    CreateTitle: function(dom, skin, cfg) {
        skin = WCT.DeepCopy(skin);
        skin.w = cfg.w;
        skin.tooltip = cfg.title || '';
        if (skin.x) skin.w -= skin.x * 2;
        if (cfg.rtl) skin.x = WCT.skin.ConvertXToRtl(skin.x);
        if (skin.padding) delete skin.padding;
        if (skin.padding_top) delete skin.padding_top;
        if (skin.padding_bottom) delete skin.padding_bottom;
        var d = $$('div', cfg.doc);
        d.id = cfg.id + 'title';
        d.className = 'header';
        WCT.skin.ApplyPosition(d, skin);
        WCT.skin.ApplyTextFormats(d, skin);
        WCT.skin.ApplyPadding(d, skin);
        WCT.dom.NotSelectable(d);
        d.style.overflow = 'hidden';
        d.style.textOverflow = 'ellipsis';
        d.style.whiteSpace = 'nowrap';
        if (skin.h) d.style.lineHeight = skin.h + 'px';
        if (cfg.rtl) d.style.direction = 'rtl';
        WCT.SetNodeText(d, cfg.title || '', cfg.doc);
        dom.appendChild(d);
        if (cfg.movable && cfg.onmousedown) {
            d.style.cursor = 'pointer';
            d.onmousedown = cfg.onmousedown;
            if (cfg.controls) cfg.controls.push(d)
        }
        return d
    },
    OnDnd: function() {
        this.moved_ = true
    }
});
WCT.Popup.prototype = (function() {
    function calc_dim_(dom) {
        var dim = WCT.dom.GetPosition(dom);
        dim.x = dim.left;
        dim.y = dim.top;
        delete dim.left;
        delete dim.top;
        if (WCT.dom.GetNodeName(dom) == 'body') {
            dim.w = WCT.dom.GetWindowWidth();
            dim.h = WCT.dom.GetWindowHeight()
        } else {
            dim.w = dom.offsetWidth;
            dim.h = dom.offsetHeight
        }
        return dim
    };

    function calc_popup_pos_(dim) {
        var s = arguments[1] || this.skin_;
        var p = {
            w: s.w || 0,
            h: s.h || 0
        };
        p.x = Math.max(0, (dim.w - p.w) >> 1);
        p.y = Math.max(0, (dim.h - p.h) >> 1);
        return p
    };

    function calc_content_pos_(dim) {
        var s = arguments[1] || this.skin_;
        var p = WCT.Popup.GetContentDim(s.frame);
        p.x = p.l;
        p.y = p.t;
        p.w = Math.max(0, dim.w - p.w);
        p.h = Math.max(0, dim.h - p.h);
        return p
    };

    function create_covers_(dom, pos) {
        var id = this.uid_ + '#';
        var sk = this.skin_;
        var cf = this.config_;
        var cb = cf.close_on_cover_click ? {
            callback_f: this.close_,
            callback_s: this
        } : null;
        var f = new WCT.Fader(id, {
            src: '',
            opacity: 0.50,
            iframe: true,
            bgcolor: sk.background_color,
            x: pos.x,
            y: pos.y,
            w: pos.w,
            h: pos.h,
            z: cf.z
        }, cb, sk);
        f.Create(dom);
        this.fader_ = f
    };

    function create_popup_(dom, pos) {
        var cfg = this.config_;
        var id = this.uid_ + '#';
        var sk = this.skin_;
        var z = cfg.z;
        var m = $$('div');
        m.id = id + 'm';
        m.className = 'wct-controls-popup';
        m.tabIndex = 0;
        WCT.skin.ApplyPosition(m, pos);
        if (z) m.style.zIndex = z;
        WCT.event.Observe('keydown', function(e) {
            if (e.stopPropagation) e.stopPropagation()
        }, m);
        dom.appendChild(m);
        id += 'm#';
        WCT.Popup.CreateFrame(m, sk.frame, {
            id: id,
            w: pos.w,
            h: pos.h
        });
        var t = WCT.Popup.CreateTitle(m, sk.title, {
            id: id,
            w: pos.w,
            rtl: cfg.rtl
        });
        var d = new WCT.dnd(m, t);
        d.SetCallback('onbegin', WCT.Popup.OnDnd, this);
        this.dnd_ = d;
        return m
    };

    function create_content_(dom, pos) {
        var sk = this.skin_;
        var d = $$('div');
        d.id = this.uid_ + '#m#content';
        d.className = 'content';
        if (this.config_.rtl) d.style.direction = 'rtl';
        WCT.skin.ApplyPosition(d, pos);
        WCT.skin.ApplyTextFormats(d, sk.text);
        dom.appendChild(d);
        return d
    };

    function create_buttons_(dom, pos) {
        var id = this.uid_ + '#m#';
        var sk = this.skin_.button;
        var o = (pos.b - (sk.h || 0)) >> 1;
        var p = {
            x: -pos.r,
            y: pos.t + pos.h + o,
            w: pos.w,
            h: Math.max(0, pos.b - o)
        };
        var d = $$('div');
        d.id = id + 'buttons';
        d.className = 'buttons';
        WCT.skin.ApplyPosition(d, p);
        dom.appendChild(d);
        var btn = this.buttons_;
        for (var i = btn.length, b = null; b = btn[--i];) {
            this.create_button_(d, b)
        }
    };
    return {
        Destructor: function() {
            this.context_ = null;
            this.env_ = null;
            this.callbacks_ = null;
            this.config_ = null;
            this.skin_ = null;
            this.default_skin_ = null;
            if (this.dnd_) {
                this.dnd_.Destructor();
                this.dnd_ = null
            }
            if (this.buttons_) {
                var btn = this.buttons_;
                var id = this.uid_ + '#m#buttons#';
                for (var i = btn.length, b = null; b = btn[--i];) {
                    var bd = $(id + b.id);
                    if (!bd) continue;
                    bd.onclick = null;
                    bd.onmouseover = null;
                    bd.onmouseout = null;
                    bd.onmousedown = null;
                    bd.onmouseup = null
                }
                this.buttons_ = null
            }
            this.b_skins_ = null;
            if (this.fader_) {
                this.fader_.Destructor();
                this.fader_ = null
            }
            var m = $(this.uid_ + '#m');
            if (m) m.parentNode.removeChild(m)
        },
        Resize: function(dim) {
            var f = this.fader_;
            if (f) f.Resize(dim);
            if (!this.moved_) {
                var m = $(this.uid_ + '#m');
                if (m) {
                    var s = this.skin_;
                    var x = Math.max(0, (dim.w - (s.w || 0)) >> 1);
                    var y = Math.max(0, (dim.h - (s.h || 0)) >> 1);
                    m.style.left = x + 'px';
                    m.style.top = y + 'px'
                }
            }
        },
        SetWH: function(w, h) {
            var sk = WCT.DeepCopy(this.skin_);
            var m = $(this.uid_ + '#m');
            var dim = calc_dim_.call(this, m.parentNode);
            sk.w = w;
            sk.h = h;
            var ppos = calc_popup_pos_.call(this, dim, sk);
            var cpos = calc_content_pos_.call(this, ppos, sk);
            var c = $(this.uid_ + '#m#content');
            WCT.skin.ApplyPosition(c, cpos, true);
            var b = $(this.uid_ + '#m#buttons');
            var skb = sk.button;
            var o = (cpos.b - (skb.h || 0)) >> 1;
            var p = {
                x: -cpos.r,
                y: cpos.t + cpos.h + o,
                w: cpos.w,
                h: Math.max(0, cpos.b - o)
            };
            WCT.skin.ApplyPosition(b, p, true);
            WCT.Popup.CreateFrame(m, sk.frame, {
                id: this.uid_ + '#m#',
                w: w,
                h: h
            })
        },
        Create: function() {
            var dom = arguments[0] || document.body;
            var dim = calc_dim_.call(this, dom);
            var ppos = calc_popup_pos_.call(this, dim);
            var cpos = calc_content_pos_.call(this, ppos);
            create_covers_.call(this, dom, dim);
            var pdom = create_popup_.call(this, dom, ppos);
            var cdom = create_content_.call(this, pdom, cpos);
            create_buttons_.call(this, pdom, cpos);
            this.create_content_(cdom, cpos);
            pdom.focus()
        },
        SetTitle: function(title) {
            var d = $(this.uid_ + '#m#title');
            if (d) {
                WCT.SetNodeText(d, title);
                d.setAttribute('title', title)
            }
        },
        SetClass: function(cls) {
            var d = $(this.uid_ + '#m');
            if (d) d.className += ' ' + cls
        },
        SetZIndex: function(z) {
            if (this.config_.z == z) return;
            this.config_.z = z;
            var f = this.fader_;
            if (f) f.SetZIndex(z);
            var m = $(this.uid_ + '#m');
            if (m) m.style.zIndex = z
        },
        close_: function() {
            var cb = this.callbacks_;
            this.Destructor();
            if (cb.callback_f) cb.callback_f.call(cb.callback_s, 'close')
        },
        create_content_: function(dom, pos) {},
        create_button_: function(dom, button) {
            var id = this.uid_ + '#m#buttons#' + button.id;
            var sk = this.skin_.button;
            if (arguments[2]) {
                sk = arguments[2];
                this.b_skins_[button.id] = sk
            }
            var bd = WCT.dom.CreateInputElement('button', id);
            bd.id = id;
            if (typeof sk.x == 'number' || typeof sk.y == 'number') {
                bd.style.position = 'absolute';
                bd.style.left = (sk.x || 0) + 'px';
                bd.style.top = (sk.y || 0) + 'px'
            } else {
                var f = 'right';
                var m = 'marginRight';
                if (this.config_.rtl) {
                    f = 'left';
                    m = 'marginLeft'
                }
                bd.style.cssFloat = f;
                bd.style.styleFloat = f;
                bd.style[m] = '3px'
            }
            WCT.skin.ApplyTextFormats(bd, sk);
            WCT.skin.ApplyBorder(bd, sk);
            WCT.skin.ApplyPadding(bd, sk);
            var en = this.env_;
            if (sk.h) bd.style.height = sk.h + 'px';
            bd.value = en.Localize(button.textkey);
            dom.appendChild(bd);
            var cb = this.on_button_.bind(this);
            bd.onclick = cb;
            bd.onmouseover = cb;
            bd.onmouseout = cb;
            bd.onmousedown = cb;
            bd.onmouseup = cb;
            return bd
        },
        on_button_: function(ev) {
            ev = WCT.event.Standardize(ev);
            var ta = ev.target;
            var id = ta.id.match(/#m#buttons#(.+?)$/);
            id = id ? id[1] : null;
            if (!id) return;
            var m = '';
            switch (ev.type) {
                case 'mousedown':
                    m = '_a';
                    break;
                case 'mouseup':
                case 'mouseover':
                    m = '_h';
                    break
            }
            var sk = this.b_skins_[id] || this.skin_.button;
            var tc = sk['text_color' + m] || sk.text_color;
            var bc = sk['background_color' + m] || sk.background_color;
            var oc = sk['border_color' + m] || sk.border_color;
            if (tc) ta.style.color = tc;
            if (bc) ta.style.backgroundColor = bc;
            if (oc) ta.style.borderColor = oc;
            if (ev.type == 'click') this.on_button_click_(id)
        },
        on_button_click_: function(id) {
            if (id == 'close') {
                this.close_()
            } else {
                var cb = this.callbacks_;
                if (cb.callback_f) cb.callback_f.call(cb.callback_s, id)
            }
        }
    }
})();
WCT.SharePopup = function(uid, context, env, callbacks) {
    this.config_ = {
        sel: null,
        url: null
    };
    this.default_skin_ = WCT.skin.Merge(WCT.Popup.SKIN, WCT.SharePopup.SKIN, null, true);
    WCT.Popup.apply(this, arguments);
    var s = arguments[5] || {};
    if (s.button) {
        this.skin_.button = WCT.DeepCopy(s.button)
    }
    this.buttons_ = [{
        id: 'close',
        textkey: 'CLOSE'
    }];
    this.first_ = true
};
WCT.SharePopup.prototype = new WCT.Popup;
WCT.SharePopup.SKIN = {
    input: {
        font_family: 'Arial,Helvetica,sans-serif',
        font_size: 12,
        text_color: "#000000",
        line_height: 14,
        h: 70
    }
};
WCT.ExtendObject(WCT.SharePopup.prototype, (function() {
    function get_qr_code_(wh) {
        var u = this.config_.url;
        var q = WCT.QrCode.GenerateHtml(u, wh);
        if (!q) {
            u = u.split('#');
            u = u[0].split('?');
            var a = {
                show: 1
            };
            var p = u[1].split('&');
            var n = [];
            for (var i = p.length - 1; i >= 0; i--) {
                var c = p[i].split('=');
                if (a[c[0]]) n.push(p[i])
            }
            u = u[0] + '?' + n.join('&');
            q = WCT.QrCode.GenerateHtml(u, wh)
        }
        return q
    };

    function on_mailto_() {
        var e = this.env_;
        var c = this.config_;
        var u = c.url;
        var d = DATA.GetS(c.sel + ':entity.txt');
        var s = e.Localize('SEND_CONTENT_SUBJECT');
        var t = e.Localize('SEND_CONTENT_TEMPLATE').replace(/\[SEND_CAPTION\]/, d.caption).replace(/\[SEND_LINK\]/, u);
        t = encodeURIComponent(t).replace(/%5Cn/g, '%0D%0A');
        remove_mailto_.call(this);
        var i = WCT.iframe.Create('mailto:?subject=' + encodeURIComponent(s) + '&body=' + t);
        i.id = this.id_ + '#iframe';
        i.style.width = '10px';
        i.style.height = '10px';
        document.body.appendChild(i);
        WCT.SetTimeout(remove_mailto_, 10, this)
    };

    function remove_mailto_() {
        var i = $(this.id_ + '#iframe');
        if (i) i.parentNode.removeChild(i)
    };
    return {
        Destructor: function() {
            remove_mailto_.call(this);
            SKIN.textcontrol.Cleanup(this.id_ + '#m#buttons#mailto');
            SKIN.textcontrol.Cleanup(this.id_ + '#m#buttons#close');
            WCT.Popup.prototype.Destructor.call(this)
        },
        Create: function(title) {
            WCT.Popup.prototype.Create.call(this);
            this.SetTitle(title)
        },
        create_content_: function(dom, pos) {
            var e = this.env_;
            var s = this.skin_;
            var v = {
                e1_mt: 10,
                e1_mb: 5,
                e1_h: 20,
                e2_h: s.input.h || 70,
                e3_mt: 10,
                e3_mb: 5
            };
            var rtl = this.config_.rtl;
            var l = (rtl ? s.text.outer_spacing_r : s.text.outer_spacing_l) || 0;
            var r = (rtl ? s.text.outer_spacing_l : s.text.outer_spacing_r) || 0;
            var e1 = $$('div');
            e1.style.margin = v.e1_mt + 'px ' + r + 'px ' + v.e1_mb + 'px ' + l + 'px';
            e1.style.height = v.e1_h + 'px';
            e1.style.lineHeight = v.e1_h + 'px';
            e1.appendChild($$2(e.Localize('URL_OF_CURRENT_PAGE') + ':'));
            dom.appendChild(e1);
            var e2 = $$('textarea');
            e2.style.lineHeight = '';
            WCT.skin.ApplyTextFormats(e2, s.input);
            if (!PLATFORM.IOS) e2.setAttribute('readOnly', 'readOnly');
            e2.style.position = 'relative';
            e2.style[rtl ? 'right' : 'left'] = (rtl ? r : l) + 'px';
            e2.style.width = pos.w - l - r - 3 + 'px';
            e2.style.height = v.e2_h + 'px';
            e2.value = this.config_.url;
            e2.onclick = function() {
                if (PLATFORM.IOS) {
                    this.setSelectionRange(0, 9999)
                } else {
                    this.select()
                }
            };
            e2.onkeydown = function() {
                this.select();
                if (PLATFORM.IOS) return false
            };
            e2.onkeyup = function() {
                this.select();
                if (PLATFORM.IOS) return false
            };
            dom.appendChild(e2);
            var t = v.e1_mt + v.e1_mb + v.e1_h + v.e2_h + v.e3_mt;
            var wh = pos.h - t - v.e3_mb;
            wh = Math.min(Math.floor(pos.w / 4 * 3), wh);
            var qr = get_qr_code_.call(this, wh) || e.Localize('QR_URL_TOO_BIG');
            var e3 = $$('div');
            e3.style.position = 'absolute';
            e3.style[rtl ? 'right' : 'left'] = (rtl ? r : l) + 'px';
            e3.style.top = t + 'px';
            e3.style.width = wh + 'px';
            e3.style.height = wh + 'px';
            e3.innerHTML = qr;
            dom.appendChild(e3);
            var b = SKIN.textcontrol.Add({
                id: this.id_ + '#m#buttons#mailto',
                skin: s.button,
                dom: dom,
                onexec: on_mailto_,
                scope: this,
                text: e.Localize('SHARE_BY_MAIL')
            });
            b.style[rtl ? 'right' : 'left'] = (rtl ? r : l) + wh + 5 + 'px';
            b.style.top = t + 'px'
        },
        create_button_: function(dom, button) {
            var e = this.env_;
            var s = this.skin_.button;
            var b = SKIN.textcontrol.Add({
                id: this.id_ + '#m#buttons#' + button.id,
                skin: s,
                dom: dom,
                onexec: this.Destructor,
                scope: this,
                text: e.Localize(button.textkey)
            });
            var rtl = this.config_.rtl;
            var f = rtl ? 'left' : 'right';
            b.style.position = 'relative';
            b.style.cssFloat = f;
            b.style.styleFloat = f;
            if (typeof s.inner_spacing_r != 'undefined') {
                b.style['margin' + (rtl ? 'Right' : 'Left')] = s.inner_spacing_r + 'px'
            }
            if (this.first_ && typeof s.outer_spacing_r != 'undefined') {
                b.style['margin' + (rtl ? 'Left' : 'Right')] = s.outer_spacing_r + 'px';
                this.first_ = false
            }
        }
    }
})());
WCT.AdaptableClasses = function(url) {
    this.xml_ = null;
    this.init_(url)
};
WCT.ExtendObject(WCT.AdaptableClasses, {
    CACHE: {},
    CACHE_THRESHOLD: 3000,
    Cleanup: function() {
        this.CACHE = {}
    },
    GetIcon: function(data, context) {
        var n = WCT.AdaptableClasses;
        var t = (new Date()).getTime();
        var c = n.CACHE[data.tclass];
        var x = null;
        if (c && t - c.t <= n.CACHE_THRESHOLD) {
            x = c.x;
            c.t = t
        } else {
            var u = context.ToAbsPath('adaptable!classes:' + data.tclass + '.xml');
            var h = new WCT.AdaptableClasses(u);
            x = h.GetXML(data);
            n.CACHE[data.tclass] = {
                t: t,
                x: x
            };
            h.Destructor()
        }
        x = x && x[data.sub_type] || null;
        return x && x.id ? WCT.DeepCopy(x, {
            id: context.ToAbsPath(x.id)
        }) : null
    }
});
WCT.AdaptableClasses.prototype = {
    Destructor: function() {
        this.xml_ = null
    },
    GetXML: function() {
        return this.xml_
    },
    init_: function(url) {
        var xml = XHR.GetS(url, 'XML');
        xml = xml ? xml.childNodes[BROWSER.IE ? 1 : 0] : null;
        if (!xml) return;
        var specs = null;
        try {
            specs = xml.getElementsByTagName('Specialization')
        } catch (e) {}
        if (!specs || !specs.length) return null;
        xml = {};
        for (var i = 0, s = null; s = specs[i++];) {
            var name = s.getAttribute('name');
            var icon = Number(s.getAttribute('icon'));
            if (!isNaN(icon)) {
                xml[name] = {
                    id: 'adaptable!classes:icons.png',
                    x: -icon * 16,
                    y: 0,
                    w: 16,
                    h: 16
                }
            }
        }
        this.xml_ = xml
    }
};
var TRACKING = {
    DELIMITER: {
        lesson_id: ':',
        master: ',',
        objectives: '#',
        objective_parts: '|',
        visited_slides: '-',
        visited_tourstop_ranges: '~',
        visited_tourstop_groups: ';',
        scorm_short_id: '_'
    },
    AGENT_UID_PREFIX: 'TZA_',
    SCORABLE_LESSONS: {
        uebung: true,
        test: true
    },
    FN_COLL_REFRESH: null,
    Cleanup: function() {
        this.FN_COLL_REFRESH = null
    },
    PagesetCompleted: function(pages) {
        for (var sid in pages) {
            if (!pages[sid]) return false
        }
        return true
    },
    PagesetCountVisited: function(pages) {
        var c = 0;
        for (var sid in pages) {
            if (pages[sid]) c++
        }
        return c
    },
    Init: function(sco, manager_uid, callback, scope) {
        var cfg = null;
        switch (sco.type) {
            case HANDLER.MODE.lesson:
                cfg = DATA.GetConfig(sco.tclass, sco.uid, sco.mode);
                break;
            case HANDLER.MODE.book:
            case HANDLER.MODE.library:
                cfg = DATA.GetConfig(sco.tclass, sco.uid);
                break
        }
        if (!cfg) {
            callback.call(scope);
            return
        }
        var ct = this.central;
        var cfg_be = cfg.tracking_backend;
        var cfg_auto = cfg_be == 'auto';
        var cfg_scorm_12 = cfg_be == 'scorm_12';
        var cfg_scorm_2004 = cfg_be == 'scorm_2004';
        var cfg_scorm_allowed = cfg_auto || cfg_be == 'scorm_auto' || cfg_scorm_12 || cfg_scorm_2004;
        var cfg_aicc_allowed = cfg_auto || cfg_be == 'aicc';
        var cfg_coll_allowed = cfg_auto || cfg_be == 'collaborator';
        var be = this.backend;
        var aicc = cfg_aicc_allowed ? be.aicc.FindAPI() : null;
        var scorm = !aicc && cfg_scorm_allowed ? be.scorm.FindAPI(window) : null;
        var coll = !aicc && !scorm && cfg_coll_allowed ? be.collaborator.Available() : null;
        if (sco.type == HANDLER.MODE.library && (aicc || scorm)) {
            callback.call(scope);
            return
        }
        ct.AddAgent(manager_uid);
        MANAGER.SetCentralTracker(ct);
        var ct_cfg = {
            T2_version: cfg.version,
            debug_mode: cfg.tracking_debug_mode,
            cookie_backend: cfg_be == 'cookie' || cfg_auto && !aicc && !scorm && !coll,
            scorm_objective_tracking: cfg.scorm_objective_tracking,
            scorm_only_one_commit: cfg.scorm_only_one_commit,
            scorm_decide_passed: cfg.scorm_decide_passed,
            scorm_completed_restart_warning: cfg.scorm_suspend_resume == 'warn',
            scorm_ignore_bookmark: cfg.scorm_suspend_resume == 'disabled',
            scorm_safe_mode: cfg.scorm_safe_mode,
            scorm_location: cfg.scorm_location,
            scorm_use_original_max: cfg.scorm_scoring == 'scoring_points',
            scorm_score_percentage100: cfg.scorm_scoring == 'scoring_percentage',
            scorm_score_precision: cfg.scorm_score_precision,
            scorm_nav_request: cfg.scorm_nav_request,
            aicc_objective_tracking: cfg.aicc_objective_tracking,
            aicc_decide_passed: cfg.aicc_decide_passed,
            aicc_completed_restart_warning: cfg.aicc_suspend_resume == 'warn',
            aicc_ignore_bookmark: cfg.aicc_suspend_resume == 'disabled',
            aicc_score_precision: cfg.aicc_score_precision,
            aicc_crossdomain: cfg.aicc_crossdomain,
            restart: cfg.startMode != 'continue',
            assignment_id: cfg.assignmentId || null,
            detail_tracking: cfg.tracking_collaborator_detail
        };
        var info = {};
        if (coll) {
            var cbe = be.collaborator.GetCollaboratorBackendName(coll);
            ct.SetBackend(cbe);
            this.SetCollRefresh();
            info.sco = {}
        } else if (aicc || scorm || ct_cfg.cookie_backend) {
            var be_name = 'scorm';
            if (aicc) {
                be_name = 'aicc';
                ct.SetBackend('aicc');
                DATA.OmitRequest('.server')
            } else if (scorm) {
                if (scorm['2004'] && !cfg_scorm_12) {
                    ct.SetBackend('scorm2004', scorm)
                } else if (scorm['12'] && !cfg_scorm_2004) {
                    ct.SetBackend('scorm12', scorm)
                }
                DATA.OmitRequest('.server')
            }
            switch (sco.type) {
                case HANDLER.MODE.lesson:
                    info = this.InitLessonSco(sco, be_name);
                    break;
                case HANDLER.MODE.book:
                    info = this.InitBookSco(sco, cfg, be_name);
                    break;
                case HANDLER.MODE.library:
                    ct_cfg.objectives_standalone = true;
                    break
            }
        }
        ct.Init(info.sco || sco, info.obj || [], ct_cfg, callback, scope)
    },
    InitBook: function(book, backend) {
        var tp = book.pageset.length;
        if (tp > 0) {
            var c = DATA.GetConfig('book', book.uid);
            var p = {};
            for (var i = tp - 1; i >= 0; i--) {
                p[book.pageset[i]] = false
            }
            var count = 0;
            for (var id in p) count++;
            return {
                tclass: 'book',
                uid: book.uid,
                title: c.caption,
                description: c.description,
                pages: p,
                total_pages: count,
                track_completion: c[backend + '_tracking'] != 'none'
            }
        }
        return null
    },
    InitLesson: function(lesson, backend) {
        var c = DATA.GetConfig('project', lesson.uid, lesson.mode);
        var st = c[backend + '_tracking'];
        return {
            tclass: 'project',
            uid: lesson.uid,
            mode: lesson.mode,
            title: c.caption,
            description: c.description,
            track_completion: st != 'none',
            track_score: st == 'score' || st == 'incomplete_instead_failed',
            track_completion_as_score: st == 'completion_as_score',
            track_incomplete_instead_failed: st == 'incomplete_instead_failed'
        }
    },
    InitLessonSco: function(sco, backend) {
        var l = this.InitLesson(sco, backend);
        return {
            sco: {
                tclass: 'project',
                uid: sco.uid,
                mode: sco.mode
            },
            obj: [l]
        }
    },
    InitBookSco: function(sco, cfg, backend) {
        var info = {
            sco: {
                tclass: 'book',
                uid: sco.uid
            },
            obj: []
        };
        var tcfg = {
            book_group: cfg.book_show_book_group,
            cdoc: cfg.book_show_cdoc,
            project: cfg.book_show_project
        };
        var toc = new Toc(sco.tclass, sco.uid, tcfg);
        var books = toc.GetBooks();
        var projects = toc.GetProjects();
        for (var uid in books) {
            var b = this.InitBook(books[uid], backend);
            if (b) info.obj.push(b)
        }
        for (var uid in projects) {
            var p = projects[uid];
            for (var i = 0, a = null; a = p.assets[i]; i++) {
                if (a.type == DATA.LESSON_TOUR_KEY && DATA.LESSON_MODE[a.mode]) {
                    var l = this.InitLesson({
                        uid: uid,
                        mode: a.mode
                    }, backend);
                    info.obj.push(l)
                }
            }
        }
        window.BOOK_SCO_TOC = toc;
        return info
    },
    GetCollRefresh: function() {
        var n = 'trainer_learner_view_refresh';
        var f = null;
        try {
            if (top[n]) {
                f = top[n]
            } else if (window.opener && window.opener[n]) {
                f = window.opener[n]
            }
        } catch (e) {}
        return f
    },
    SetCollRefresh: function() {
        if (window.COLL_REFRESH) {
            this.FN_COLL_REFRESH = window.COLL_REFRESH;
            window.COLL_REFRESH = null
        } else {
            var n = 'trainer_learner_view_refresh';
            var f = null;
            try {
                if (top[n]) {
                    f = top[n]
                } else if (window.opener && window.opener[n]) {
                    f = window.opener[n]
                }
            } catch (e) {}
            this.FN_COLL_REFRESH = f
        }
    },
    RefreshCollaborator: function() {
        try {
            this.FN_COLL_REFRESH && this.FN_COLL_REFRESH()
        } catch (e) {}
    }
};
(function() {
    function create_central_ids_(objectives) {
        var uids = {};
        var d = TRACKING.DELIMITER.lesson_id;
        for (var i = 0, o = null; o = objectives[i++];) {
            var id = o.uid + (o.mode ? d + o.mode : '');
            uids[id] = 1;
            o.central_id = id;
            o.central_id_string = o.tclass + '!' + o.uid + (o.mode ? ':' + o.mode : '');
            if (o.tclass == 'book' && o.pages) {
                for (var sid in o.pages) {
                    uids[sid] = 1
                }
            }
        }
        var map = WCT.uid.CreateUniqueStringMap(uids);
        for (var i = 0, o = null; o = objectives[i++];) {
            o.central_short_id = map[o.central_id]
        }
        return {
            uid: map,
            shortcut: WCT.ReverseObject(map)
        }
    };

    function find_objective_(id) {
        if (this.initialized_) {
            var o = this.objectives_;
            for (var i = 0, c = null; c = o[i++];) {
                if (c.central_id_string == id) return c
            }
        }
        return null
    };

    function decide_completion_() {
        var s = this.sco_;
        if (!s) return;
        var objs = this.objectives_;
        var comp = null;
        var pass = {
            passed: 0,
            completed: 0,
            total: 0
        };
        var is_scorm = this.backend_type_ == 'scorm' || this.backend_type_ == 'aicc';
        var nbr_comp = 0;
        var pro = {
            progress: 0,
            total: 0
        };
        for (var i = 0, o = null; o = objs[i++];) {
            if (!is_scorm || o.track_completion !== false) {
                if (o.completed === false) {
                    comp = false
                } else if (o.completed) {
                    if (comp !== false) {
                        comp = true
                    }
                    nbr_comp++
                }
            }
            if (o.tclass == 'project' && (!is_scorm || o.track_score !== false || o.track_completion_as_score)) {
                pass.total++;
                if (o.passed) pass.passed++;
                if (o.completed) pass.completed++
            }
            if (typeof o.progress == 'number') {
                pro.total++;
                pro.progress += o.progress
            }
        }
        if (comp && pass.total > 0 && pass.completed == pass.total) {
            pass = pass.passed == pass.total
        } else {
            pass = null
        }
        var olen = objs.length;
        if (olen > 0) {
            if (pro.total == olen) {
                pro = pro.progress / olen
            } else {
                pro = nbr_comp / olen
            }
        } else {
            pro = 0
        }
        s.completed = comp;
        s.passed = pass;
        s.progress = pro
    };

    function calc_score_() {
        var s = this.sco_;
        if (!s) return;
        delete s.min;
        var objs = this.objectives_;
        var is_scorm = this.backend_type_ == 'scorm' || this.backend_type_ == 'aicc';
        var cur = [];
        var min = [];
        var max = [];
        var count = 0;
        for (var i = 0, o = null; o = objs[i++];) {
            if (o.tclass != 'project') continue;
            if (is_scorm && o.track_completion_as_score) {
                if (o.progress != null) {
                    cur.push(o.progress);
                    max.push(1);
                    min.push(0)
                }
                count++
            } else if ((!is_scorm || o.track_score !== false) && o.is_scorable) {
                if (typeof o.cur == 'number' && typeof o.cum == 'number' && typeof o.max == 'number') {
                    var ma;
                    var mi = null;
                    if (o.completed) {
                        ma = o.cum;
                        if (typeof o.min == 'number') mi = o.min
                    } else {
                        ma = Math.max(o.cum, o.max)
                    }
                    cur.push(o.cur);
                    max.push(ma);
                    min.push(mi)
                }
                count++
            }
        }
        s.scored_objects = count;
        if (count == 1) {
            s.cur = cur[0];
            if (min[0] != null) {
                s.min = min[0]
            }
            s.max = max[0]
        } else if (count > 1) {
            var cu = 0;
            var mi = 0;
            for (var i = count - 1; i >= 0; i--) {
                if (max[i] > 0) {
                    cu += cur[i] / max[i];
                    if (min[i] == null) {
                        mi = null
                    } else if (mi != null) {
                        mi += min[i] / max[i]
                    }
                } else if (min[i] == null) {
                    mi = null
                }
            }
            s.cur = cu / count * 100;
            if (mi != null) {
                s.min = mi / count * 100
            };
            s.max = 100
        }
    };

    function init_pageset_obj_(obj) {
        obj.active = false;
        obj.completed = TRACKING.PagesetCompleted(obj.pages);
        obj.progress = obj.total_pages > 0 ? TRACKING.PagesetCountVisited(obj.pages) / obj.total_pages : 0
    };

    function init_lesson_obj_(obj) {
        obj.active = false;
        if (!obj.completed) obj.completed = false;
        if (!obj.progress) obj.progress = 0;
        obj.cumulated_steps = 0;
        if (obj.visited) {
            for (var i in obj.visited) obj.cumulated_steps++
        } else {
            obj.visited = {};
            if (this.backend_type_ == 'collaborator' && typeof obj.bookmark == 'number') {
                for (var i = 0; i < obj.bookmark; i++) {
                    obj.visited[i] = true
                }
            }
        }
        obj.is_scorable = TRACKING.SCORABLE_LESSONS[obj.mode] || false;
        if (typeof obj.passed != 'boolean') obj.passed = null;
        var bt = this.backend_type_;
        if (obj.track_completion_as_score && obj.completed && (bt == 'scorm' || bt == 'aicc')) {
            obj.passed = true
        }
    };

    function init_() {
        this.sco_.agents = WCT.DeepCopy(this.agents_);
        var objs = this.objectives_;
        var bt = this.backend_type_;
        var pageset = 0;
        var lesson = 0;
        var modes = {};
        for (var i = 0, o = null; o = objs[i++];) {
            if (o.tclass == 'book') {
                pageset++;
                init_pageset_obj_.call(this, o)
            } else {
                lesson++;
                if (!modes[o.mode]) modes[o.mode] = 0;
                modes[o.mode]++;
                init_lesson_obj_.call(this, o)
            }
        }
        decide_completion_.call(this);
        calc_score_.call(this);
        var t_info = WCT.DeepCopy(this.config_);
        WCT.ExtendObject(t_info, {
            source: 'CT.Init',
            pagesets: pageset,
            lessons: lesson,
            backend_name: this.backend_name_ || '',
            backend_type: bt || ''
        });
        for (var m in modes) {
            t_info[m] = modes[m]
        }
        TRACKING.debug.Status(this.sco_, this.objectives_);
        TRACKING.debug.Track(t_info);
        this.initialized_ = true;
        this.finished_ = false;
        this.callback_.call(this.scope_, this);
        this.callback_ = null;
        this.scope_ = null
    };
    TRACKING.central = {
        backend_: null,
        backend_name_: null,
        backend_type_: null,
        backend_info_: null,
        shortcut_map_: null,
        objectives_: [],
        config_: {},
        sco_: null,
        initialized_: false,
        finished_: false,
        scorm_location_log_: null,
        agents_: {},
        callback_: null,
        scope_: null,
        Cleanup: function() {
            if (this.finished_) {
                this.UnsetBackend();
                TRACKING.debug.Track({
                    source: 'CT.Cleanup'
                });
                TRACKING.debug.Cleanup()
            }
        },
        SetBackend: function(backend) {
            if (this.backend_name_ != backend) {
                this.UnsetBackend();
                this.backend_name_ = backend;
                switch (backend) {
                    case 'collaborator84':
                    case 'collaborator':
                        this.backend_ = new TRACKING.backend[backend]();
                        this.backend_type_ = 'collaborator';
                        return true;
                        break;
                    case 'scorm12':
                    case 'scorm2004':
                        var scorm = arguments[1] || null;
                        this.backend_ = new TRACKING.backend.scorm(backend, scorm);
                        this.backend_type_ = 'scorm';
                        this.backend_info_ = scorm;
                        return true;
                        break;
                    case 'cookie':
                        this.backend_ = new TRACKING.backend.cookie();
                        this.backend_type_ = 'cookie';
                        return true;
                        break;
                    case 'aicc':
                        this.backend_ = new TRACKING.backend.aicc();
                        this.backend_type_ = 'aicc';
                        return true;
                        break
                }
            }
            return false
        },
        UnsetBackend: function() {
            if (this.backend_) this.backend_.Destructor();
            this.backend_ = null;
            this.backend_name_ = null;
            this.backend_type_ = null;
            this.backend_info_ = null
        },
        GetBackendType: function() {
            return this.backend_type_
        },
        GetBackend: function() {
            return this.backend_
        },
        Init: function(sco, objectives, config, callback, scope) {
            if (!this.backend_ && config.cookie_backend) {
                this.SetBackend('cookie')
            }
            TRACKING.debug.Init(config.debug_mode, this.backend_name_, this.backend_type_);
            this.config_ = WCT.DeepCopy(config);
            this.sco_ = WCT.DeepCopy(sco);
            this.objectives_ = WCT.DeepCopy(objectives);
            this.shortcut_map_ = create_central_ids_(this.objectives_);
            this.scorm_location_log_ = null;
            this.callback_ = callback;
            this.scope_ = scope;
            if (this.backend_) {
                this.backend_.Init(this.sco_, this.objectives_, this.config_, init_, this)
            } else {
                init_.call(this)
            }
        },
        Fini: function() {
            if (!this.initialized_ || this.finished_) return;
            this.finished_ = true;
            var objs = this.objectives_;
            var still_active_p = 0;
            var still_active_l = 0;
            for (var i = 0, o = null; o = objs[i++];) {
                if (!o.active) continue;
                if (o.tclass == 'book') {
                    still_active_p++;
                    this.Track(o.central_id_string, {
                        id: 'pageset_close',
                        end_time: (new Date()).getTime()
                    })
                } else {
                    still_active_l++;
                    this.Track(o.central_id_string, {
                        id: 'lesson_end',
                        end_time: (new Date()).getTime(),
                        completed: false,
                        min: 0
                    })
                }
            }
            var sco = this.sco_;
            if (sco && !sco.end_time) sco.end_time = (new Date()).getTime();
            this.still_active_p_ = still_active_p;
            this.still_active_l_ = still_active_l;
            if (this.backend_) this.backend_.Fini();
            var sco = this.sco_;
            if (sco && !sco.completed && this.scorm_location_log_) {
                alert(MANAGER.Trans('SCORM_LOCATION_ERROR'))
            }
            WCT.CleanupObject(this.objectives_);
            WCT.CleanupObject(this.shortcut_map_);
            WCT.CleanupObject(this.config_);
            WCT.CleanupObject(this.sco_);
            WCT.CleanupObject(this.scorm_location_log_);
            this.used_ = false;
            this.objectives_ = [];
            this.shortcut_map_ = null;
            this.config_ = {};
            this.sco_ = null;
            this.scorm_location_log_ = null;
            this.initialized_ = false;
            this.callback_ = null;
            this.scope_ = null;
            TRACKING.debug.Track({
                source: 'CT.Fini',
                forced_pageset_ends: this.still_active_p_,
                forced_lesson_ends: this.still_active_l_
            });
            delete this.still_active_p_;
            delete this.still_active_l_
        },
        ActivatePageset: function(lt_id, data) {
            var o = find_objective_.call(this, lt_id);
            var s = false;
            if (!o && this.backend_type_ == 'collaborator') {
                o = WCT.DeepCopy(data);
                o.central_id = o.uid;
                o.central_id_string = 'book!' + o.uid;
                this.objectives_.push(o);
                this.backend_.InitObjective(o);
                init_pageset_obj_.call(this, o)
            }
            if (o) {
                for (var sid in o.pages) {
                    data.pages[sid] = o.pages[sid]
                }
                data.completed = o.completed;
                if (o.bookmark != '') data.bookmark = o.bookmark;
                s = true
            }
            TRACKING.debug.Status(this.sco_, this.objectives_);
            TRACKING.debug.Track({
                source: 'CT.ActivatePageset',
                uid: o ? o.uid : '',
                total_pages: data ? data.total_pages : '',
                completed: data ? data.completed : '',
                bookmark: data && data.bookmark || '',
                success: s
            });
            return s
        },
        ActivateLesson: function(lt_id, data) {
            var bt = this.backend_type_;
            var o = find_objective_.call(this, lt_id);
            var s = false;
            var c = this.config_;
            if (!o && bt == 'collaborator') {
                var deli = TRACKING.DELIMITER.lesson_id;
                o = {
                    tclass: 'project',
                    uid: data.uid,
                    mode: data.mode,
                    title: data.title,
                    description: data.description,
                    track_completion: data.track_completion,
                    track_completion_as_score: data.track_completion_as_score,
                    track_score: data.track_score
                };
                o.central_id = o.uid + deli + o.mode;
                o.central_id_string = 'project!' + o.uid + ':' + o.mode;
                this.objectives_.push(o);
                this.backend_.InitObjective(o);
                init_lesson_obj_.call(this, o)
            }
            if (o) {
                if (!o.title && data.title) o.title = data.title;
                o.restarted = false;
                if (o.completed || o.passed || data.track_incomplete_instead_failed) {
                    if (bt == 'scorm' || bt == 'cookie' || bt == 'aicc') {
                        var crw_key = (bt == 'aicc' ? 'aicc' : 'scorm') + '_completed_restart_warning';
                        if (o.is_scorable && c[crw_key] && !this.ConfirmRestart()) {
                            TRACKING.debug.Track({
                                source: 'CT.ActivateLesson',
                                uid: o.uid,
                                mode: o.mode,
                                aborted: true
                            });
                            return 'abort'
                        }
                        o.restarted = true
                    } else if (bt == 'collaborator') {
                        o.restarted = true;
                        this.backend_.ForceNewSession(o)
                    }
                }
                if (!o.restarted) {
                    if (typeof o.bookmark == 'number') data.bookmark = o.bookmark;
                    if (typeof o.cur == 'number') data.cur = o.cur;
                    if (typeof o.cum == 'number') data.cum = o.cum
                } else {
                    o.bookmark = '';
                    o.completed = false;
                    o.passed = null;
                    o.progress = 0;
                    o.cumulated_steps = 0;
                    o.visited = {};
                    delete o.min;
                    if (o.is_scorable) {
                        o.cur = 0;
                        o.cum = 0;
                        o.max = 0
                    }
                    decide_completion_.call(this);
                    calc_score_.call(this);
                    this.backend_.StoreLessonObjective(o)
                }
                s = true
            }
            TRACKING.debug.Status(this.sco_, this.objectives_);
            TRACKING.debug.Track({
                source: 'CT.ActivateLesson',
                uid: o ? o.uid : '-',
                title: o ? o.title : '-',
                mode: o ? o.mode : '-',
                current_score: data ? data.cur : '',
                cumulated_max_score: data ? data.cum : '',
                bookmark: data && data.bookmark || '',
                success: s
            });
            return s
        },
        Track: function(lt_id, track_info) {
            var o = find_objective_.call(this, lt_id);
            var debug = false;
            if (o && this.backend_) {
                var tid = track_info.id;
                var sco = this.sco_;
                var be = this.backend_;
                TRACKING.debug.Track({
                    source: 'CT.Track (start)',
                    id: tid
                }, o);
                switch (tid) {
                    case 'pageset_open':
                        if (!o.active) {
                            debug = true;
                            o.active = true;
                            o.start_time = track_info.start_time;
                            if (sco.tclass == 'book') sco.bookmark = o.central_id;
                            if (!sco.start_time) sco.start_time = (new Date()).getTime();
                            be.Track(tid, o, track_info)
                        }
                        break;
                    case 'pageset_progress':
                        var sid = track_info.slide_id;
                        if (typeof o.pages[sid] != 'undefined') {
                            if (!o.pages[sid]) {
                                o.pages[sid] = true;
                                o.completed = TRACKING.PagesetCompleted(o.pages);
                                var vis = TRACKING.PagesetCountVisited(o.pages);
                                o.progress = vis / o.total_pages;
                                decide_completion_.call(this)
                            }
                            if (sco.tclass == 'book') sco.bookmark = o.central_id;
                            o.bookmark = sid;
                            be.Track(tid, o, track_info);
                            debug = true
                        }
                        break;
                    case 'pageset_close':
                        if (o.active) {
                            debug = true;
                            o.active = false;
                            o.end_time = track_info.end_time;
                            sco.end_time = (new Date()).getTime();
                            be.Track(tid, o, track_info)
                        }
                        break;
                    case 'lesson_start':
                        if (!o.active) {
                            debug = true;
                            o.active = true;
                            o.start_time = track_info.start_time;
                            o.total_steps = track_info.total_steps;
                            if (sco.tclass == 'project') sco.bookmark = o.central_id;
                            if (!sco.start_time) sco.start_time = (new Date()).getTime();
                            if (o.completed) {
                                o.progress = 1
                            } else if (o.total_steps > 0) {
                                o.progress = o.cumulated_steps / o.total_steps
                            } else {
                                o.progress = 0
                            }
                            decide_completion_.call(this);
                            calc_score_.call(this);
                            be.Track(tid, o, track_info)
                        }
                        break;
                    case 'lesson_progress':
                        var ts_uid = track_info.uid;
                        if (ts_uid) {
                            var ts = WCT.DeepCopy(track_info);
                            delete ts.id;
                            if (!o.tourstops) o.tourstops = {
                                order_: []
                            };
                            if (!o.tourstops[ts_uid]) o.tourstops[ts_uid] = ts;
                            o.tourstops.order_.push(ts_uid);
                            ts.start_time = (new Date()).getTime();
                            o.bookmark = typeof ts.idx == 'number' ? ts.idx : '';
                            if (sco.tclass == 'project') sco.bookmark = o.central_id;
                            be.Track(tid, o, track_info);
                            debug = true
                        }
                        break;
                    case 'lesson_commit':
                        var ts_uid = track_info.uid;
                        if (ts_uid) {
                            var ts = o.tourstops[ts_uid] || null;
                            var ts_idx = ts ? ts.idx : null;
                            if (typeof ts_idx == 'number' && !o.visited[ts_idx]) {
                                o.visited[ts_idx] = true;
                                o.cumulated_steps++;
                                o.progress = Math.min(o.total_steps > 0 ? o.cumulated_steps / o.total_steps : 0, 1);
                                ts.committed_ = 1;
                                ts.macros = track_info.macros;
                                ts.timestamp = track_info.timestamp;
                                if (o.is_scorable) {
                                    ts.cur = track_info.cur;
                                    ts.cum = track_info.cum;
                                    if (!o.cur) o.cur = 0;
                                    if (!o.cum) o.cum = 0;
                                    o.cur += ts.cur;
                                    o.cum += ts.cum
                                }
                                decide_completion_.call(this);
                                calc_score_.call(this)
                            } else {
                                ts.committed_ = 2
                            }
                            if (sco.tclass == 'project') sco.bookmark = o.central_id;
                            be.Track(tid, o, track_info);
                            debug = true
                        }
                        break;
                    case 'lesson_end':
                        if (o.active) {
                            debug = true;
                            o.active = false;
                            o.completed = track_info.completed;
                            o.passed = null;
                            if (o.completed) {
                                o.progress = 1;
                                if (o.track_completion_as_score && (this.backend_type_ == 'scorm' || this.backend_type_ == 'aicc')) {
                                    o.passed = true
                                } else if (o.is_scorable) {
                                    o.passed = o.cur >= o.min;
                                    if (!o.passed && o.track_incomplete_instead_failed) {
                                        o.completed = false;
                                        o.passed = null
                                    }
                                }
                            }
                            decide_completion_.call(this);
                            calc_score_.call(this);
                            o.end_time = track_info.end_time;
                            sco.end_time = (new Date()).getTime();
                            if (sco.tclass == 'project') sco.bookmark = o.central_id;
                            be.Track(tid, o, track_info)
                        }
                        break;
                    case 'lesson_score':
                        if (o.is_scorable) {
                            debug = true;
                            o.min = track_info.min;
                            o.max = track_info.max
                        }
                        break
                }
            }
            if (debug) {
                track_info.source = 'CT.Track (end)';
                TRACKING.debug.Status(this.sco_, this.objectives_);
                TRACKING.debug.Track(track_info, o)
            }
        },
        GetShortcutMap: function() {
            return this.shortcut_map_
        },
        ScormLocationError: function(success) {
            if (success === false) {
                this.scorm_location_log_ = {
                    data: arguments[1],
                    timestamp: (new Date()).getTime()
                }
            } else {
                this.scorm_location_log_ = null
            }
        },
        ScormSafeModeError: function(cmd, v1, v2) {
            TRACKING.debug.Track({
                source: 'CT.ScormSafeModeError',
                cmd: cmd,
                v1: v1,
                v2: v2
            })
        },
        AddAgent: function(agent_uid) {
            this.agents_[agent_uid] = true;
            if (this.sco_) {
                if (!this.sco_.agents_) this.sco_.agents = {};
                this.sco_.agents[agent_uid] = true;
                TRACKING.debug.Status(this.sco_, this.objectives_)
            }
        },
        RemoveAgent: function(agent_uid) {
            delete this.agents_[agent_uid];
            var sco = this.sco_;
            if (sco && sco.agents) {
                delete sco.agents[agent_uid];
                TRACKING.debug.Status(sco, this.objectives_)
            }
            if (!this.Agents()) {
                this.Fini();
                this.Cleanup()
            }
        },
        Agents: function() {
            var p = TRACKING.AGENT_UID_PREFIX;
            var l = p.length;
            var ag = this.agents_;
            var c = 0;
            for (var a in ag) {
                if (a.substr(0, l) == p) c++
            }
            return c
        },
        IsCollaborator: function() {
            return this.backend_type_ == 'collaborator'
        },
        GetBookmark: function() {
            var central_id = arguments[0] || null;
            if (!central_id) {
                return this.sco_ && this.sco_.bookmark || ''
            } else {
                var obj = this.objectives_;
                for (var i = 0, o = null; o = obj[i++];) {
                    if (o.central_id == central_id) return o.bookmark || ''
                }
                return ''
            }
        },
        ConfirmRestart: function() {
            var msg = MANAGER.Trans('RESTART_COMPLETED_LMS_LESSON').replace(/\\r\\n/g, '\n');
            return confirm(msg)
        }
    }
})();
TRACKING.local = function(central, id) {
    if (id) {
        id.string = id.tclass + '!' + id.uid;
        if (id.mode) id.string += ':' + id.mode
    }
    this.ct_ = central || null;
    this.id_ = id || null;
    this.initialized_ = false;
    this.data_ = {}
};
TRACKING.local.prototype = (function() {
    function call_central_(fun, param) {
        var ct = this.ct_;
        try {
            if (ct && typeof ct[fun] != 'undefined') {
                return ct[fun](this.id_.string, param)
            }
        } catch (e) {
            Log(e, true)
        }
        return null
    };
    return {
        Destructor: function() {
            this.ct_ = null;
            this.id_ = null;
            this.initialized_ = false;
            WCT.CleanupObject(this.data_);
            this.data_ = null
        },
        Track: function(info) {},
        activate_: function() {
            var fn = this.id_.tclass == 'book' ? 'ActivatePageset' : 'ActivateLesson';
            this.initialized_ = call_central_.call(this, fn, this.data_)
        },
        track_: function(info) {
            if (this.initialized_) call_central_.call(this, 'Track', info)
        }
    }
})();
TRACKING.local.lesson = function(central, data, meta, tourstops) {
    TRACKING.local.call(this, central, {
        tclass: 'project',
        uid: data.uid,
        mode: data.mode
    });
    this.data_ = WCT.DeepCopy(data);
    this.meta_ = WCT.DeepCopy(meta);
    this.tourstops_ = WCT.DeepCopy(tourstops);
    this.macros_ = null;
    this.tourstop_idx_ = null;
    this.completed_ = false;
    this.fixate_ = false;
    this.started_ = false;
    this.aborted_ = false;
    var d = this.data_;
    d.cur = 0;
    d.cum = 0;
    d.max = 0;
    d.pass = 0;
    d.title = meta.title;
    d.tourstops = {};
    d.order_ = [];
    this.ClearQuizTrackingData();
    this.activate_();
    this.aborted_ = this.initialized_ == 'abort'
};
TRACKING.local.lesson.prototype = new TRACKING.local;
WCT.ExtendObject(TRACKING.local.lesson.prototype, (function() {
    function quiz_tracking_(evt) {
        var d = this.quiz_;
        var ts = this.tourstops_[this.tourstop_idx_];
        if (!ts || !ts.uid) return;
        var cur = d.tourstops[ts.uid];
        if (!cur) {
            d.tourstops[ts.uid] = {
                title: ts.title,
                macros: {
                    order_: []
                },
                scores: {
                    cur: 0,
                    cum: 0
                },
                start_time: ts.start_time,
                index: ts.index
            };
            cur = d.tourstops[ts.uid]
        }
        var idx = d.order_.indexOf(ts.uid);
        if (idx >= 0) d.order_.splice(idx, 1);
        d.order_.push(ts.uid);
        var time = (new Date()).getTime();
        cur.end_time = time;
        if (!cur.macros[evt.uid]) {
            var m = {
                caption: evt.caption || '',
                uid: evt.uid,
                cur: 0,
                cum: 0,
                events: []
            };
            if (evt.description) m.description = WCT.context.RemoveImgIds(evt.description);
            m.timestamp = time;
            m.cur = evt.cur;
            m.cum = evt.max;
            cur.scores.cur += m.cur;
            cur.scores.cum += m.cum;
            d.cur += m.cur;
            d.cum += m.cum;
            evt = WCT.DeepCopy(evt);
            cur.macros[evt.uid] = m;
            cur.macros.order_.push(evt.uid);
            m.events.push(evt);
            delete evt.caption;
            delete evt.macro_uid;
            delete evt.uid;
            delete evt.cur;
            delete evt.max
        }
    };

    function get_quiz_pass_score_() {
        var d = this.data_;
        var m = this.meta_;
        var q = this.quiz_;
        if (typeof arguments[0] == 'number') {
            return Math.ceil(arguments[0] * q.cum / 100)
        } else if (typeof m.mastery_percent == 'number') {
            return Math.ceil(m.mastery_percent * q.cum / 100)
        } else if (d.max > 0) {
            return q.cum * d.pass / d.max
        }
        return d.max * 0.8
    };
    return {
        Destructor: function() {
            this.End();
            WCT.CleanupObject(this.meta_);
            WCT.CleanupObject(this.tourstops_);
            WCT.CleanupObject(this.quiz_);
            this.meta_ = null;
            this.tourstops_ = null;
            this.quiz_ = null;
            TRACKING.local.prototype.Destructor.call(this)
        },
        Aborted: function() {
            return this.aborted_
        },
        GetBookmark: function() {
            var bm = this.data_.bookmark;
            var idx = null;
            if (typeof bm == 'number') {
                idx = this.tourstops_.indexOfAtt(bm, 'index');
                if (idx < 0) idx = null
            }
            return idx
        },
        SetScores: function(max, pass) {
            this.data_.max = max;
            this.data_.pass = pass
        },
        Start: function() {
            if (this.started_) return;
            this.started_ = true;
            this.track_({
                id: 'lesson_start',
                start_time: (new Date()).getTime(),
                total_steps: this.tourstops_.length
            })
        },
        End: function() {
            if (!this.started_) return;
            this.started_ = false;
            var m = this.meta_.mastery_percent;
            var d = this.data_;
            var max = this.completed_ ? d.cum : d.max;
            var p = typeof m == 'number' ? Math.ceil(m * max / 100) : d.pass;
            this.track_({
                id: 'lesson_score',
                min: p,
                max: max
            });
            this.track_({
                id: 'lesson_end',
                completed: this.completed_,
                end_time: (new Date()).getTime()
            })
        },
        Progress: function(ts_idx) {
            var idx = this.tourstops_.indexOfAtt(ts_idx, 'index');
            this.tourstop_idx_ = idx;
            this.macros_ = {
                order_: []
            };
            var ts = this.tourstops_[idx];
            if (!ts || !ts.uid) return;
            ts.start_time = (new Date()).getTime();
            this.track_({
                id: 'lesson_progress',
                uid: ts.uid,
                idx: ts_idx,
                title: ts.title || ''
            })
        },
        Commit: function() {
            var d = this.data_;
            var ts = this.tourstops_[this.tourstop_idx_];
            if (!ts || !ts.uid) return;
            var macs = this.macros_;
            this.macros_ = null;
            var scores = {
                cur: 0,
                cum: 0
            };
            if (macs) {
                for (var i = 0, o = null; o = macs.order_[i++];) {
                    scores.cur += macs[o].cur || 0;
                    scores.cum += macs[o].cum || 0
                }
            }
            if (!d.tourstops[ts.uid]) {
                d.tourstops[ts.uid] = {
                    title: ts.title,
                    macros: macs,
                    scores: scores,
                    start_time: ts.start_time,
                    end_time: (new Date()).getTime(),
                    index: ts.index
                };
                var idx = d.order_.indexOf(ts.uid);
                if (idx >= 0) d.order_.splice(idx, 1);
                d.order_.push(ts.uid);
                d.cur += scores.cur;
                d.cum += scores.cum;
                var ord = [];
                var ct_macs = WCT.DeepCopy(macs);
                for (var i = 0, uid = null; uid = ct_macs.order_[i++];) {
                    if (uid == 'order_') {
                        continue
                    } else if (!ct_macs[uid].caption) {
                        delete ct_macs[uid]
                    } else {
                        ord.push(uid);
                        for (var j = 0, evt = null; evt = ct_macs[uid].events[j]; j++) {
                            if (evt.ct_ignore_) ct_macs[uid].events.splice(j--, 1)
                        }
                    }
                }
                ct_macs.order_ = ord;
                this.track_({
                    id: 'lesson_commit',
                    uid: ts.uid,
                    timestamp: (new Date()).getTime(),
                    macros: ct_macs,
                    cur: scores.cur,
                    cum: scores.cum
                })
            }
        },
        Completed: function(c) {
            if (c || !this.fixate_) this.completed_ = c;
            this.fixate_ = arguments[1]
        },
        Track: function(info) {
            var macs = this.macros_;
            if (!macs || !info.uid) return;
            if (!macs[info.uid]) {
                macs[info.uid] = {
                    uid: info.uid,
                    cur: 0,
                    cum: 0,
                    events: []
                };
                macs.order_.push(info.uid)
            }
            var mac = macs[info.uid];
            if (info.caption) mac.caption = info.caption;
            if (info.description) mac.description = WCT.context.RemoveImgIds(info.description);
            var ts = (new Date()).getTime();
            mac.timestamp = ts;
            switch (info.id) {
                case 'simple_macro':
                    if (info.caption == 'branch_off') {
                        for (var i = 0, mo = null; mo = macs.order_[i++];) {
                            if (macs[mo].uid == mac.uid) continue;
                            var cum = macs[mo].cum || 0;
                            if (cum > 0) {
                                delete mac.cur;
                                delete mac.cum;
                                break
                            }
                        }
                    } else {
                        delete mac.cur;
                        delete mac.cum
                    }
                    break;
                case 'quiz_information':
                    info.correct_responses = info.correct_responses.join(',,,');
                    info.student_responses = info.student_responses.join(',,,');
                    info.max = info.weighting;
                    info.cur = info.result == 'correct' ? info.max : 0;
                    var evt = WCT.DeepCopy(info);
                    evt.time = ts;
                    evt.timestamp = ts;
                    quiz_tracking_.call(this, evt);
                    delete evt.caption;
                    delete evt.macro_uid;
                    delete evt.uid;
                    delete evt.cur;
                    delete evt.max;
                    mac.events.push(evt);
                    break;
                case 'tour_start':
                case 'tour_end':
                case 'tour_next':
                case 'tour_prev':
                case 'tour_jump':
                    var evt = WCT.DeepCopy(info);
                    evt.timestamp = ts;
                    evt.ct_ignore_ = true;
                    delete evt.caption;
                    delete evt.description;
                    delete evt.uid;
                    mac.events.push(evt);
                    break;
                default:
                    var evt = WCT.DeepCopy(info);
                    evt.action_score = evt.cur;
                    evt.max_score = evt.max;
                    evt.timestamp = ts;
                    delete evt.caption;
                    delete evt.description;
                    delete evt.uid;
                    delete evt.cur;
                    delete evt.max;
                    mac.events.push(evt);
                    break
            }
            if (info.id == 'user_action_correct_action' || info.id == 'user_action_goon' || info.id == 'quiz_information') {
                mac.cur = info.cur || 0;
                mac.cum = info.max || 0
            } else if (info.id == 'user_action_wrong_action') {
                mac.cum = info.max || 0
            }
        },
        GetCurrentScore: function() {
            return this.data_.cur
        },
        GetCumulatedScore: function() {
            return this.data_.cum
        },
        GetPassScore: function() {
            return this.data_.pass
        },
        GetCurTsIndex: function() {
            var ts = this.tourstops_[this.tourstop_idx_];
            return ts ? ts.index : -1
        },
        GetTrackingData: function() {
            var d = WCT.DeepCopy(this.data_);
            d.completed = arguments[0] || this.completed_;
            if (d.completed) {
                var m = this.meta_.mastery_percent;
                var p = typeof m == 'number' ? Math.ceil(m * d.cum / 100) : d.pass;
                d.passed = d.cur >= p
            } else {
                d.passed = false
            }
            return d
        },
        GetQuizTrackingData: function() {
            var q = this.quiz_;
            q.pass = get_quiz_pass_score_.call(this, arguments[0]);
            q.max = q.cum;
            return q
        },
        GetQuizScore: function() {
            var q = this.quiz_;
            return {
                cur: q.cur,
                max: q.cum,
                pass: get_quiz_pass_score_.call(this)
            }
        },
        ClearQuizTrackingData: function() {
            var d = this.data_;
            this.quiz_ = {
                cur: 0,
                cum: 0,
                description: d.description,
                max: 0,
                pass: 0,
                tclass: d.tclass,
                title: d.title,
                tourstops: {},
                order_: [],
                uid: d.uid
            }
        }
    }
})());
TRACKING.local.pageset = function(central, data) {
    TRACKING.local.call(this, central, {
        tclass: 'book',
        uid: data.uid
    });
    WCT.ExtendObject(this.data_, data);
    this.open_ = false;
    this.activate_()
};
TRACKING.local.pageset.prototype = new TRACKING.local;
WCT.ExtendObject(TRACKING.local.pageset.prototype, {
    Destructor: function() {
        this.Close();
        TRACKING.local.prototype.Destructor.call(this)
    },
    Open: function() {
        if (this.open_) return;
        this.open_ = true;
        this.track_({
            id: 'pageset_open',
            start_time: (new Date()).getTime()
        })
    },
    Close: function() {
        if (!this.open_) return;
        this.open_ = false;
        this.track_({
            id: 'pageset_close',
            end_time: (new Date()).getTime()
        })
    },
    Progress: function(slide_uid) {
        if (this.open_) {
            this.track_({
                id: 'pageset_progress',
                slide_id: slide_uid
            })
        }
    },
    GetVisited: function() {
        var p = this.data_.pages;
        var v = {};
        for (var s in p) {
            if (p[s]) v[s] = true
        }
        return v
    }
});
TRACKING.SCORM = {
    COMPLETION_UNKNOWN: 'unknown',
    COMPLETION_COMPLETED: 'completed',
    COMPLETION_INCOMPLETE: 'incomplete',
    COMPLETION_NOTATTEMPTED: 'not attempted',
    SUCCESS_UNKNOWN: 'unknown',
    SUCCESS_PASSED: 'passed',
    SUCCESS_FAILED: 'failed',
    LESSON_BROWSED: 'browsed',
    EXIT_EMPTYSTRING: '',
    EXIT_NORMAL: 'normal',
    EXIT_LOGOUT: 'logout',
    EXIT_SUSPEND: 'suspend',
    EXIT_TIMEOUT: 'time-out',
    EXIT_NAV_ALL: 'exitAll',
    EXIT_NAV_SUSPEND: 'suspendAll',
    ENTRY_EMPTYSTRING: '',
    ENTRY_ABINITIO: 'ab-initio',
    ENTRY_RESUME: 'resume',
    MODE_NORMAL: 'normal',
    MODE_BROWSE: 'browse',
    MODE_REVIEW: 'review',
    PASSED_ONSCORED: 'on_scored',
    PASSED_ONCOMPLETION: 'on_completion',
    PASSED_NEVER: 'never'
};
TRACKING.connector = {};
TRACKING.connector.scorm2004 = function(scorm) {
    this.my_ = TRACKING.connector.scorm2004;
    this.scorm_ = scorm;
    this.api_ = null;
    this.loc_type_ = 'location';
    this.cache_ = {};
    this.safe_mode_ = false;
    this.verify_location_ = true;
    this.changed_ = false
};
TRACKING.connector.scorm2004.SCORM_VERSION = '2004';
TRACKING.connector.scorm2004.SCORM_FUNCTION_MAP = {
    init: 'Initialize',
    get_value: 'GetValue',
    set_value: 'SetValue',
    commit: 'Commit',
    terminate: 'Terminate'
};
TRACKING.connector.scorm2004.SCORM_COMMAND_MAP = {
    completion: 'cmi.completion_status',
    entry: 'cmi.entry',
    exit: 'cmi.exit',
    location: 'cmi.location',
    mode: 'cmi.mode',
    time: 'cmi.session_time',
    success: 'cmi.success_status',
    suspend: 'cmi.suspend_data',
    progress: 'cmi.progress_measure',
    lms_nav: 'adl.nav.request',
    score_scaled: 'cmi.score.scaled',
    score_raw: 'cmi.score.raw',
    score_min: 'cmi.score.min',
    score_max: 'cmi.score.max',
    obj_count: 'cmi.objectives._count',
    obj_base: 'cmi.objectives',
    obj_id: 'id',
    obj_success: 'success_status',
    obj_completion: 'completion_status',
    obj_description: 'description',
    obj_progress: 'progress_measure',
    obj_score_scaled: 'score.scaled',
    obj_score_raw: 'score.raw',
    obj_score_min: 'score.min',
    obj_score_max: 'score.max',
    int_count: 'cmi.interactions._count',
    int_base: 'cmi.interactions',
    int_id: 'id',
    int_type: 'type',
    int_timestamp: 'timestamp',
    int_weighting: 'weighting',
    int_response: 'learner_response',
    int_result: 'result',
    int_latency: 'latency',
    int_description: 'description',
    int_correct_base: 'correct_responses',
    int_correct_count: '_count',
    int_correct_pattern: 'pattern',
    int_obj_count: 'objectives._count',
    int_obj_base: 'objectives',
    int_obj_id: 'id',
    pref_language: 'cmi.learner_preference.language'
};
TRACKING.connector.scorm2004.WRITE_ONLY_MAP = {
    exit: true,
    time: true
};
TRACKING.connector.scorm2004.INTERACTION_TYPE_MAP = {
    true_false: 'true-false',
    choice: 'multiple-choice',
    fill_in: 'fill-in',
    matching: 'matching',
    performance: 'performance',
    sequencing: 'sequencing',
    likert: 'likert',
    numeric: 'numeric'
};
TRACKING.connector.scorm2004.prototype = (function() {
    var check_type_ = {
        blank: function(o) {
            return typeof o == 'string' && o == ''
        },
        decimal: function(o) {
            if (typeof o != 'string') o += '';
            return o.match(/[0-9\.{1}\-]+/) ? true : false
        },
        string255: function(o) {
            return o.match(/[\w]{0,255}/) ? true : false
        }
    };
    return {
        Destructor: function() {
            this.my_ = null;
            this.scorm_ = null;
            this.api_ = null;
            WCT.CleanupObject(this.cache_);
            this.cache_ = null
        },
        Init: function(safe_mode, location_mode) {
            var s = this.scorm_;
            var v = this.my_.SCORM_VERSION;
            this.api_ = null;
            this.safe_mode_ = safe_mode;
            if (location_mode == 'auto') {
                this.verify_location_ = true;
                this.loc_type_ = 'location'
            } else {
                this.verify_location_ = false;
                this.loc_type_ = location_mode
            }
            if (s) {
                try {
                    if (s[v]) this.api_ = s[v]
                } catch (e) {
                    Log(e)
                }
            }
            this.api_call_('init', '');
            return this.api_ != null
        },
        Fini: function() {
            this.api_call_('terminate', '')
        },
        GetLocation: function(sco) {
            var m = this.my_.SCORM_COMMAND_MAP;
            var l = '';
            var t = '';
            if (this.verify_location_) {
                l = this.get_value_(m.suspend);
                t = 'suspend';
                if (typeof l != 'string' || l == '') {
                    l = this.get_value_(m.location);
                    t = 'location'
                }
                this.loc_type_ = t
            } else {
                t = this.loc_type_;
                l = this.get_value_(m[t])
            }
            TRACKING.debug.Track({
                source: 'SCORM.GetLocation (method: ' + t + ')',
                result: l
            });
            return l
        },
        SetLocation: function(sco, loc) {
            var t = this.loc_type_;
            var m = this.my_.SCORM_COMMAND_MAP;
            if (this.cache_[m[t]] == loc) return;
            this.set_value_(m[t], loc);
            if (!this.verify_location_) return;
            var l = this.get_value_(m[t]);
            if (typeof l != 'string' || l != loc) {
                var len = typeof l == 'string' ? l.length : 'undefined';
                this.set_value_(m[t], '');
                TRACKING.debug.Track({
                    source: 'SCORM.SetLocation (method: ' + t + ')',
                    len_compare: loc.length + ' / ' + len,
                    success: false
                });
                if (t != 'suspend') {
                    this.loc_type_ = 'suspend';
                    return this.SetLocation(sco, loc)
                }
                return false
            }
            return true
        },
        GetLanguage: function() {
            return this.get_value_(this.my_.SCORM_COMMAND_MAP.pref_language)
        },
        SetExit: function(comp, nav_request) {
            var m = this.my_.SCORM_COMMAND_MAP;
            var ts = TRACKING.SCORM;
            var type = comp ? ts.EXIT_NORMAL : ts.EXIT_SUSPEND;
            this.set_value_(m.exit, type);
            if (nav_request) {
                var nav = comp ? ts.EXIT_NAV_ALL : ts.EXIT_NAV_SUSPEND;
                this.set_value_(m.lms_nav, nav)
            }
        },
        DoCommit: function() {
            if (this.changed_) {
                this.changed_ = false;
                this.api_call_('commit', '')
            }
        },
        SetSessionTime: function(time) {
            var m = this.my_.SCORM_COMMAND_MAP;
            var t = this.format_duration_(time);
            this.set_value_(m.time, t)
        },
        GetEntry: function() {
            var m = this.my_.SCORM_COMMAND_MAP;
            var e = this.get_value_(m.entry);
            var ts = TRACKING.SCORM;
            switch (e) {
                case ts.ENTRY_EMPTYSTRING:
                case ts.ENTRY_ABINITIO:
                case ts.ENTRY_RESUME:
                    return e;
                    break
            }
            return ts.ENTRY_EMPTYSTRING
        },
        GetMode: function() {
            var m = this.my_.SCORM_COMMAND_MAP;
            var mode = this.get_value_(m.mode);
            var ts = TRACKING.SCORM;
            switch (mode) {
                case ts.MODE_NORMAL:
                case ts.MODE_BROWSE:
                case ts.MODE_REVIEW:
                    return mode;
                    break
            }
            return ts.MODE_NORMAL
        },
        GetObjectiveCount: function() {
            var m = this.my_.SCORM_COMMAND_MAP;
            var c = Number(this.get_value_(m.obj_count));
            return isNaN(c) ? 0 : c
        },
        InitObjectives: function() {
            var c = this.GetObjectiveCount();
            var r = {
                count_: c
            };
            for (var i = c - 1; i >= 0; i--) {
                var id = this.GetObjectiveId(i);
                r[id] = {
                    scorm_pos: i
                }
            }
            TRACKING.debug.Track({
                source: 'SCORM_connector.initObjectives',
                count: c
            });
            return r
        },
        ResetObjective: function(obj) {
            var p = obj.scorm_pos;
            if (p != null) {
                var cur = null;
                var max = null;
                if (obj.tclass == 'project' && TRACKING.SCORABLE_LESSONS[obj.mode]) {
                    cur = typeof obj.cur == 'number' ? obj.cur : 0;
                    max = typeof obj.max == 'number' ? obj.max : 0
                }
                this.SetObjectiveCurrentScore(p, cur);
                this.SetObjectiveMaxScore(p, max);
                this.SetObjectiveStatus(p, null, null)
            }
        },
        CreateObjective: function(uid, cur, max, comp, pass) {
            var m = this.my_.SCORM_COMMAND_MAP;
            var p = this.GetObjectiveCount();
            var b = m.obj_base + '.' + p + '.';
            var desc = arguments[5] || null;
            this.set_value_(b + m.obj_id, uid);
            var v = this.get_value_(b + m.obj_id);
            if (v != uid) {
                return null
            }
            if (cur != null) this.set_value_(b + m.obj_score_raw, cur);
            if (max != null) this.set_value_(b + m.obj_score_max, max);
            if (desc) this.SetObjectiveDescription(p, desc);
            this.SetObjectiveStatus(p, comp, pass);
            return p
        },
        SetObjectiveDescription: function(pos, desc) {
            var m = this.my_.SCORM_COMMAND_MAP;
            if (m.obj_description) {
                var cmd = m.obj_base + '.' + pos + '.' + m.obj_description;
                this.set_value_(cmd, desc)
            }
        },
        SetObjectiveCurrentScore: function(pos, cur) {
            if (check_type_.decimal(cur) || check_type_.blank(cur)) {
                var m = this.my_.SCORM_COMMAND_MAP;
                var cmd = m.obj_base + '.' + pos + '.' + m.obj_score_raw;
                this.set_value_(cmd, cur)
            }
        },
        SetObjectiveScaledScore: function(pos, sca) {
            var m = this.my_.SCORM_COMMAND_MAP;
            if (m.obj_score_scaled && typeof sca == 'number') {
                var cmd = m.obj_base + '.' + pos + '.' + m.obj_score_scaled;
                sca = Math.round(sca * 100) / 100;
                this.set_value_(cmd, sca)
            }
        },
        SetObjectiveMaxScore: function(pos, max) {
            if (check_type_.decimal(max) || check_type_.blank(max)) {
                var m = this.my_.SCORM_COMMAND_MAP;
                var cmd = m.obj_base + '.' + pos + '.' + m.obj_score_max;
                this.set_value_(cmd, max)
            }
        },
        SetObjectiveMinScore: function(pos, min) {
            if (check_type_.decimal(min) || check_type_.blank(min)) {
                var m = this.my_.SCORM_COMMAND_MAP;
                var cmd = m.obj_base + '.' + pos + '.' + m.obj_score_min;
                this.set_value_(cmd, min)
            }
        },
        SetObjectiveStatus: function(pos, comp, pass) {
            var m = this.my_.SCORM_COMMAND_MAP;
            var cmd_base = m.obj_base + '.' + pos + '.';
            var cmd_comp = cmd_base + m.obj_completion;
            var cmd_pass = cmd_base + m.obj_success;
            this.set_status_(cmd_comp, cmd_pass, comp, pass, arguments[3])
        },
        SetObjectiveProgressMeasure: function(pos, progress) {
            var m = this.my_.SCORM_COMMAND_MAP;
            if (m.obj_progress && typeof progress == 'number') {
                var cmd = m.obj_base + '.' + pos + '.' + m.obj_progress;
                progress = Math.round(progress * 100) / 100;
                this.set_value_(cmd, progress)
            }
        },
        GetObjectiveId: function(pos) {
            var m = this.my_.SCORM_COMMAND_MAP;
            var cmd = m.obj_base + '.' + pos + '.' + m.obj_id;
            return this.get_value_(cmd)
        },
        GetObjectiveCurrentScore: function(pos) {
            var m = this.my_.SCORM_COMMAND_MAP;
            var cmd = m.obj_base + '.' + pos + '.' + m.obj_score_raw;
            var c = Number(this.get_value_(cmd));
            return isNaN(c) ? 0 : c
        },
        GetObjectiveMaxScore: function(pos_) {
            var m = this.my_.SCORM_COMMAND_MAP;
            var cmd = m.obj_base + '.' + pos + '.' + m.obj_score_max;
            var c = Number(this.get_value_(cmd));
            return isNaN(c) ? 0 : c
        },
        GetObjectiveCompletion: function(pos) {
            var m = this.my_.SCORM_COMMAND_MAP;
            var cmd = m.obj_base + '.' + pos + '.' + m.obj_completion;
            return this.get_completion_(cmd)
        },
        GetObjectiveSuccess: function(pos) {
            var m = this.my_.SCORM_COMMAND_MAP;
            var cmd = m.obj_base + '.' + pos + '.' + m.obj_success;
            return this.get_success_(cmd)
        },
        GetCompletion: function() {
            return this.get_completion_(this.my_.SCORM_COMMAND_MAP.completion)
        },
        GetSuccess: function() {
            return this.get_success_(this.my_.SCORM_COMMAND_MAP.success)
        },
        SetStatus: function(comp, pass) {
            var m = this.my_.SCORM_COMMAND_MAP;
            this.set_status_(m.completion, m.success, comp, pass, arguments[2])
        },
        SetProgressMeasure: function(progress) {
            var m = this.my_.SCORM_COMMAND_MAP;
            if (m.progress && typeof progress == 'number') {
                progress = Math.round(progress * 100) / 100;
                this.set_value_(m.progress, progress)
            }
        },
        SetMaxScore: function(max) {
            if (check_type_.decimal(max) || check_type_.blank(max)) {
                this.set_value_(this.my_.SCORM_COMMAND_MAP.score_max, max)
            }
        },
        SetMinScore: function(min) {
            if (check_type_.decimal(min) || check_type_.blank(min)) {
                this.set_value_(this.my_.SCORM_COMMAND_MAP.score_min, min)
            }
        },
        SetCurrentScore: function(raw) {
            if (check_type_.decimal(raw) || check_type_.blank(raw)) {
                this.set_value_(this.my_.SCORM_COMMAND_MAP.score_raw, raw)
            }
        },
        SetScaledScore: function(sca) {
            var m = this.my_.SCORM_COMMAND_MAP;
            if (m.score_scaled && typeof sca == 'number') {
                sca = Math.round(sca * 100) / 100;
                this.set_value_(m.score_scaled, sca)
            }
        },
        get_value_: function(cmd) {
            var v = this.api_call_('get_value', cmd);
            this.cache_[cmd] = v;
            return v
        },
        set_value_: function(cmd, value) {
            if (this.cache_[cmd] == value) return;
            this.api_call_('set_value', cmd, value);
            if (this.safe_mode_) {
                var cm = this.my_.SCORM_COMMAND_MAP;
                var wm = this.my_.WRITE_ONLY_MAP;
                for (var c in cm) {
                    if (cm[c] == cmd && wm[c]) {
                        return
                    }
                }
                var v = this.api_call_('get_value', cmd);
                if (value != v) {
                    TRACKING.central.ScormSafeModeError(cmd, value, v)
                }
            } else {
                this.cache_[cmd] = value
            }
            this.changed_ = true
        },
        api_call_: function(fun) {
            var a = this.api_;
            var f = this.my_.SCORM_FUNCTION_MAP[fun];
            var r = null;
            var s = false;
            var e = null;
            var p1 = arguments[1];
            var p2 = arguments[2];
            if (a && f && typeof a[f] != 'undefined') {
                try {
                    if (p1 != null && p2 != null) {
                        r = a[f](p1, p2)
                    } else if (p1 != null) {
                        r = a[f](p1)
                    } else {
                        r = a[f]()
                    }
                    s = true
                } catch (err) {
                    e = err
                }
            }
            var info = {
                source: 'SCORM.api_call_ (' + this.my_.SCORM_VERSION + ')',
                fun: f
            };
            if (typeof p1 == 'string' && p1 != '') {
                info.fun += ' (' + p1;
                if (p2 != null) {
                    info.fun += ', ' + p2
                }
                info.fun += ')';
                var rt = typeof r;
                if (rt == 'number' || rt == 'string' || rt == 'boolean') {
                    info.fun += ' => ' + r
                }
            }
            if (!s) info.success = false;
            if (e != null) info.error_msg = e;
            TRACKING.debug.Track(info);
            return r
        },
        format_duration_: function(time) {
            var d = this.time_to_values_(time);
            var cs = d.cs;
            var s = d.s;
            var min = d.min;
            var h = d.h;
            var day = d.day;
            var m = d.m;
            var y = d.y;
            var r = 'P';
            if (y > 0) r += y + 'Y';
            if (m > 0) r += m + 'M';
            if (day > 0) r += day + 'D';
            if (h > 0 || min > 0 || s > 0 || cs > 0) r += 'T';
            if (h > 0) r += h + 'H';
            if (min > 0) r += min + 'M';
            if (s > 0 || cs > 0) {
                r += s;
                if (cs > 0) r += '.' + cs;
                r += 'S'
            }
            return r
        },
        format_timestamp_: function(time) {
            var d = new Date(time);
            var cs = Math.floor(d.getMilliseconds() / 10);
            var s = d.getSeconds();
            var min = d.getMinutes();
            var h = d.getHours();
            var day = d.getDate();
            var m = d.getMonth();
            var y = d.getFullYear();
            if (m < 10) m = '0' + m;
            if (day < 10) day = '0' + day;
            if (h < 10) h = '0' + h;
            if (min < 10) min = '0' + min;
            if (s < 10) s = '0' + s;
            var r1 = [y, m, day].join('-');
            var r2 = [h, min, s].join(':');
            if (cs > 0) {
                if (cs < 10) cs = '0' + cs;
                r2 += '.' + cs
            }
            return r1 + 'T' + r2
        },
        time_to_values_: function(time) {
            var cs = Math.floor((time % 1000) / 10);
            time = Math.floor(time / 1000);
            var s = time % 60;
            time = Math.floor(time / 60);
            var min = time % 60;
            time = Math.floor(time / 60);
            var h = time % 24;
            time = Math.floor(time / 24);
            return {
                y: 0,
                m: 0,
                day: 0,
                h: h,
                min: min,
                s: s,
                cs: cs
            }
        },
        set_status_: function(cmd_comp, cmd_pass, comp, pass) {
            if (arguments[4] === true) return;
            var ts = TRACKING.SCORM;
            if (comp === true) {
                this.set_value_(cmd_comp, ts.COMPLETION_COMPLETED)
            } else if (comp === false) {
                this.set_value_(cmd_comp, ts.COMPLETION_INCOMPLETE)
            } else {
                this.set_value_(cmd_comp, ts.COMPLETION_UNKNOWN)
            }
            if (pass === true) {
                this.set_value_(cmd_pass, ts.SUCCESS_PASSED)
            } else if (pass === false) {
                this.set_value_(cmd_pass, ts.SUCCESS_FAILED)
            } else {
                this.set_value_(cmd_pass, ts.SUCCESS_UNKNOWN)
            }
        },
        get_completion_: function(cmd) {
            var c = this.get_value_(cmd);
            var ts = TRACKING.SCORM;
            switch (c) {
                case ts.COMPLETION_COMPLETED:
                case ts.SUCCESS_PASSED:
                case ts.SUCCESS_FAILED:
                    return true;
                    break
            }
            return false
        },
        get_success_: function(cmd) {
            var s = this.get_value_(cmd);
            var ts = TRACKING.SCORM;
            switch (s) {
                case ts.SUCCESS_PASSED:
                    return true;
                    break;
                case ts.SUCCESS_FAILED:
                    return false;
                    break
            }
            return null
        }
    }
})();
TRACKING.connector.scorm12 = function(scorm) {
    TRACKING.connector.scorm2004.call(this, scorm);
    this.my_ = TRACKING.connector.scorm12
};
TRACKING.connector.scorm12.prototype = new TRACKING.connector.scorm2004;
TRACKING.connector.scorm12.SCORM_VERSION = '12';
TRACKING.connector.scorm12.SCORM_FUNCTION_MAP = {
    init: 'LMSInitialize',
    get_value: 'LMSGetValue',
    set_value: 'LMSSetValue',
    commit: 'LMSCommit',
    terminate: 'LMSFinish'
};
TRACKING.connector.scorm12.SCORM_COMMAND_MAP = {
    completion: 'cmi.core.lesson_status',
    entry: 'cmi.core.entry',
    exit: 'cmi.core.exit',
    location: 'cmi.core.lesson_location',
    mode: 'cmi.core.lesson_mode',
    time: 'cmi.core.session_time',
    success: 'cmi.core.lesson_status',
    suspend: 'cmi.suspend_data',
    progress: null,
    score_scaled: null,
    score_raw: 'cmi.core.score.raw',
    score_min: 'cmi.core.score.min',
    score_max: 'cmi.core.score.max',
    obj_count: 'cmi.objectives._count',
    obj_base: 'cmi.objectives',
    obj_id: 'id',
    obj_success: 'status',
    obj_completion: 'status',
    obj_description: null,
    obj_progress: null,
    obj_score_scaled: null,
    obj_score_raw: 'score.raw',
    obj_score_min: 'score.min',
    obj_score_max: 'score.max',
    int_count: 'cmi.interactions._count',
    int_base: 'cmi.interactions',
    int_id: 'id',
    int_type: 'type',
    int_timestamp: 'time',
    int_weighting: 'weighting',
    int_response: 'student_response',
    int_result: 'result',
    int_latency: 'latency',
    int_description: null,
    int_correct_base: 'correct_responses',
    int_correct_count: '_count',
    int_correct_pattern: 'pattern',
    int_obj_count: 'objectives._count',
    int_obj_base: 'objectives',
    int_obj_id: 'id',
    pref_language: 'cmi.student_preference.language'
};
TRACKING.connector.scorm12.WRITE_ONLY_MAP = {
    exit: true,
    time: true
};
TRACKING.connector.scorm12.INTERACTION_TYPE_MAP = {
    true_false: 'true-false',
    choice: 'choice',
    fill_in: 'fill-in',
    matching: 'matching',
    performance: 'performance',
    sequencing: 'sequencing',
    likert: 'likert',
    numeric: 'numeric'
};
WCT.ExtendObject(TRACKING.connector.scorm12.prototype, {
    SetExit: function(comp) {
        var ts = TRACKING.SCORM;
        var type = comp ? ts.EXIT_EMPTYSTRING : ts.EXIT_SUSPEND;
        var m = this.my_.SCORM_COMMAND_MAP;
        this.set_value_(m.exit, type)
    },
    format_duration_: function(time) {
        var d = this.time_to_values_(time);
        var cs = d.cs;
        var s = d.s;
        var min = d.min;
        var h = d.h;
        var day = d.day;
        var m = d.m;
        var y = d.y;
        h += (365.25 * y + 30.4375 * m + day) * 24;
        if (h >= 10000) h = 9999;
        if (h < 10) {
            h = '000' + h
        } else if (h < 100) {
            h = '00' + h
        } else if (h < 1000) {
            h = '0' + h
        }
        if (min < 10) min = '0' + min;
        if (s < 10) s = '0' + s;
        var r = h + ':' + min + ':' + s;
        if (cs > 0) {
            if (cs < 10) cs = '0' + cs;
            r += '.' + cs
        }
        return r
    },
    format_timestamp_: function(time) {
        var p = this.format_duration_(time).split(':');
        p[0] = p[0].substr(2);
        return p.join(':')
    },
    set_status_: function(cmd_comp, cmd_pass, comp, pass) {
        if (arguments[4] === true) return;
        var ts = TRACKING.SCORM;
        if (pass === true) {
            this.set_value_(cmd_pass, ts.SUCCESS_PASSED)
        } else if (pass === false) {
            this.set_value_(cmd_pass, ts.SUCCESS_FAILED)
        } else if (comp === true) {
            this.set_value_(cmd_comp, ts.COMPLETION_COMPLETED)
        } else if (comp === false) {
            this.set_value_(cmd_comp, ts.COMPLETION_INCOMPLETE)
        }
    }
});
TRACKING.bookmark = function(api, version) {
    this.api_ = api;
    this.version_ = version;
    this.objectives_standalone_ = false
};
TRACKING.bookmark.MAX_VERSION = '2';
TRACKING.bookmark.prototype = (function() {
    var version_ = {
        '1': {
            PAGESET_ID: '1',
            LESSON_ID: '2',
            SetPageset: function(obj) {
                var map = TRACKING.central.GetShortcutMap();
                var bm = obj.bookmark != null && obj.bookmark != '' ? map.uid[obj.bookmark] : '';
                var vis = [];
                for (var sid in obj.pages) {
                    if (obj.pages[sid]) {
                        vis.push(map.uid[sid])
                    }
                }
                vis = vis.join(TRACKING.DELIMITER.visited_slides);
                return [bm, vis]
            },
            GetPageset: function(obj, data) {
                var map = TRACKING.central.GetShortcutMap();
                obj.bookmark = typeof data[0] == 'string' && data[0] != '' ? map.shortcut[data[0]] : '';
                var vis = typeof data[1] == 'string' ? data[1].split(TRACKING.DELIMITER.visited_slides) : [];
                for (var i = vis.length - 1; i >= 0; i--) {
                    var sid = map.shortcut[vis[i]];
                    if (obj.pages[sid] != null) {
                        obj.pages[sid] = true
                    }
                }
            },
            SetLesson: function(obj) {
                var f = TRACKING.backend.scorm.FIXED;
                var bm = typeof obj.bookmark == 'number' ? obj.bookmark : '';
                var pro = typeof obj.progress == 'number' ? Number(obj.progress.toFixed(f)) : 0;
                var comp = obj.completed ? 1 : 0;
                if (TRACKING.SCORABLE_LESSONS[obj.mode]) {
                    var cur = typeof obj.cur == 'number' ? Number(obj.cur.toFixed(f)) : 0;
                    var max = typeof obj.max == 'number' ? Number(obj.max.toFixed(f)) : 0;
                    var cum = typeof obj.cum == 'number' ? Number(obj.cum.toFixed(f)) : 0;
                    var min = typeof obj.min == 'number' ? Number(obj.min.toFixed(f)) : 0;
                    var succ;
                    switch (obj.passed) {
                        case false:
                            succ = 0;
                            break;
                        case true:
                            succ = 1;
                            break;
                        default:
                            succ = 2;
                            break
                    }
                    return [bm, pro, comp, cur, max, cum, min, succ]
                }
                return [bm, pro, comp]
            },
            GetLesson: function(obj, data) {
                var bm = data[0] != '' ? Number(data[0]) : '';
                var pro = Number(data[1]);
                var comp = Number(data[2]);
                obj.bookmark = isNaN(bm) ? '' : bm;
                obj.progress = isNaN(pro) ? 0 : pro;
                obj.completed = isNaN(comp) ? false : Boolean(comp);
                if (TRACKING.SCORABLE_LESSONS[obj.mode]) {
                    var cur = Number(data[3]);
                    var max = Number(data[4]);
                    var cum = Number(data[5]);
                    var min = Number(data[6]);
                    obj.cur = isNaN(cur) ? 0 : cur;
                    obj.max = isNaN(max) ? 0 : max;
                    obj.cum = isNaN(cum) ? 0 : cum;
                    obj.min = isNaN(min) ? 0 : min;
                    switch (Number(data[7])) {
                        case 0:
                            obj.passed = false;
                            break;
                        case 1:
                            obj.passed = true;
                            break;
                        default:
                            obj.passed = null;
                            break
                    }
                }
            }
        },
        '2': {
            PAGESET_ID: '',
            LESSON_ID: '2',
            SetPageset: function(obj) {
                var map = TRACKING.central.GetShortcutMap();
                var bm = obj.bookmark ? map.uid[obj.bookmark] : '';
                var vis = [];
                var nv = [];
                for (var sid in obj.pages) {
                    var sc = map.uid[sid];
                    if (obj.pages[sid]) {
                        vis.push(sc)
                    } else {
                        nv.push(sc)
                    }
                }
                var d = TRACKING.DELIMITER.visited_slides;
                if (vis.length <= nv.length) {
                    var idx = vis.indexOf(bm);
                    if (idx >= 0 && idx.toString().length < bm.length) {
                        bm = idx
                    }
                    vis = vis.join(d);
                    return bm || vis ? [bm, vis] : null
                } else {
                    nv = d + nv.join(d);
                    return [bm, nv]
                }
            },
            GetPageset: function(obj, data) {
                var map = TRACKING.central.GetShortcutMap();
                var bm = typeof data[0] == 'string' ? data[0] : '';
                if (bm && !isNaN(Number(bm))) bm = Number(bm);
                var vis = [];
                var nv = false;
                if (data[1] && typeof data[1] == 'string') {
                    vis = data[1].split(TRACKING.DELIMITER.visited_slides);
                    nv = data[1].charAt(0) == '-'
                }
                if (nv) {
                    if (data[1] == '-') {
                        for (var sid in obj.pages) {
                            obj.pages[sid] = true
                        }
                    } else {
                        vis.shift();
                        for (var sid in obj.pages) {
                            var sc = map.uid[sid];
                            var idx = vis.indexOf(sc);
                            if (idx == -1) {
                                obj.pages[sid] = true
                            }
                        }
                    }
                } else {
                    if (typeof bm == 'number') bm = vis[bm];
                    for (var i = vis.length - 1; i >= 0; i--) {
                        var sid = map.shortcut[vis[i]];
                        if (obj.pages[sid] != null) {
                            obj.pages[sid] = true
                        }
                    }
                }
                obj.bookmark = map.shortcut[bm] || ''
            },
            SetLesson: function(obj) {
                var f = TRACKING.backend.scorm.FIXED;
                var bm = typeof obj.bookmark == 'number' ? obj.bookmark : '';
                var pro = typeof obj.progress == 'number' ? Number(obj.progress.toFixed(f)) : 0;
                var comp = obj.completed ? 1 : 0;
                var vis = '';
                if (obj.visited) {
                    var d_vtr = TRACKING.DELIMITER.visited_tourstop_ranges;
                    var d_vtg = TRACKING.DELIMITER.visited_tourstop_groups;
                    vis = [];
                    for (var idx in obj.visited) {
                        vis.push(Number(idx))
                    }
                    vis = vis.toRangedString(d_vtr, d_vtg)
                }
                if (TRACKING.SCORABLE_LESSONS[obj.mode]) {
                    var cur = typeof obj.cur == 'number' ? Number(obj.cur.toFixed(f)) : 0;
                    var max = typeof obj.max == 'number' ? Number(obj.max.toFixed(f)) : 0;
                    var cum = typeof obj.cum == 'number' ? Number(obj.cum.toFixed(f)) : 0;
                    var min = typeof obj.min == 'number' ? Number(obj.min.toFixed(f)) : 0;
                    var succ;
                    switch (obj.passed) {
                        case false:
                            succ = 1;
                            break;
                        case true:
                            succ = 2;
                            break;
                        default:
                            succ = 0;
                            break
                    }
                    return bm || pro || comp || vis || cur || max || cum || min || succ ? [bm, pro, comp, vis, cur, max, cum, min, succ] : null
                }
                return bm || pro || comp || vis ? [bm, pro, comp, vis] : null
            },
            GetLesson: function(obj, data) {
                var bm = data[0] ? Number(data[0]) : '';
                var pro = Number(data[1]);
                var comp = Number(data[2]);
                var vis = data[3] || '';
                obj.bookmark = isNaN(bm) ? '' : bm;
                obj.progress = isNaN(pro) ? 0 : pro;
                obj.completed = isNaN(comp) ? false : Boolean(comp);
                var d_vtr = TRACKING.DELIMITER.visited_tourstop_ranges;
                var d_vtg = TRACKING.DELIMITER.visited_tourstop_groups;
                vis = vis.rangedToArray(d_vtr, d_vtg);
                obj.visited = {};
                for (var i = vis.length - 1; i >= 0; i--) {
                    obj.visited[vis[i]] = true
                }
                if (TRACKING.SCORABLE_LESSONS[obj.mode]) {
                    var cur = Number(data[4]);
                    var max = Number(data[5]);
                    var cum = Number(data[6]);
                    var min = Number(data[7]);
                    obj.cur = isNaN(cur) ? 0 : cur;
                    obj.max = isNaN(max) ? 0 : max;
                    obj.cum = isNaN(cum) ? 0 : cum;
                    obj.min = isNaN(min) ? 0 : min;
                    switch (Number(data[8])) {
                        case 1:
                            obj.passed = false;
                            break;
                        case 2:
                            obj.passed = true;
                            break;
                        default:
                            obj.passed = null;
                            break
                    }
                }
            }
        }
    };
    return {
        Destructor: function() {
            WCT.CleanupObject(this.api_);
            this.api_ = null
        },
        ObjectivesStandalone: function(os) {
            this.objectives_standalone_ = os
        },
        Set: function(sco, objectives) {
            var v = this.version_;
            var vmap = version_[v];
            var deli = TRACKING.DELIMITER;
            var loc = [];
            var map = TRACKING.central.GetShortcutMap();
            var bm = sco.bookmark != null ? map.uid[sco.bookmark] : '';
            for (var i = 0, obj = null; obj = objectives[i]; i++) {
                var is_pageset = obj.tclass == 'book';
                var id = obj.central_short_id;
                var r = vmap[is_pageset ? 'SetPageset' : 'SetLesson'](obj);
                if (r == null) continue;
                r.unshift(id);
                r.unshift(is_pageset ? vmap.PAGESET_ID : vmap.LESSON_ID);
                loc.push(r.join(deli.objective_parts))
            }
            loc = [v, bm, loc.join(deli.objectives)].join(deli.master);
            var s = this.api_.SetLocation(sco, loc);
            if (typeof s == 'boolean') TRACKING.central.ScormLocationError(s, loc);
            return loc
        },
        Get: function(sco, objectives) {
            var loc = this.api_.GetLocation(sco);
            if (typeof loc != 'string' || loc == '') return '';
            var deli = TRACKING.DELIMITER;
            var map = TRACKING.central.GetShortcutMap();
            var parts = loc.split(deli.master);
            if (parts.length != 3) return '';
            var vmap = version_[parts[0]] || null;
            if (!vmap) return '';
            sco.bookmark = parts[1] != '' ? map.shortcut[parts[1]] : null;
            var objs = parts[2] != '' ? parts[2].split(deli.objectives) : [];
            if (this.objectives_standalone_ && objs.length == 1) {
                parts = objs[0].split(deli.objective_parts);
                if (parts.length < 2) return;
                var is_pageset = parts[0] === vmap.PAGESET_ID;
                parts.splice(0, 2);
                vmap[is_pageset ? 'GetPageset' : 'GetLesson'](objectives[0], parts)
            } else {
                for (var i = objs.length - 1; i >= 0; i--) {
                    parts = objs[i].split(deli.objective_parts);
                    if (parts.length < 2) continue;
                    var is_pageset = parts[0] === vmap.PAGESET_ID;
                    var id = map.shortcut[parts[1]];
                    var idx = objectives.indexOfAtt(id, 'central_id');
                    if (idx >= 0) {
                        parts.splice(0, 2);
                        vmap[is_pageset ? 'GetPageset' : 'GetLesson'](objectives[idx], parts)
                    }
                }
            }
            return loc
        }
    }
})();
TRACKING.backend = function() {
    this.my_ = null;
    this.name_ = 'TRACKING.backend';
    this.sco_ = null;
    this.objectives_ = null;
    this.config_ = null;
    this.callback_ = null;
    this.scope_ = null
};
TRACKING.backend.prototype = {
    Destructor: function() {
        this.my_ = null;
        this.sco_ = null;
        this.objectives_ = null;
        this.config_ = null;
        this.callback_ = null;
        this.scope_ = null
    },
    GetName: function() {
        return this.name_
    },
    Init: function(sco, objs, config, callback, scope) {
        this.sco_ = sco;
        this.objectives_ = objs;
        this.config_ = config;
        this.callback_ = callback;
        this.scope_ = scope
    },
    Fini: function() {},
    Track: function(evt, obj) {},
    StoreLessonObjective: function(obj) {},
    init_done_: function() {
        this.callback_.call(this.scope_);
        this.callback_ = null;
        this.scope_ = null
    }
};
TRACKING.backend.collaborator = function() {
    TRACKING.backend.call(this);
    this.my_ = TRACKING.backend.collaborator;
    this.name_ = 'TRACKING.backend.collaborator'
};
TRACKING.backend.collaborator.prototype = new TRACKING.backend;
TRACKING.backend.collaborator.Available = function() {
    var r = DATA.GetS('.server');
    var v = r && r.response && r.response.version || null;
    return v && v.collaborator_version || null
};
TRACKING.backend.collaborator.GetCollaboratorBackendName = function(version) {
    var backend = 'collaborator';
    if (version != '@buildVersion@') {
        version = version.split('.');
        if (version.length < 2 || parseInt(version[0]) < 8 || parseInt(version[0]) == 8 && parseInt(version[1]) < 5) {
            backend = 'collaborator84'
        }
    }
    return backend
};
WCT.ExtendObject(TRACKING.backend.collaborator.prototype, (function() {
    function get_objective_init_url_(obj) {
        var mod = obj.mode || obj.tclass;
        var addr = obj.tclass + '!' + obj.uid + ':.track';
        var ext = '?mode=' + mod;
        var c = this.config_;
        if (c.assignment_id) {
            ext += '&assignmentId=' + c.assignment_id;
            if (arguments[1]) {
                if (!this.config_.restart) ext += '&startMode=continue'
            } else {
                ext += '&queryStatus=1'
            }
        }
        return DATA.context.ToAbsPath(addr) + ext
    };

    function init_objective_data_(obj, data) {
        obj.session_id = data.sessionId;
        var vis = data.visited;
        if (vis && obj.pages && vis.length) {
            for (var i = vis.length - 1; i >= 0; i--) {
                if (obj.pages[vis[i]] != null) {
                    obj.pages[vis[i]] = true
                }
            }
        }
        vis = data.tour_stops;
        if (vis && vis.length) {
            obj.visited = {};
            for (var i = vis.length - 1; i >= 0; i--) {
                obj.visited[vis[i]] = true
            }
        }
        if (typeof data.lesson_max_score == 'number') {
            obj.cum = data.lesson_max_score
        }
        if (typeof data.lesson_score == 'number') {
            obj.cur = data.lesson_score
        }
        if (typeof data.last_item != 'undefined') {
            if (obj.tclass == 'project') {
                var bm = Number(data.last_item);
                if (!isNaN(bm) && bm != 0) obj.bookmark = bm
            } else {
                obj.bookmark = data.last_item
            }
        }
    };
    return {
        Init: function() {
            TRACKING.backend.prototype.Init.apply(this, arguments);
            this.init_done_()
        },
        InitObjective: function(obj) {
            if (this.config_.restart && !arguments[1]) return;
            var url = get_objective_init_url_.apply(this, arguments);
            var r = XHR.GetS(url, 'JSON');
            if (r && r.sessionId != null) {
                init_objective_data_.call(this, obj, r)
            }
            obj.url = DATA.context.ToAbsPath(obj.tclass + '!' + obj.uid + ':.track')
        },
        ForceNewSession: function(obj) {
            var url = get_objective_init_url_.call(this, obj, true);
            url = url.replace(/&startMode=continue/, '');
            var r = XHR.GetS(url, 'JSON');
            if (r && r.sessionId != null) {
                obj.session_id = r.sessionId
            }
        },
        Track: function(evt, obj) {
            if (!this.check_session_(obj)) return;
            var info = arguments[2] || {};
            var async = true;
            var d = {
                session_id: obj.session_id
            };
            switch (evt) {
                case 'pageset_open':
                    d.id = 'book_open';
                    d.total_pages = obj.total_pages;
                    break;
                case 'pageset_progress':
                    if (info.slide_id) {
                        d.id = 'slide_load';
                        d.slide_id = info.slide_id
                    }
                    break;
                case 'pageset_close':
                    d.id = 'book_close';
                    async = false;
                    break;
                case 'lesson_start':
                    if (obj.active) {
                        d.id = 'tour_start';
                        d.tour_stops = obj.total_steps
                    }
                    break;
                case 'lesson_commit':
                    var ts_uid = obj.tourstops.order_.top();
                    var ts = obj.tourstops[ts_uid];
                    if (ts.committed_ > 1) return;
                    d.id = 'tour_sub_end';
                    WCT.ExtendObject(d, this.handle_tourstop_(ts));
                    async = false;
                    break;
                case 'lesson_end':
                    d.id = 'tour_end';
                    d.program_index = obj.bookmark;
                    d.timestamp = obj.end_time;
                    d.tour_stops = obj.completed ? obj.cumulated_steps : obj.total_steps;
                    d.completed = obj.completed;
                    if (obj.is_scorable) {
                        d.max_score = obj.cum;
                        d.pass_score = obj.min;
                        d.score = obj.cur;
                        d.passed = obj.passed || false
                    }
                    async = false;
                    break;
                default:
                    return
            }
            if (d.id) {
                var fun = async ? 'PostA' : 'PostS';
                XHR[fun](obj.url, d);
                if (evt == 'lesson_end' || evt == 'pageset_close') {
                    TRACKING.RefreshCollaborator()
                }
            }
        },
        check_session_: function(obj) {
            if (typeof obj.session_id == 'undefined') {
                obj.session_id = null;
                this.InitObjective(obj, true)
            }
            return obj.session_id ? true : false
        },
        handle_tourstop_: function(ts) {
            var c = this.config_;
            var r = {
                caption: ts.title,
                current_score: ts.cur,
                max_score: ts.cum,
                program_index: ts.idx,
                timestamp: ts.start_time != null ? ts.start_time : ts.timestamp,
                ts_uid: ts.uid,
                macros: []
            };
            for (var i = 0, m_uid = null; m_uid = ts.macros.order_[i]; i++) {
                var mac = ts.macros[m_uid];
                var m_info = {
                    caption: mac.caption,
                    macro_uid: m_uid,
                    timestamp: mac.timestamp
                };
                if (mac.description) m_info.description = mac.description;
                if (c.detail_tracking) {
                    if (c.detail_tracking > 1 && mac.events && mac.events.length) {
                        m_info.macro_events = [];
                        for (var j = 0, e = null; e = mac.events[j]; j++) {
                            if (e.id != 'task_info') {
                                m_info.macro_events.push(e)
                            }
                        }
                    }
                    if (mac.cur != null && mac.cum != null) {
                        this.set_macro_score_(m_info, ts, mac)
                    }
                }
                r.macros.push(m_info)
            }
            return r
        },
        set_macro_score_: function(m_info, ts, mac) {
            m_info.action_score = mac.cur;
            m_info.max_score = mac.cum
        }
    }
})());
TRACKING.backend.collaborator84 = function() {
    TRACKING.backend.collaborator.call(this);
    this.my_ = TRACKING.backend.collaborator84;
    this.name_ = 'TRACKING.backend.collaborator84'
};
TRACKING.backend.collaborator84.prototype = new TRACKING.backend.collaborator;
WCT.ExtendObject(TRACKING.backend.collaborator84.prototype, {
    Track: function(evt, obj) {
        if (!this.check_session_(obj)) return;
        var info = arguments[2] || {};
        var async = true;
        var d = {
            session_id: obj.session_id
        };
        switch (evt) {
            case 'pageset_progress':
                if (info.slide_id) {
                    d.id = 'slide_load';
                    d.slide_id = info.slide_id;
                    d.isBook = true;
                    d.currentPage = info.slide_nbr;
                    d.totalPages = obj.total_pages
                }
                break;
            case 'lesson_commit':
                d.id = 'tour_sub_start';
                d.program_index = obj.bookmark;
                var len = obj.tourstops.order_.length;
                if (len > 1) {
                    var pts_uid = obj.tourstops.order_[len - 2];
                    var pts = obj.tourstops[pts_uid];
                    if (pts.committed_ == 1) {
                        d.prev_tour_stop = this.handle_tourstop_(pts)
                    }
                }
                async = false;
                break;
            case 'lesson_end':
                d.id = 'tour_stop';
                d.status = obj.completed && obj.passed ? 'passed' : 'failed';
                var lts_uid = obj.tourstops.order_.top();
                var lts = obj.tourstops[lts_uid];
                if (lts && lts.committed_ == 1) {
                    d.prev_tour_stop = this.handle_tourstop_(lts)
                }
                XHR.PostS(obj.url, d);
                if (obj.is_scorable) {
                    this.Track('lesson_passed_status', obj, info)
                }
                this.Track('lesson_completed_status', obj, info);
                TRACKING.RefreshCollaborator();
                return;
                break;
            case 'lesson_passed_status':
                d.id = evt;
                d.lesson_max_score = obj.cum;
                d.lesson_pass_score = obj.min;
                d.lesson_score = obj.cur;
                d.lesson_status = obj.completed && obj.passed ? 'PASSED' : 'FAILED';
                async = false;
                break;
            case 'lesson_completed_status':
                d.id = evt;
                if (obj.completed) {
                    d.status = 'completed';
                    d.tour_stops = obj.cumulated_steps
                } else {
                    d.status = 'incomplete';
                    d.tour_stops = obj.total_steps
                }
                async = false;
                break;
            default:
                return TRACKING.backend.collaborator.prototype.Track.apply(this, arguments)
        }
        if (d.id) {
            var fun = async ? 'PostA' : 'PostS';
            XHR[fun](obj.url, d)
        }
    },
    set_macro_score_: function(m_info, ts, mac) {
        if (!m_info.macro_events) m_info.macro_events = [];
        m_info.macro_events.push({
            id: 'macro_score',
            action_score: mac.cur,
            max_score: mac.cum,
            timestamp: ts.timestamp
        })
    }
});
TRACKING.backend.scorm = function(version, scorm) {
    TRACKING.backend.call(this);
    this.my_ = TRACKING.backend.scorm;
    this.name_ = 'TRACKING.backend.scorm';
    this.scorm_ = new TRACKING.connector[version](scorm);
    this.scorm_ok_ = false;
    this.bookmark_ = new TRACKING.bookmark(this.scorm_, TRACKING.bookmark.MAX_VERSION)
};
TRACKING.backend.scorm.prototype = new TRACKING.backend;
TRACKING.backend.scorm.FIXED = 2;
(function() {
    function scan_(win) {
        var cur = 0;
        var max = 20;
        var api_12 = null;
        var api_2004 = null;
        try {
            do {
                if (!api_12) api_12 = win.API && !win.API.T2_API ? win.API : null;
                if (!api_2004) api_2004 = win.API_1484_11 || null;
                win = win.parent
            } while (!(api_12 && api_2004) && win && ++cur <= max)
        } catch (e) {
            Log('Unable to scan for SCORM API!')
        }
        return api_12 || api_2004 ? {
            '12': api_12,
            '2004': api_2004
        } : null
    };
    TRACKING.backend.scorm.FindAPI = function(win) {
        var req = false;
        var r = win.parent ? scan_(win.parent) : null;
        var dist = 0;
        while (!r && dist++ < 3 && win.opener && typeof win.opener === 'object') {
            win = win.opener;
            r = scan_(win)
        }
        if (r && (r['12'] || r['2004'])) {
            MANAGER.OpenerRequired(true)
        }
        return r
    };
    TRACKING.backend.scorm.FormatScore = function(cur, max, uom, sp, sp100) {
        if (uom) {
            max = 1;
            sp = 2;
            sp100 = false
        }
        var p = Math.pow(10, sp);
        var m = sp100 ? 100 : 1;
        return max <= 0 ? 0 : Math.round(m * p * cur / max) / p
    }
})();
WCT.ExtendObject(TRACKING.backend.scorm.prototype, (function() {
    function init_from_objectives_() {
        var sos = this.scorm_.InitObjectives();
        var d = TRACKING.DELIMITER.scorm_short_id;
        for (var id in sos) {
            if (id == 'count_') continue;
            var short_id = id.split(d)[0];
            sos[short_id] = sos[id]
        }
        var bm = this.config_.scorm_browse_mode;
        var created = false;
        var objs = this.objectives_;
        for (var i = 0, o = null; o = objs[i]; i++) {
            var id = o.central_short_id;
            if (sos[id]) {
                o.scorm_pos = sos[id].scorm_pos
            } else if (!bm) {
                create_objective_.call(this, o);
                created = true
            }
        }
        if (created && !this.config_.scorm_only_one_commit) {
            this.scorm_.DoCommit()
        }
    };

    function set_score_() {
        var sco = this.sco_;
        var cfg = this.config_;
        if (sco.scored_objects == 0 || cfg.scorm_browse_mode) return;
        var uom = cfg.scorm_use_original_max;
        var sp = cfg.scorm_score_precision;
        var sp100 = cfg.scorm_score_percentage100;
        var me = this.my_;
        var cur = me.FormatScore(sco.cur, sco.max, uom, sp, sp100);
        var max = me.FormatScore(sco.max, sco.max, uom, sp, sp100);
        var sca = null;
        if (sco.max > 0) {
            sca = sco.cur / sco.max;
            sca = Number(sca.toFixed(TRACKING.backend.scorm.FIXED))
        }
        var s = this.scorm_;
        s.SetMinScore(0);
        s.SetMaxScore(max);
        s.SetCurrentScore(cur);
        s.SetScaledScore(sca)
    };

    function set_obj_score_(obj) {
        if (obj.scorm_pos == null || this.config_.scorm_browse_mode) return;
        var max = null;
        var cur;
        if (obj.track_completion_as_score && obj.progress != null) {
            max = 1;
            cur = obj.progress
        } else if (obj.is_scorable && obj.track_score !== false) {
            max = obj.completed ? obj.cum : Math.max(obj.cum, obj.max);
            cur = obj.cur
        }
        if (max != null) {
            var cfg = this.config_;
            var uom = cfg.scorm_use_original_max;
            var sp = cfg.scorm_score_precision;
            var sp100 = cfg.scorm_score_percentage100;
            var sca = null;
            if (max > 0) {
                sca = cur / max;
                sca = Number(sca.toFixed(TRACKING.backend.scorm.FIXED))
            }
            var me = this.my_;
            cur = me.FormatScore(cur, max, uom, sp, sp100);
            max = me.FormatScore(max, max, uom, sp, sp100);
            var s = this.scorm_;
            var p = obj.scorm_pos;
            s.SetObjectiveMinScore(p, 0);
            s.SetObjectiveMaxScore(p, max);
            s.SetObjectiveCurrentScore(p, cur);
            s.SetObjectiveScaledScore(p, sca)
        }
    };

    function get_config_passed_(passed, onscore_condition) {
        var ts = TRACKING.SCORM;
        switch (this.config_.scorm_decide_passed) {
            case ts.PASSED_NEVER:
                passed = null;
                break;
            case ts.PASSED_ONSCORED:
                if (onscore_condition) {
                    passed = passed || false
                }
                break
        }
        return passed
    };

    function set_status_() {
        if (this.config_.scorm_browse_mode) return;
        var sco = this.sco_;
        var passed = get_config_passed_.call(this, sco.passed, sco.scored_objects > 0);
        var scorm = this.scorm_;
        if (sco.completed != null || passed != null) {
            scorm.SetStatus(sco.completed, passed)
        }
        scorm.SetProgressMeasure(Number(sco.progress.toFixed(TRACKING.backend.scorm.FIXED)));
        var time = 0;
        if (typeof sco.start_time == 'number') {
            var end_time = typeof sco.end_time == 'number' ? sco.end_time : (new Date()).getTime();
            time = end_time - sco.start_time;
            scorm.SetSessionTime(time)
        }
        return time
    };

    function set_obj_status_(obj) {
        if (obj.scorm_pos == null || this.config_.scorm_browse_mode) return;
        if (obj.track_completion !== false) {
            var passed = null;
            if (obj.track_score !== false || obj.track_completion_as_score) {
                passed = obj.tclass == 'project' ? get_config_passed_.call(this, obj.passed, false) : null
            }
            this.scorm_.SetObjectiveStatus(obj.scorm_pos, obj.completed, passed, false)
        }
        if (typeof obj.progress == 'number') {
            var pr = Number(obj.progress.toFixed(TRACKING.backend.scorm.FIXED));
            this.scorm_.SetObjectiveProgressMeasure(obj.scorm_pos, pr)
        }
    };

    function create_objective_(obj) {
        var cur = null;
        var max = null;
        var title = obj.title || '';
        if (obj.tclass == 'project') {
            if (obj.track_completion_as_score) {
                cur = 0;
                max = 100
            } else if (obj.is_scorable && obj.track_score !== false) {
                cur = typeof obj.cur == 'number' ? obj.cur : 0;
                max = typeof obj.max == 'number' ? obj.max : 0
            }
            title += ' ' + obj.mode
        }
        var d = TRACKING.DELIMITER.scorm_short_id;
        var uid = obj.central_short_id + d + title.replace(/[^\w]/g, d);
        if (uid.length > 255) uid = uid.substr(0, 255);
        obj.scorm_pos = this.scorm_.CreateObjective(uid, cur, max, null, null, title != '' ? title : null)
    };
    return {
        Destructor: function() {
            this.scorm_.Destructor();
            this.scorm_ = null;
            this.bookmark_.Destructor();
            this.bookmark_ = null;
            this.scorm_ok_ = false;
            TRACKING.backend.prototype.Destructor.call(this)
        },
        Init: function(sco, objs, config, callback, scope) {
            TRACKING.backend.prototype.Init.apply(this, arguments);
            this.scorm_ok_ = this.scorm_.Init(config.scorm_safe_mode, config.scorm_location);
            if (this.scorm_ok_) {
                var ts = TRACKING.SCORM;
                var entry = this.scorm_.GetEntry();
                config.scorm_entry = entry;
                config.scorm_browse_mode = this.scorm_.GetMode() == ts.MODE_BROWSE;
                if (!config.scorm_ignore_bookmark) {
                    this.bookmark_.Get(sco, objs)
                }
                if (config.scorm_objective_tracking) {
                    init_from_objectives_.apply(this)
                }
                TRACKING.debug.Track({
                    source: 'BE_scorm.Init',
                    entry: config.scorm_entry,
                    browse_mode: config.scorm_browse_mode
                })
            } else {
                TRACKING.debug.Track({
                    source: 'BE_scorm.Init',
                    success: false
                })
            }
            this.init_done_()
        },
        Fini: function() {
            if (this.scorm_ok_) {
                var time = '';
                var scorm = this.scorm_;
                var sco = this.sco_;
                if (!this.config_.scorm_browse_mode) {
                    time = set_status_.call(this);
                    scorm.DoCommit();
                    scorm.SetExit(sco.completed, this.config_.scorm_nav_request)
                }
                scorm.Fini();
                TRACKING.debug.Track({
                    source: 'BE_scorm.fini',
                    completed: sco.completed,
                    passed: sco.passed,
                    time: time
                })
            }
        },
        StoreLessonObjective: function(obj) {
            if (!this.scorm_ok_) return;
            var cfg = this.config_;
            if (!cfg.scorm_browse_mode) {
                this.bookmark_.Set(this.sco_, this.objectives_)
            }
            set_score_.call(this);
            set_status_.call(this);
            if (cfg.scorm_objective_tracking) {
                set_obj_score_.call(this, obj);
                set_obj_status_.call(this, obj)
            }
            if (!cfg.scorm_only_one_commit) {
                this.scorm_.DoCommit()
            }
        },
        Track: function(evt, obj) {
            if (!this.scorm_ok_) return;
            var cfg = this.config_;
            var is_o = cfg.scorm_objective_tracking;
            if (is_o && obj.scorm_pos == null && !cfg.scorm_browse_mode) {
                create_objective_.call(this, obj)
            }
            switch (evt) {
                case 'pageset_open':
                case 'pageset_progress':
                case 'lesson_start':
                case 'lesson_progress':
                    if (!cfg.scorm_browse_mode) {
                        this.bookmark_.Set(this.sco_, this.objectives_)
                    }
                    break;
                case 'pageset_close':
                    set_status_.call(this);
                    is_o && set_obj_status_.call(this, obj);
                    break;
                case 'lesson_commit':
                    if (!cfg.scorm_browse_mode) {
                        this.bookmark_.Set(this.sco_, this.objectives_)
                    }
                    set_score_.call(this);
                    is_o && set_obj_score_.call(this, obj);
                    break;
                case 'lesson_end':
                    this.StoreLessonObjective(obj);
                    return;
                    break;
                default:
                    return
            }
            if (!cfg.scorm_only_one_commit) {
                this.scorm_.DoCommit()
            }
        }
    }
})());
TRACKING.backend.aicc = function() {
    TRACKING.backend.call(this);
    this.my_ = TRACKING.backend.aicc;
    this.name_ = 'TRACKING.backend.aicc';
    this.api_ = this.my_.FindAPI();
    this.data_ = null;
    this.flash_wnd_ = null;
    this.flash_callback_ = null;
    this.flash_abort_ = false;
    this.flash_timeout_ = null;
    this.bm_api_ = {
        Location: '',
        handler_: null,
        GetLocation: function(sco) {
            return this.Location
        },
        SetLocation: function(sco, loc) {
            var d = this.handler_ && this.handler_.data_;
            if (d) d.core.lesson_location = loc
        }
    };
    this.bm_api_.handler_ = this;
    this.bookmark_ = new TRACKING.bookmark(this.bm_api_, TRACKING.bookmark.MAX_VERSION)
};
TRACKING.backend.aicc.prototype = new TRACKING.backend;
WCT.ExtendObject(TRACKING.backend.aicc, {
    STATUS: {
        p: 'passed',
        c: 'completed',
        f: 'failed',
        i: 'incomplete',
        b: 'browsed',
        n: 'not-attempted'
    },
    ENTRY: {
        '': null,
        a: 'ab-initio',
        r: 'resume'
    },
    EXIT: {
        '': '',
        l: 'logout',
        t: 'time-out',
        s: 'suspend'
    },
    MODE: {
        b: 'browse',
        n: 'normal',
        r: 'review'
    },
    FLASH_TIMEOUT: 45000,
    FindAPI: function() {
        var p = DATA.GetUrlParams();
        var sid = null;
        var url = null;
        for (var i in p) {
            if (i.toLowerCase() == 'aicc_sid') {
                sid = p[i]
            } else if (i.toLowerCase() == 'aicc_url') {
                url = p[i]
            }
        }
        return sid && url ? {
            sid: sid,
            url: url
        } : null
    },
    GetAiccRelay: function() {
        var plugin = $('AiccRelay');
        return BROWSER.IE ? plugin : plugin ? plugin.getElementsByTagName('embed')[0] : null
    },
    AppletReady: function() {
        var ct = MANAGER.GetCentralTracker();
        var me = ct ? ct.GetBackend() : null;
        if (!me) return;
        var applet = me.my_.GetAiccRelay();
        try {
            applet.AiccInit(me.api_.url, me.api_.sid)
        } catch (e) {}
        me.init_()
    },
    FlashAbort: function() {
        this.flash_abort_ = true;
        this.flash_timeout_ = null;
        try {
            this.flash_wnd_.AiccAbort()
        } catch (e) {}
        this.flash_wnd_ = null;
        window.AiccReady = function() {};
        window.AiccError = function() {};
        window.AiccComplete = function() {};
        TRACKING.debug.Track({
            source: 'BE_aicc.FlashAbort',
            tracking: 'disabled'
        });
        this.init_()
    },
    FlashReady: function() {
        var ct = MANAGER.GetCentralTracker();
        var me = ct ? ct.GetBackend() : null;
        if (!me || me.flash_abort_) return;
        WCT.ClearTimeout(me.flash_timeout_);
        me.flash_timeout_ = null;
        TRACKING.debug.Track({
            source: 'BE_aicc.FlashReady',
            url: me.api_.url,
            sid: me.api_.sid
        });
        me.init_()
    },
    FlashComplete: function(resp) {
        var ct = MANAGER.GetCentralTracker();
        var me = ct ? ct.GetBackend() : null;
        if (me) me.flash_complete_(resp)
    },
    FlashError: function(error) {
        var ct = MANAGER.GetCentralTracker();
        var me = ct ? ct.GetBackend() : null;
        if (!me) return;
        me.flash_wnd_ = null;
        TRACKING.debug.Track({
            source: 'BE_aicc.FlashError',
            sid: me.api_.sid,
            error: error
        });
        me.flash_complete_('')
    }
});
WCT.ExtendObject(TRACKING.backend.aicc.prototype, (function() {
    function parse_object_(data) {
        var o = {};
        while (data.length) {
            var cur = data[0];
            if ((m = cur.match(/\[(.*)\]/)) != null) return o;
            data.shift();
            cur = cur.split('=');
            cur[0] = (cur[0] || '').toLowerCase().trim();
            if (cur[0]) o[cur[0]] = (cur[1] || '').trim()
        }
        return o
    };

    function parse_string_(data) {
        var s = '';
        while (data.length) {
            var cur = data[0];
            if ((m = cur.match(/\[(.*)\]/)) != null) return s;
            data.shift();
            s += cur
        }
        return s
    };

    function parse_(resp) {
        resp = resp.replace(/<pre>|<\/pre>/ig, '').replace(/\r/g, '').split('\n');
        var pobj = {
            status: 1,
            core: 1,
            student_data: 1
        };
        var data = {};
        while (resp.length) {
            var cur = resp[0];
            var m = null;
            if ((m = cur.match(/\[(.*)\]/)) != null) {
                var mode = m[1].toLowerCase();
                resp.shift();
                if (pobj[mode]) {
                    data[mode] = parse_object_(resp)
                } else {
                    data[mode] = parse_string_(resp)
                }
            } else if (!data.status) {
                data.status = parse_object_(resp)
            }
        }
        return data
    };

    function stringify_(data) {
        var c = data.core;
        var ls = c.lesson_status;
        if (c.credit == 'no-credit') {
            var exit = ls.split(',')[1] || '';
            ls = TRACKING.backend.aicc.STATUS.b + ',' + exit
        }
        ls = ls.replace(/,$/, '');
        return ['[Core]', 'lesson_location = 1', 'lesson_status = ' + ls, 'score = ' + c.score || '', 'time = ' + c.time, '[Core_Lesson]', c.lesson_location].join('\r\n')
    };

    function send_xhr_(cmd) {
        var data = '';
        var async = false;
        if (cmd == 'putparam') {
            data = stringify_(this.data_);
            async = arguments[1] !== false
        }
        var a = this.api_;
        var d = ['session_id=' + a.sid, 'version=4.0', 'command=' + cmd, 'aicc_data=' + data].join('&');
        XHR.SetRequestHeaders({
            'Content-Type': 'application/x-www-form-urlencoded'
        });
        var resp = XHR[async ? 'PostA' : 'PostS'](a.url, d, 'raw');
        var rdat = resp ? parse_(resp) : null;
        TRACKING.debug.Track({
            source: 'BE_aicc.send_',
            sid: a.sid,
            async: async,
            command: cmd,
            data: data,
            resp: resp
        });
        return rdat
    };

    function send_applet_(cmd) {
        var data = cmd == 'putparam' ? stringify_(this.data_) : '';
        var applet = this.my_.GetAiccRelay();
        var ok = true;
        var resp;
        try {
            resp = applet.AiccRequest(cmd, data)
        } catch (e) {
            resp = '';
            ok = false
        }
        var rdat = parse_(resp);
        TRACKING.debug.Track({
            source: 'BE_aicc.send_applet_',
            sid: this.api_.sid,
            applet_ok: ok,
            command: cmd,
            data: data,
            resp: resp
        });
        return rdat
    };

    function send_flash_(cmd) {
        var data = cmd == 'putparam' ? stringify_(this.data_) : '';
        TRACKING.debug.Track({
            source: 'BE_aicc.send_flash_',
            sid: this.api_.sid,
            command: cmd,
            data: data
        });
        try {
            this.flash_wnd_.AiccRequest(cmd, data);
            return
        } catch (e) {}
        TRACKING.debug.Track({
            source: 'BE_aicc.send_flash_',
            ok: false
        })
    };

    function send_(cmd) {
        var cfg = this.config_;
        if (cfg.aicc_crossdomain == 'java') {
            if (cmd != 'putparam' || callback != undefined) {
                return send_applet_.call(this, cmd)
            }
        } else if (cfg.aicc_crossdomain == 'flash') {
            if (this.flash_abort_) {
                return {}
            } else if (typeof arguments[1] == 'function') {
                this.flash_callback_ = arguments[1];
                send_flash_.call(this, cmd)
            }
        } else {
            return send_xhr_.call(this, cmd, arguments[2])
        }
        return null
    };

    function set_score_() {
        var sco = this.sco_;
        var cfg = this.config_;
        if (sco.scored_objects == 0 || cfg.aicc_browse_mode) return;
        var sp = cfg.aicc_score_precision;
        var tbs = TRACKING.backend.scorm;
        var cur = tbs.FormatScore(sco.cur, sco.max, false, sp, true);
        var max = tbs.FormatScore(sco.max, sco.max, false, sp, true);
        var c = this.data_.core;
        if (typeof cur == 'number' && cur >= 0) {
            c.score = cur;
            if (typeof max == 'number' && max >= 0) {
                c.score += ',' + max + ',0'
            } else {
                c.score += ',0,0'
            }
        } else {
            c.score = ''
        }
    };

    function get_config_passed_(passed, onscore_condition) {
        var ts = TRACKING.SCORM;
        switch (this.config_.aicc_decide_passed) {
            case ts.PASSED_NEVER:
                passed = null;
                break;
            case ts.PASSED_ONSCORED:
                if (onscore_condition) {
                    passed = passed || false
                }
                break
        }
        return passed
    };

    function set_status_() {
        if (this.config_.aicc_browse_mode) return;
        var sco = this.sco_;
        var pass = get_config_passed_.call(this, sco.passed, sco.scored_objects > 0);
        var comp = sco.completed;
        if (comp != null || pass != null) {
            var st = this.my_.STATUS;
            var co = this.data_.core;
            if (pass === true) {
                co.lesson_status = st.p
            } else if (pass === false) {
                co.lesson_status = st.f
            } else if (comp === true) {
                co.lesson_status = st.c
            } else if (comp === false) {
                co.lesson_status = st.i
            } else {
                co.lesson_status = st.b
            }
        }
        var time = 0;
        if (typeof sco.start_time == 'number') {
            var end_time = typeof sco.end_time == 'number' ? sco.end_time : (new Date()).getTime();
            time = TRACKING.connector.scorm12.prototype.format_duration_(end_time - sco.start_time)
        }
        return time
    };

    function flash_init_() {
        var dm = this.config_.debug_mode;
        var opt = 'yes';
        var x = '0';
        var y = '0';
        if (!dm) {
            opt = 'no';
            x = screen.availWidth + 500;
            y = screen.availHeight + 500
        }
        var a = this.api_;
        a = 'url=' + escape(a.url) + '&sid=' + escape(a.sid) + '&debug=' + (dm ? 1 : 0);
        var me = this.my_;
        window.AiccReady = me.FlashReady;
        window.AiccError = me.FlashError;
        window.AiccComplete = me.FlashComplete;
        var format = ['top=' + y, 'left=' + x, 'width=10', 'height=10', 'menubar=no', 'toolbar=no', 'location=no', 'resizable=' + opt, 'scrollbars=' + opt, 'status=no'].join(',');
        try {
            this.flash_wnd_ = window.open(DATA.context.ToAbsPath('trainer:aicc.html') + '?' + a, 'aicc_comm', format, false)
        } catch (e) {
            this.flash_wnd_ = null
        }
        this.flash_timeout_ = WCT.SetTimeout(me.FlashAbort, me.FLASH_TIMEOUT, this)
    };

    function applet_init_() {
        if ($('AiccRelay')) {
            this.my_.AppletReady();
            return
        }
        window.DgoAiccAppletReady = this.my_.AppletReady;
        var c = $$('div');
        c.id = 'AiccRelay#container';
        c.innerHTML = ['<object', ' id="AiccRelay"', ' code="AiccRelay.class"', ' archive="AiccRelay.jar"', ' width="1"', ' height="1"', '>', '<param name="code" value="AiccRelay.class" />', '<param name="archive" value="AiccRelay.jar" />', '<embed', ' name="AiccRelay"', ' code="AiccRelay.class"', ' archive="AiccRelay.jar"', ' pluginspage="http://java.com/download"', ' type="application/x-java-applet"', ' width="1"', ' height="1"', '/>', '</object>'].join('');
        if (BROWSER.IE) {
            c.style.display = 'none'
        } else {
            c.style.visibility = 'hidden'
        }
        document.body.appendChild(c)
    };

    function flash_fini_() {
        var data = stringify_(this.data_);
        try {
            this.flash_wnd_.AiccFini(data);
            return
        } catch (e) {}
        TRACKING.debug.Track({
            source: 'BE_aicc.flash_fini_',
            sid: this.api_.sid,
            ok: false
        })
    };
    return {
        Destructor: function() {
            WCT.ClearTimeout(this.flash_timeout_);
            this.flash_timeout_ = null;
            var cont = $('AiccRelay#container');
            if (cont) cont.parentNode.removeChild(cont);
            var plugin = $('AiccRelay');
            if (plugin) plugin.parentNode.removeChild(plugin);
            window.DgoAiccAppletReady = null;
            window.AiccReady = null;
            window.AiccError = null;
            window.AiccComplete = null;
            if (this.bm_api_) {
                this.bm_api_.handler_ = null;
                this.bm_api_ = null
            }
            this.bookmark_.Destructor();
            this.bookmark_ = null;
            WCT.CleanupObject(this.data_);
            this.data_ = null;
            this.flash_callback_ = null;
            this.flash_wnd_ = null;
            TRACKING.backend.prototype.Destructor.call(this)
        },
        Init: function(sco, objs, config, callback, scope) {
            TRACKING.backend.prototype.Init.apply(this, arguments);
            if (config.aicc_crossdomain == 'java') {
                applet_init_.call(this)
            } else if (config.aicc_crossdomain == 'flash') {
                flash_init_.call(this)
            } else {
                this.init_()
            }
        },
        Fini: function() {
            var d = this.data_;
            var s = this.sco_;
            var c = this.config_;
            if (!c.aicc_browse_mode) {
                d.core.time = set_status_.call(this);
                d.core.lesson_status += ',' + this.my_.EXIT[s.completed ? '' : 's']
            }
            if (c.aicc_crossdomain == 'flash') {
                flash_fini_.call(this)
            } else {
                if (!c.aicc_browse_mode) send_.call(this, 'putparam', null, false);
                send_.call(this, 'exitau');
                TRACKING.debug.Track({
                    source: 'BE_aicc.fini',
                    completed: s.completed,
                    passed: s.passed,
                    time: d.core && d.core.time || ''
                })
            }
        },
        StoreLessonObjective: function(obj) {
            var cfg = this.config_;
            if (!cfg.aicc_browse_mode) {
                this.bookmark_.Set(this.sco_, this.objectives_)
            }
            set_score_.call(this);
            set_status_.call(this);
            send_.call(this, 'putparam')
        },
        Track: function(evt, obj) {
            var cfg = this.config_;
            switch (evt) {
                case 'pageset_open':
                case 'pageset_progress':
                case 'lesson_start':
                case 'lesson_progress':
                    if (!cfg.aicc_browse_mode) {
                        this.bookmark_.Set(this.sco_, this.objectives_)
                    }
                    break;
                case 'pageset_close':
                    set_status_.call(this);
                    break;
                case 'lesson_commit':
                    if (!cfg.aicc_browse_mode) {
                        this.bookmark_.Set(this.sco_, this.objectives_)
                    }
                    set_score_.call(this);
                    break;
                case 'lesson_end':
                    this.StoreLessonObjective(obj);
                    return;
                    break;
                default:
                    return
            }
            send_.call(this, 'putparam')
        },
        init_: function() {
            var data = send_.call(this, 'getparam', this.init2_);
            if (data != null) this.init2_(data)
        },
        init2_: function(data) {
            if (!data.core) data.core = {};
            this.data_ = data;
            var me = this.my_;
            var cfg = this.config_;
            var core = data.core;
            var suspend = data.core_lesson || '';
            var mo = (core.lesson_mode || '').toLowerCase().trim().charAt(0);
            var ls = (core.lesson_status || '').toLowerCase().split(',');
            var st = (ls[0] || '').trim().charAt(0);
            var en = (ls[1] || '').trim().charAt(0);
            cfg.aicc_browse_mode = me.MODE[mo] == 'browse';
            cfg.aicc_entry = me.ENTRY[en];
            core.lesson_status = me.STATUS[st];
            this.bm_api_.Location = '';
            if (!cfg.aicc_ignore_bookmark) {
                this.bm_api_.Location = suspend || core.lesson_location || '';
                this.bookmark_.Get(this.sco_, this.objectives_)
            }
            core.lesson_location = this.bm_api_.Location;
            TRACKING.debug.Track({
                source: 'BE_aicc.Init',
                entry: cfg.aicc_entry,
                browse_mode: cfg.aicc_browse_mode
            });
            this.init_done_()
        },
        flash_complete_: function(resp) {
            TRACKING.debug.Track({
                source: 'BE_aicc.flash_complete_',
                sid: this.api_.sid,
                resp: resp
            });
            if (this.flash_callback_) {
                var rdat = parse_(resp);
                this.flash_callback_.call(this, rdat);
                this.flash_callback_ = null
            }
        }
    }
})());
TRACKING.backend.cookie = function() {
    TRACKING.backend.call(this);
    this.my_ = TRACKING.backend.cookie;
    this.name_ = 'TRACKING.backend.cookie';
    var api = {
        CKEY: WCT.store.KEYS.backend_cookie,
        MAX_LEN: 2000,
        Cleanup: function(sco) {
            var k = this.CKEY + sco.uid;
            if (sco.mode) k += sco.mode.charAt(0);
            var i = 0;
            var d = WCT.store.Get(k + i);
            while (d != null) {
                WCT.cookie.Remove(k + i);
                d = WCT.store.Get(k + (++i))
            }
            WCT.cookie.Remove(k)
        },
        GetLocation: function(sco) {
            var k = this.CKEY + sco.uid;
            if (sco.mode) k += sco.mode.charAt(0);
            var c = WCT.store.Get(k);
            if (c == null) {
                var i = 0;
                var d = WCT.store.Get(k + i);
                while (d != null) {
                    if (c == null) {
                        c = d
                    } else {
                        c += d
                    }
                    d = WCT.store.Get(k + (++i))
                }
            }
            Log('Loaded Cookie (' + k + '): ' + c);
            return c
        },
        SetLocation: function(sco, loc) {
            var ll = loc.length;
            var ml = this.MAX_LEN;
            var k = this.CKEY + sco.uid;
            if (sco.mode) k += sco.mode.charAt(0);
            this.Cleanup(sco);
            if (ll < ml) {
                WCT.store.Set(k, loc)
            } else {
                var c = Math.ceil(ll / ml);
                for (var i = 0; i < c; i++) {
                    var d = loc.substring(i * ml, (i + 1) * ml);
                    WCT.store.Set(k + i, d)
                }
            }
            Log('Saved Cookie (' + k + '): ' + loc)
        }
    };
    this.bookmark_ = new TRACKING.bookmark(api, TRACKING.bookmark.MAX_VERSION)
};
TRACKING.backend.cookie.prototype = new TRACKING.backend;
WCT.ExtendObject(TRACKING.backend.cookie.prototype, (function() {
    function set_os_(obj) {
        var s = {
            uid: obj.uid
        };
        if (obj.mode) s.mode = obj.mode;
        this.bookmark_.Set(s, [obj])
    };

    function set_(obj) {
        if (this.config_.objectives_standalone) {
            set_os_.call(this, obj);
            return
        }
        var s = this.sco_;
        var l = this.bookmark_.Set(s, this.objectives_);
        var k = WCT.store.KEYS.backend_cookie + s.uid;
        if (s.mode) k += s.mode.charAt(0);
        TRACKING.debug.Track({
            source: 'BE_cookie.set',
            name: k,
            len: l.length,
            content: l
        })
    };
    return {
        Destructor: function() {
            this.bookmark_.Destructor();
            this.bookmark_ = null;
            TRACKING.backend.prototype.Destructor.call(this)
        },
        Init: function(sco, objs, config, callback, scope) {
            TRACKING.backend.prototype.Init.apply(this, arguments);
            if (config.objectives_standalone) {
                this.bookmark_.ObjectivesStandalone(true)
            }
            var l = this.bookmark_.Get(sco, objs);
            var k = WCT.store.KEYS.backend_cookie + sco.uid;
            if (sco.mode) k += sco.mode.charAt(0);
            TRACKING.debug.Track({
                source: 'BE_cookie.get',
                name: k,
                len: l.length,
                cookie: l
            });
            this.init_done_()
        },
        InitObjective: function(obj) {
            if (!this.config_.objectives_standalone) return;
            var s = {
                uid: obj.uid
            };
            if (obj.mode) s.mode = obj.mode;
            this.bookmark_.Get(s, [obj])
        },
        StoreLessonObjective: function(obj) {
            set_.call(this, obj)
        },
        Track: function(evt, obj) {
            switch (evt) {
                case 'pageset_open':
                case 'pageset_progress':
                case 'pageset_close':
                case 'lesson_start':
                case 'lesson_progress':
                case 'lesson_commit':
                case 'lesson_end':
                    set_.call(this, obj);
                    break
            }
        }
    }
})());
TRACKING.debug = {
    KEY_WIDTH: 240,
    VALUE_WIDTH: 320,
    STATUS_HEIGHT: 340,
    LOG_HEIGHT: 340,
    wnd_: null,
    enabled_: false,
    ready_: false,
    backend_: {
        name: null,
        type: null
    },
    source_list_: {}
};
(function() {
    function create_wnd_() {
        var my = TRACKING.debug;
        my.source_list_ = {};
        try {
            var w = my.KEY_WIDTH + my.VALUE_WIDTH + 60;
            var h = my.STATUS_HEIGHT + my.LOG_HEIGHT + 120;
            var wnd = window.open('', 'TRACKING_debug_window', 'width=' + w + ',height=' + h + ',left=0,top=0,resizable=yes,scrollbars=yes', false);
            my.wnd_ = wnd
        } catch (e) {
            my.wnd_ = null;
            return
        }
        WCT.SetTimeout(init_, 100)
    };

    function init_() {
        var my = TRACKING.debug;
        var wnd = my.wnd_;
        var doc = wnd && wnd.document || null;
        if (!doc || !doc.body) return;
        doc.title = 'TRACKING debug window';
        var head = doc.getElementsByTagName('head')[0];
        if (head) {
            var styles = head.getElementsByTagName('style');
            for (var i = styles.length - 1; i >= 0; i--) {
                head.removeChild(styles[i])
            }
            var cont = ['@CHARSET "UTF-8";', '*{padding:0px;margin:0px}', 'body {font-family:Tahoma;font-size:8pt;width:100%;height:100%;overflow:hidden}', '#top {margin:10px;font-size:10pt;font-weight:bold}', '#print {padding-left:10px;font-size:8pt;font-weight:normal}', '#warning {text-align:center;margin:5px;padding:5px;font-size:9pt;font-weight:bold;color:#FF0000;border:1px solid #FF0000}', '#status {border:1px solid black;overflow-x:hidden;overflow-y:scroll;margin:5px}', '#log {border:1px solid black;overflow:hidden;margin:5px}', '#sources {height:25px;background-color:#FFCCCC;border-bottom:1px solid #999999;overflow:auto;clear:both;line-height:25px;padding:0 5px}', '#logs {overflow-x:hidden;overflow-y:scroll;padding:5px}', '.source {margin-right:3px;align:baseline}', '.hidden {display:none}', '.log_entry {clear:both;overflow:hidden}', '.log_cap {float:left;font-weight:bold;overflow:hidden;text-overflow:ellipsis}', '.log_msg {float:left}', '.entry_spacer {clear:both;height:10px;visibility:hidden}', '.status_th {font-size:8pt;font-family:Tahoma;padding:2px 5px;text-align:left}', '.status_td {vertical-align:top;font-size:8pt;font-family:Tahoma;padding:2px 5px;text-align:left}', '.status_sco_row {background-color:#FFCCCC}', '@media print {', 'body {overflow:auto !important}', '#status {height:auto !important;overflow:auto !important}', '#log {height:auto !important;overflow:auto !important}', '#sources {display:none !important}', '#logs {height:auto !important;overflow:auto !important}', '.hidden {display:block !important}', '}'].join('');
            var lnk = doc.createElement('style');
            lnk.setAttribute('type', 'text/css');
            try {
                lnk.innerHTML = cont
            } catch (e) {
                lnk.styleSheet.cssText = cont
            }
            head.appendChild(lnk)
        }
        var be = my.backend_;
        var no_be = !be.name && !be.type;
        var body = doc.body;
        body.innerHTML = ['<div id="top">TRACKING DEBUG</div>', no_be ? '<div id="warning">ATTENTION: NO BACKEND - NO CALCULATION IS DONE!</div>' : '', '<div id="status"></div>', '<div id="log">', '<div id="sources"></div>', '<div id="logs"></div>', '</div>'].join('');
        wnd.on_checkbox_ = function(ev) {
            var w = TRACKING.debug.wnd_;
            if (!ev) ev = w && w.event || null;
            if (!ev) return;
            var tar = ev.target ? ev.target : ev.srcElement;
            if (tar && tar.nodeType == 3) tar = tar.parentNode;
            var src = tar && tar.nextSibling && tar.nextSibling.nodeValue || null;
            if (src != null) toggle_source_(src)
        };
        wnd.onresize = function() {
            var my = TRACKING.debug;
            var wnd = my.wnd_;
            var d = wnd && wnd.document || null;
            if (!d) return;
            var w = (WCT.dom.GetWindowWidth(wnd) || d.body.offsetWidth) - 15;
            var h = (WCT.dom.GetWindowHeight(wnd) || d.body.offsetHeight) - 50;
            var hs = my.STATUS_HEIGHT;
            var hl = my.LOG_HEIGHT;
            var hr = hs + hl;
            var be = my.backend_;
            if (!be.name && !be.type) h -= 35;
            var m = h / hr;
            hs = Math.floor(m * hs);
            hl = Math.floor(m * hl);
            if (w < 0 || hs < 0 || hl < 0) return;
            var s = d.getElementById('status');
            if (s) {
                s.style.width = w + 'px';
                s.style.height = hs + 'px'
            }
            var l = d.getElementById('log');
            if (l) {
                l.style.width = w + 'px';
                l.style.height = hl + 'px';
                l = d.getElementById('logs');
                if (l && hl >= 35) {
                    l.style.height = hl - 35 + 'px'
                }
            }
        };
        wnd.onresize();
        my.ready_ = true
    };

    function get_wnd_() {
        var my = TRACKING.debug;
        try {
            if (!my.wnd_ || !my.wnd_.document || !my.wnd_.document.body) my.wnd_ = null
        } catch (e) {
            my.wnd_ = null
        }
        return my.wnd_
    };

    function toggle_source_(src) {
        var my = TRACKING.debug;
        var mode = !my.source_list_[src];
        my.source_list_[src] = mode;
        var wnd = get_wnd_();
        if (!wnd) return;
        var doc = wnd.document;
        var area = doc.getElementById('logs');
        if (!area) return;
        var cn = area.childNodes;
        for (var i = 0, n = null; n = cn[i]; i++) {
            var s = n.getAttribute('dgo_src');
            if (s == src) {
                if (mode) {
                    n.className = n.className.replace(/hidden/g, '')
                } else {
                    n.className += ' hidden'
                }
            }
        }
    };

    function add_source_(src) {
        var wnd = get_wnd_();
        if (!wnd) return;
        var doc = wnd.document;
        var area = doc.getElementById('sources');
        if (!area) return;
        var cbs = area.getElementsByTagName('input');
        for (var i = 0, cb = null; cb = cbs[i]; i++) {
            cb.onclick = null
        }
        var sl = this.source_list_;
        sl[src] = true;
        var html = [];
        for (var s in sl) {
            html.push(['<div style="float:left;margin-right:10px">', '<input class="source" type="checkbox" onclick="on_checkbox_(event)" checked="checked" />', s, '</div>'].join(''))
        }
        area.innerHTML = html.join('')
    };

    function print_row_(src, key, value) {
        var wnd = get_wnd_();
        if (!wnd) return;
        var my = TRACKING.debug;
        var doc = wnd.document;
        var area = doc.getElementById('logs');
        if (!area) return;
        var cap = doc.createTextNode(key + ': ');
        var msg = doc.createTextNode(value);
        var d_cap = doc.createElement('span');
        var d_msg = doc.createElement('span');
        var div = doc.createElement('div');
        var disp = my.source_list_[src] ? '' : ' hidden';
        d_cap.className = 'log_cap';
        d_msg.className = 'log_msg';
        div.className = 'log_entry' + disp;
        d_cap.style.width = my.KEY_WIDTH + 'px';
        div.setAttribute('dgo_src', src);
        if (key == 'source') {
            d_cap.style.color = '#FF0000';
            d_msg.style.color = '#FF0000'
        }
        d_cap.appendChild(cap);
        d_msg.appendChild(msg);
        div.appendChild(d_cap);
        div.appendChild(d_msg);
        area.appendChild(div)
    };

    function print_spacer_(src) {
        var wnd = get_wnd_();
        if (!wnd) return;
        var doc = wnd.document;
        var area = doc.getElementById('logs');
        if (!area) return;
        var disp = TRACKING.debug.source_list_[src] ? '' : ' hidden';
        var div = doc.createElement('div');
        var msg = doc.createTextNode('########################');
        div.className = 'entry_spacer' + disp;
        div.setAttribute('dgo_src', src);
        div.appendChild(msg);
        area.appendChild(div)
    };

    function create_status_table_() {
        var table_ = ['<table width="100%" cellpadding="0" cellspacing="0"><thead><tr style="background-color:#999999">', '<th class="status_th">ID</th>', '<th class="status_th">SCORE</th>', '<th class="status_th">STATUS</th>', '<th class="status_th">MISC</th>', '</tr></thead>TBODY</table>'].join('');
        return table_
    };

    function print_status_(sco, objectives) {
        var wnd = get_wnd_();
        if (!wnd) return;
        var doc = wnd.document;
        var area = doc.getElementById('status');
        if (!area) return;
        var agents = TRACKING && TRACKING.central && TRACKING.central.agents ? TRACKING.central.agents() : '-';
        var html = ['<tbody><tr class="status_sco_row">', '<td class="status_td">SCO<br /><span style="font-size:6pt">', sco.uid, sco.tclass == 'project' ? '<br />' + sco.mode : '', '</span></td>', '<td class="status_td">', 'cur: ', typeof sco.cur == 'number' ? sco.cur : '-', '<br />max: ', typeof sco.max == 'number' ? sco.max : '-', '<br />pass: ', typeof sco.min == 'number' ? sco.min : '-', '</td>', '<td class="status_td">', 'completed: ', sco.completed || false, '<br />passed: ', typeof sco.passed == 'boolean' ? sco.passed : '-', '<br />progress: ', Math.round((sco.progress || 0) * 100) / 100, '</td>', '<td class="status_td">', 'bookmark: ', sco.bookmark != null ? sco.bookmark : '-', '<br />currently scored: ', sco.scored_objects || 0, '<br />registered agents: ', agents, '</td>', '</tr>'];
        for (var i = 0, o = null, d = true; o = objectives[i]; i++, d = !d) {
            var cur_vis = 0;
            if (o.tclass == 'book') {
                for (var sid in o.pages) {
                    o.pages[sid] && cur_vis++
                }
            }
            html.push(['<tr style="background-color:#', d ? 'EFEFEF' : 'FFFFFF', '">', '<td class="status_td">', o.central_id, o.central_short_id ? '<br /><span style="font-size:7pt">(' + o.central_short_id + ')</span>' : '', '</td>', '<td class="status_td">', 'cur: ', typeof o.cur == 'number' ? o.cur : '-', '<br />cum: ', typeof o.cum == 'number' ? o.cum : '-', '<br />max: ', typeof o.max == 'number' ? o.max : '-', '<br />pass: ', typeof o.min == 'number' ? o.min : '-', '</td>', '<td class="status_td">', 'completed: ', o.completed || false, '<br />passed: ', typeof o.passed == 'boolean' ? o.passed : '-', '<br />progress: ', typeof o.progress == 'number' ? Math.round(o.progress * 100) / 100 : '-', '</td>', '<td class="status_td">', 'active: ', o.active || false, '<br />restarted: ', typeof o.restarted == 'boolean' ? o.restarted : '-', '<br />bookmark: ', o.bookmark != null && o.bookmark != '' ? o.bookmark : '-', '<br />visited: ', o.tclass == 'book' ? cur_vis + ' / ' + o.total_pages : (o.total_steps != null && o.cumulated_steps != null ? o.cumulated_steps + ' / ' + o.total_steps : '-'), '<br />scorable: ', o.is_scorable != null ? o.is_scorable : '-', '<br />track_completion: ', typeof o.track_completion == 'boolean' ? o.track_completion : '-', '<br />track_score: ', typeof o.track_score == 'boolean' ? o.track_score : '-', '<br />comp_as_score: ', typeof o.track_completion_as_score == 'boolean' ? o.track_completion_as_score : '-', '<br />ignore_failed: ', typeof o.track_incomplete_instead_failed == 'boolean' ? o.track_incomplete_instead_failed : '-', '</td>', '</tr>'].join(''))
        }
        html.push('</tbody>');
        var table = create_status_table_(area);
        area.innerHTML = table.replace(/TBODY/, html.join(''));
    };
    TRACKING.debug.Cleanup = function() {
        var doc = this.wnd_ && this.wnd_.document;
        var area = doc && doc.getElementById('sources') || null;
        var cbs = area && area.getElementsByTagName('input') || [];
        for (var i = 0, cb = null; cb = cbs[i]; i++) {
            cb.onclick = null;
            cb.setAttribute('disabled', 'disabled')
        }
        this.wnd_ = null;
        this.enabled_ = false;
        this.ready_ = false;
        this.backend_ = {
            name: null,
            type: null
        };
        this.source_list_ = {}
    };
    TRACKING.debug.Init = function(enabled, backend_name, backend_type) {
        this.enabled_ = enabled;
        this.backend_.name = backend_name || null;
        this.backend_.type = backend_type || null;
        if (enabled) create_wnd_.call(this)
    };
    TRACKING.debug.Track = function(track_info) {
        if (!this.enabled_ || !this.ready_) return;
        var src = 'general';
        if (track_info.source) {
            if (track_info.source.indexOf('.') >= 0) {
                src = track_info.source.split('.')[0]
            } else {
                src = track_info.source
            }
        }
        if (this.source_list_[src] == null) {
            add_source_.call(this, src)
        }
        print_row_(src, 'source', track_info.source);
        for (var key in track_info) {
            if (key != 'source') {
                var v = track_info[key];
                var t = typeof v;
                if (t == 'string' || t == 'boolean' || t == 'number' || v == null) {
                    print_row_(src, key, v)
                }
            }
        }
        var objective = arguments[1] || null;
        if (objective) {
            switch (track_info.id) {
                case 'pageset_open':
                case 'pageset_close':
                    print_row_(src, 'book_uid', objective.uid);
                    break;
                case 'pageset_progress':
                    print_row_(src, 'completed', objective.completed);
                    break;
                case 'lesson_progress':
                    if (objective.cumulated_steps != null) {
                        print_row_(src, 'cumulated_steps', objective.cumulated_steps)
                    }
                    break;
                case 'lesson_end':
                    print_row_(src, 'completed', objective.completed);
                    print_row_(src, 'passed', objective.passed);
                case 'lesson_start':
                    print_row_(src, 'lesson_uid', objective.uid + ':' + objective.mode);
                    break
            }
        }
        print_spacer_(src)
    };
    TRACKING.debug.Status = function(sco, objectives) {
        if (!this.enabled_ || !this.ready_) return;
        print_status_.apply(this, arguments)
    }
})();
var SKIN = {
    controls_: {},
    bars_: {},
    timeline_: {},
    Cleanup: function() {
        for (var id in SKIN.controls_) {
            SKIN.control.Cleanup(id)
        }
        for (var id in SKIN.bars_) {
            SKIN.bar.Cleanup(id)
        }
        for (var id in SKIN.timeline_) {
            SKIN.timeline.Cleanup(id)
        }
    }
};
SKIN.control = {
    Cleanup: function(id) {
        var c = SKIN.controls_[id];
        if (!c) return;
        var d = c.dom;
        if (d) {
            try {
                d.onclick = null;
                d.onmouseover = null;
                d.onmouseout = null;
                d.onmousedown = null;
                d.onmouseup = null;
                d.onmousemove = null;
                d.ontouchstart = null;
                d.ontouchend = null;
                d.onselectstart = null;
                d.ondragstart = null
            } catch (e) {}
            if (d.parentNode) d.parentNode.removeChild(d)
        }
        delete c.id;
        delete c.doc;
        delete c.onexec;
        delete c.scope;
        delete c.skin;
        delete c.dom;
        delete c.enabled;
        delete c.visible;
        delete c.active;
        delete c.img_id;
        delete c.title;
        delete c.text1;
        delete c.text2;
        if (c.mouseover) {
            c.mouseover.cb = null;
            c.mouseover.scope = null;
            delete c.mouseover
        }
        if (c.mouseout) {
            c.mouseout.cb = null;
            c.mouseout.scope = null;
            delete c.mouseout
        }
        if (c.mousedown) {
            c.mousedown.cb = null;
            c.mousedown.scope = null;
            delete c.mousedown
        }
        if (c.mouseup) {
            c.mouseup.cb = null;
            c.mouseup.scope = null;
            delete c.mouseup
        }
        if (c.touchstart) {
            c.touchstart.cb = null;
            c.touchstart.scope = null;
            delete c.touchstart
        }
        if (c.touchend) {
            c.touchend.cb = null;
            c.touchend.scope = null;
            delete c.touchend
        }
        delete SKIN.controls_[id]
    },
    Add: function(config) {
        var id = config.id;
        var skin = config.skin;
        var dom = config.dom;
        if (!id || !skin || !skin.image || !dom) return null;
        var doc = config.doc || document;
        var ctl = doc.createElement('div');
        var x = skin.x || 0;
        if (config.rtl) x = WCT.skin.ConvertXToRtl(x);
        ctl.id = id;
        ctl.style.cursor = 'pointer';
        WCT.skin.ApplyPosition(ctl, {
            x: x,
            y: skin.y || 0,
            w: skin.w || 0,
            h: skin.h || 0
        });
        if (skin.image) WCT.skin.ApplyBgImage(ctl, skin.image);
        dom.appendChild(ctl);
        ctl.ondblclick = SKIN.control.on_mouse_control_;
        ctl.onclick = SKIN.control.on_mouse_control_;
        ctl.onmouseover = SKIN.control.on_mouse_control_;
        ctl.onmouseout = SKIN.control.on_mouse_control_;
        ctl.onmousedown = SKIN.control.on_mouse_control_;
        ctl.onmouseup = SKIN.control.on_mouse_control_;
        ctl.ontouchstart = SKIN.control.on_touch_control_;
        ctl.ontouchend = SKIN.control.on_touch_control_;
        ctl.onselectstart = function() {
            return false
        };
        ctl.ondragstart = function() {
            return false
        };
        SKIN.controls_[id] = {
            id: id,
            onexec: config.onexec || null,
            scope: config.scope || null,
            skin: skin,
            dom: ctl,
            enabled: true,
            visible: true,
            active: false,
            img_id: 'image',
            title: null,
            rtl: config.rtl
        };
        if (config.title) this.SetTitle(id, config.title);
        if (config.visible != null) this.Visible(id, config.visible);
        if (config.enabled != null) this.Enabled(id, config.enabled);
        if (config.active != null) this.Active(id, config.active);
        return ctl
    },
    RegisterCallback: function(id, ev_type, callback, scope) {
        var c = SKIN.controls_[id];
        if (!c) return false;
        switch (ev_type) {
            case 'click':
                c.onexec = callback;
                c.scope = scope;
                break;
            case 'mouseover':
            case 'mouseout':
            case 'mousedown':
            case 'mouseup':
            case 'touchstart':
            case 'touchend':
                c[ev_type] = {
                    cb: callback,
                    scope: scope
                };
                break
        }
    },
    IgnoreEvent: function(id, ev_type) {
        var c = SKIN.controls_[id];
        if (!c || !c.dom) return false;
        c['on' + ev_type] = null
    },
    Enabled: function(id) {
        var c = SKIN.controls_[id];
        if (!c) return null;
        var e = arguments[1];
        if (typeof e == 'boolean' && c.enabled != e) {
            c.enabled = e;
            c.dom.style.cursor = e ? 'pointer' : 'default';
            if (!e && c.skin.image_d) {
                WCT.skin.ApplyBgImage(c.dom, c.skin.image_d)
            } else if (e) {
                WCT.skin.ApplyBgImage(c.dom, c.skin.image)
            }
        }
        return c.enabled
    },
    Visible: function(id) {
        var c = SKIN.controls_[id];
        if (!c) return null;
        var v = arguments[1];
        if (typeof v == 'boolean' && c.visible != v) {
            var att = arguments[2] || 'display';
            c.visible = v;
            if (att == 'display') {
                c.dom.style.display = v ? 'block' : 'none'
            } else if (att == 'visibility') {
                c.dom.style.visibility = v ? 'visible' : 'hidden'
            }
        }
        return c.visible
    },
    Active: function(id) {
        var c = SKIN.controls_[id];
        if (!c) return null;
        var a = arguments[1];
        var f = arguments[2] || false;
        if (typeof a == 'boolean' && (c.active != a || f)) {
            c.active = a;
            c.dom.style.cursor = a ? 'default' : 'pointer';
            if (a && c.skin.image_a) {
                WCT.skin.ApplyBgImage(c.dom, c.skin.image_a)
            } else if (!a) {
                WCT.skin.ApplyBgImage(c.dom, c.skin.image)
            }
        }
        return c.active
    },
    ModifyImageId: function(id, img_id) {
        var c = SKIN.controls_[id];
        if (!c || !c.skin[img_id]) return;
        if (c.img_id != img_id) {
            c.img_id = img_id;
            WCT.skin.ApplyBgImage(c.dom, c.skin[img_id])
        }
    },
    MoveTo: function(id, x, y) {
        var c = SKIN.controls_[id];
        if (!c) return;
        x = c.rtl ? WCT.skin.ConvertXToRtl(x) : x;
        var p = {
            x: x,
            y: y
        };
        WCT.skin.ApplyPosition(c.dom, p)
    },
    SetTitle: function(id, tit) {
        var c = SKIN.controls_[id];
        if (!c || c.title == tit) return;
        c.title = tit;
        c.dom.setAttribute('title', tit)
    },
    GetDom: function(id) {
        var c = SKIN.controls_[id];
        return c ? c.dom : null
    },
    get_event_: function(evt) {
        if (!evt) {
            if (window.event) {
                evt = window.event
            } else if (Topmost.Enabled()) {
                evt = Topmost.SCOPE.GetEvent()
            }
        }
        if (!evt) return null;
        evt = WCT.event.Standardize(evt);
        if (!evt.target || !evt.target.id) return null;
        if (evt.type == 'dblclick') {
            if (BROWSER.IE6 || BROWSER.IE7 || BROWSER.IE8) {
                evt.type = 'click'
            } else {
                return null
            }
        }
        return evt
    },
    on_mouse_control_: function(evt) {
        evt = SKIN.control.get_event_(evt);
        if (!evt) return true;
        var tar = evt.target;
        if (!tar || !tar.id) return true;
        var o = SKIN.controls_[tar.id];
        if (!o) return true;
        if (o.visible && o.enabled && !o.active) {
            if (evt.type == 'click') {
                if (!BROWSER.MOBILE) WCT.skin.ApplyBgImage(tar, o.skin[o.img_id]);
                if (o.onexec) o.onexec.call(o.scope, tar.id, evt)
            } else {
                if (!BROWSER.MOBILE) {
                    var m = {
                        mouseover: '_h',
                        mouseout: '',
                        mousedown: '_a',
                        mouseup: '_h'
                    }[evt.type];
                    var s = o.skin[o.img_id + m] || o.skin[o.img_id] || {
                        id: ''
                    };
                    WCT.skin.ApplyBgImage(tar, s)
                }
                var cb = o[evt.type];
                if (cb) cb.cb.call(cb.scope, tar.id, evt)
            }
            evt.cancelBubble = true;
            return false
        }
        return true
    },
    on_touch_control_: function(evt) {
        if (evt.changedTouches.length != 1 || evt.type == 'touchstart' && evt.touches.length > 1) return true;
        var tar = evt.target;
        if (!tar || !tar.id) return true;
        var tcid = tar.id.substring(0, tar.id.lastIndexOf('#'));
        var o = SKIN.controls_[tar.id] || SKIN.controls_[tcid];
        if (!o) return true;
        if (o.visible && o.enabled && !o.active) {
            var cb = o[evt.type];
            if (cb) cb.cb.call(cb.scope, tar.id, evt, 0)
        }
        return true
    }
};
(function() {
    function create_frame_item_(id, skin, dom, doc, h, pos) {
        var x = 0;
        var i = skin.bg[pos];
        if (pos == 'm') {
            x = skin.bg.l && skin.bg.l.w || 0;
            i = WCT.DeepCopy(i);
            if (!i.id) i.id = skin.src || '';
            i.repeat = 'x'
        } else {
            if (pos == 'r') x = '-0';
            if (!i.id) {
                i = WCT.DeepCopy(i);
                i.id = skin.src || ''
            }
        }
        var e = doc.createElement('div');
        var w = skin.bg[pos].w || 0;
        WCT.skin.ApplyPosition(e, {
            x: x,
            y: 0,
            w: w,
            h: h
        });
        WCT.skin.ApplyBgImage(e, i);
        e.id = id + '#' + pos;
        dom.appendChild(e);
        return w
    };

    function create_image_(id, skin, dom, doc, h, rtl) {
        var i = skin.image;
        if (!i.id) {
            i = WCT.DeepCopy(i);
            i.id = skin.src || ''
        }
        var mh = skin.img_h || i.h || 0;
        var w = skin.img_w || i.w || 0;
        var y = Math.max(0, (h - mh) >> 1);
        var x = y;
        if (i.l) x = i.l;
        if (i.t) y = i.t;
        if (rtl) x = WCT.skin.ConvertXToRtl(x);
        var e = doc.createElement('div');
        WCT.skin.ApplyPosition(e, {
            x: x,
            y: y,
            w: w,
            h: mh
        });
        WCT.skin.ApplyBgImage(e, i);
        e.id = id + '#i';
        dom.appendChild(e);
        return y + w + (skin.img_text_spacing || 0)
    };

    function colorize_(c, p, m) {
        if (p == 't') {
            var t = c.skin['text_color' + m] || c.skin['text_color'] || '#000000';
            var te = $(c.id + '#t', c.doc);
            if (te) te.style.color = t;
            return
        }
        var pos = 'pos_' + p;
        var n = c[pos] >= 0 ? c.dom.childNodes[c[pos]] : null;
        if (!n) return;
        var i;
        if (p == 'm') {
            i = c.skin['bg' + m] && c.skin['bg' + m].m;
            if (!i) return;
            i = WCT.DeepCopy(i);
            if (!i.id) i.id = c.skin.src || '';
            i.repeat = 'x'
        } else {
            i = p == 'i' ? c.skin['image' + m] : c.skin['bg' + m] && c.skin['bg' + m][p];
            if (!i) return;
            if (!i.id) {
                i = WCT.DeepCopy(i);
                i.id = c.skin.src || ''
            }
        }
        WCT.skin.ApplyBgImage(n, i)
    };
    SKIN.textcontrol = {
        Cleanup: SKIN.control.Cleanup,
        RegisterCallback: SKIN.control.RegisterCallback,
        IgnoreEvent: SKIN.control.IgnoreEvent,
        GetDom: SKIN.control.GetDom,
        Add: function(config) {
            var id = config.id;
            var skin = config.skin;
            var dom = config.dom;
            if (!id || !skin || !dom) return null;
            var doc = config.doc || document;
            var rtl = config.rtl || false;
            var h = skin.h || 0;
            var ml = 0;
            var mw = 0;
            var rw = 0;
            var ctl = doc.createElement('div');
            ctl.id = id;
            ctl.style.cursor = 'pointer';
            var pos = 0;
            var pos_l = -1;
            var pos_m = -1;
            var pos_r = -1;
            if (skin.bg) {
                if (skin.bg.l) {
                    ml = create_frame_item_(id, skin, ctl, doc, h, 'l');
                    mw += ml;
                    pos_l = pos++
                }
                if (skin.bg.m) {
                    create_frame_item_(id, skin, ctl, doc, h, 'm');
                    pos_m = pos++
                }
                if (skin.bg.r) {
                    mw += create_frame_item_(id, skin, ctl, doc, h, 'r');
                    pos_r = pos++
                }
            }
            var pos_i = -1;
            if (skin.image) {
                rw += create_image_(id, skin, ctl, doc, h, rtl);
                pos_i = pos++
            }
            var x = rtl ? WCT.skin.ConvertXToRtl(skin.x) : skin.x;
            var w = Math.max(mw, rw);
            WCT.skin.ApplyPosition(ctl, {
                x: x,
                y: skin.y,
                w: w,
                h: h
            });
            if (pos_m >= 0) ctl.childNodes[pos_m].style.width = w - mw + 'px';
            var t = doc.createElement('div');
            var t_x = rtl ? WCT.skin.ConvertXToRtl(rw) : rw;
            WCT.skin.ApplyPosition(t, {
                x: t_x,
                y: 0,
                h: h
            });
            WCT.skin.ApplyTextFormats(t, skin);
            WCT.dom.NotSelectable(t);
            t.id = id + '#t';
            t.style.lineHeight = h + 'px';
            t.style.overflow = 'hidden';
            t.style.textOverflow = 'ellipsis';
            t.style.whiteSpace = 'nowrap';
            if (skin.text_icon_spacing) t.style.paddingLeft = skin.text_icon_spacing + 'px';
            ctl.appendChild(t);
            dom.appendChild(ctl);
            ctl.ondblclick = SKIN.textcontrol.on_mouse_control_;
            ctl.onclick = SKIN.textcontrol.on_mouse_control_;
            ctl.onmouseover = SKIN.textcontrol.on_mouse_control_;
            ctl.onmouseout = SKIN.textcontrol.on_mouse_control_;
            ctl.onmousedown = SKIN.textcontrol.on_mouse_control_;
            ctl.onmouseup = SKIN.textcontrol.on_mouse_control_;
            ctl.ontouchstart = SKIN.control.on_touch_control_;
            ctl.ontouchend = SKIN.control.on_touch_control_;
            ctl.onselectstart = function() {
                return false
            };
            ctl.ondragstart = function() {
                return false
            };
            SKIN.controls_[id] = {
                id: id,
                doc: doc,
                onexec: config.onexec || null,
                scope: config.scope || null,
                skin: skin,
                dom: ctl,
                enabled: true,
                visible: true,
                active: false,
                img_id: 'bg',
                ml: ml,
                mw: mw,
                rw: rw,
                pos_l: pos_l,
                pos_m: pos_m,
                pos_r: pos_r,
                pos_i: pos_i
            };
            if (config.text || config.text_h) this.SetText(id, config.text || '', config.text_h || '');
            return ctl
        },
        Enabled: function(id) {
            var c = SKIN.controls_[id];
            if (!c) return null;
            var e = arguments[1];
            if (typeof e == 'boolean' && c.enabled != e) {
                c.enabled = e;
                c.dom.style.cursor = e ? 'pointer' : 'default';
                var m = e ? '' : '_d';
                colorize_(c, 'l', m);
                colorize_(c, 'm', m);
                colorize_(c, 'r', m);
                colorize_(c, 'i', m);
                colorize_(c, 't', m)
            }
            return c.enabled
        },
        SetText: function(id, text) {
            var c = SKIN.controls_[id];
            if (!c || !c.dom) return;
            c.text1 = text;
            c.text2 = arguments[2] || null;
            c.dom.setAttribute('title', text);
            var t = c.dom.lastChild;
            t.style.visibility = 'hidden';
            WCT.SetNodeText(t, text, c.doc);
            var n = t.cloneNode(1);
            n.id = id + '#t#c';
            n.style.width = 'auto';
            n.style.overflow = 'auto';
            n.style.visibility = 'hidden';
            if (BROWSER.IE && BROWSER.VERSION < 11) {
                c.dom.style.visibility = 'hidden';
                c.dom.style.width = 'auto'
            }
            c.dom.appendChild(n);
            WCT.SetTimeout(SKIN.textcontrol.resize_, 10, SKIN.textcontrol, [id])
        },
        resize_: function(id) {
            var c = SKIN.controls_[id];
            if (!c) return;
            var n = $(id + '#t#c', c.doc);
            var w = 0;
            if (n) {
                w = n.offsetWidth;
                n.parentNode.removeChild(n)
            }
            var t = c.dom.lastChild;
            if (!c.rw && c.ml > 0) t.style.left = c.ml + 'px';
            t.style.width = w + 1 + 'px';
            t.style.visibility = 'visible';
            w = w + c.mw + c.rw;
            c.dom.style.width = w + 'px';
            c.dom.style.visibility = 'visible';
            if (c.pos_m >= 0) c.dom.childNodes[c.pos_m].style.width = w - c.mw + 'px'
        },
        on_mouse_control_: function(evt) {
            evt = SKIN.control.get_event_(evt);
            if (!evt) return true;
            var tar = evt.target;
            if (!tar || !tar.id) return true;
            var c = SKIN.controls_[tar.id];
            if (!c) {
                id = tar.id.substring(0, tar.id.lastIndexOf('#'));
                c = SKIN.controls_[id]
            }
            if (!c) return true;
            if (evt.type == 'click' && c.text1 && c.text2) {
                SKIN.textcontrol.SetText(id, c.text2, c.text1)
            }
            if (c.visible && c.enabled && !c.active) {
                var cn = c.dom.childNodes;
                if (evt.type == 'click') {
                    if (!BROWSER.MOBILE) {
                        colorize_(c, 'l', '');
                        colorize_(c, 'm', '');
                        colorize_(c, 'r', '');
                        colorize_(c, 'i', '');
                        colorize_(c, 't', '')
                    }
                    if (c.onexec) c.onexec.call(c.scope, id, evt)
                } else {
                    if (!BROWSER.MOBILE) {
                        var m = {
                            mouseover: '_h',
                            mouseout: '',
                            mousedown: '_a',
                            mouseup: '_h'
                        }[evt.type];
                        colorize_(c, 'l', m);
                        colorize_(c, 'm', m);
                        colorize_(c, 'r', m);
                        colorize_(c, 'i', m);
                        colorize_(c, 't', m)
                    }
                    var cb = c[evt.type];
                    if (cb) cb.cb.call(cb.scope, id, evt)
                }
                evt.cancelBubble = true;
                return false
            }
            return true
        }
    }
})();
SKIN.bar = {
    Cleanup: function(id) {
        var b = SKIN.bars_[id];
        if (!b) return;
        delete b.dom;
        delete b.act;
        delete b.pre;
        delete b.progress;
        delete b.preloaded;
        delete b.ori;
        delete b.size;
        delete SKIN.bars_[id]
    },
    Add: function(config) {
        var id = config.id;
        var skin = config.skin;
        var dom = config.dom;
        if (!id || !skin || !skin.image || !dom) return;
        var rtl = config.rtl || false;
        var ori = config.ori || 'hor';
        var mod = ori == 'hor' ? {
            x: 'x',
            w: 'w'
        } : {
            x: 'y',
            w: 'h'
        };
        var doc = config.doc || document;
        var x = skin.x || 0;
        var pos = {
            x: x,
            y: skin.y || 0,
            w: skin.w || 0,
            h: skin.bar_h || skin.h || 0
        };
        var l = null;
        var r = null;
        var a = null;
        var p = null;
        if (skin.image_l && typeof skin.image_l.w == 'number') {
            var s = WCT.DeepCopy(pos);
            s[mod.w] = skin.image_l[mod.w];
            l = doc.createElement('div');
            WCT.skin.ApplyPosition(l, s);
            WCT.skin.ApplyBgImage(l, skin.image_l)
        }
        if (skin.image_r && typeof skin.image_r.w == 'number') {
            var s = WCT.DeepCopy(pos);
            s[mod.x] = s[mod.x] + s[mod.w] - skin.image_r[mod.w];
            s[mod.w] = skin.image_r[mod.w];
            r = doc.createElement('div');
            WCT.skin.ApplyPosition(r, s);
            WCT.skin.ApplyBgImage(r, skin.image_r)
        }
        if (rtl) pos.x = WCT.skin.ConvertXToRtl(x);
        if (skin.image_p) {
            var s = WCT.DeepCopy(pos);
            s[mod.w] = 0;
            if (ori != 'hor') s[mod.x] = '-0';
            p = doc.createElement('div');
            p.id = id + '#p';
            WCT.skin.ApplyPosition(p, s);
            WCT.skin.ApplyBgImage(p, skin.image_p)
        }
        if (skin.image_a) {
            var s = WCT.DeepCopy(pos);
            s[mod.w] = 0;
            if (ori != 'hor') s[mod.x] = '-0';
            a = doc.createElement('div');
            a.id = id + '#a';
            WCT.skin.ApplyPosition(a, s);
            WCT.skin.ApplyBgImage(a, skin.image_a)
        }
        var m = doc.createElement('div');
        m.id = id;
        WCT.skin.ApplyPosition(m, pos);
        WCT.skin.ApplyBgImage(m, skin.image);
        dom.appendChild(m);
        if (p) dom.appendChild(p);
        if (a) dom.appendChild(a);
        if (l) dom.appendChild(l);
        if (r) dom.appendChild(r);
        SKIN.bars_[id] = {
            dom: m,
            act: a,
            pre: p,
            progress: 0,
            preloaded: 0,
            ori: ori,
            size: skin[mod.w]
        }
    },
    Resize: function(id, size) {
        var b = SKIN.bars_[id];
        if (!b) return null;
        if (b.size != size) {
            var m = b.ori == 'hor' ? 'width' : 'height';
            b.size = size;
            b.dom.style[m] = size + 'px'
        }
    },
    Progress: function(id) {
        var b = SKIN.bars_[id];
        if (!b) return null;
        var p = arguments[1];
        var f = arguments[3];
        if (typeof p == 'number' && (b.progress != p || f) && p >= 0 && p <= 1) {
            b.progress = p;
            if (b.act) {
                var w = arguments[2] || b.size || 0;
                var m = b.ori == 'hor' ? 'width' : 'height';
                b.act.style[m] = Math.floor(w * p) + 'px'
            }
        }
        return b.progress
    },
    Preloaded: function(id) {
        var b = SKIN.bars_[id];
        if (!b) return null;
        var p = arguments[1];
        if (typeof p == 'number' && b.preloaded != p && p >= 0 && p <= 1) {
            b.preloaded = p;
            if (b.pre) {
                var w = arguments[2] || b.size || 0;
                var m = b.ori == 'hor' ? 'width' : 'height';
                b.pre.style[m] = Math.floor(w * p) + 'px'
            }
        }
        return b.preloaded
    },
    Visible: function(id) {
        var b = SKIN.bars_[id];
        if (!b) return null;
        var v = arguments[1];
        if (typeof v == 'boolean' && b.visible != v) {
            b.visible = v;
            b.dom.style.display = v ? 'block' : 'none';
            b.act && (b.act.style.display = v ? 'block' : 'none');
            b.pre && (b.pre.style.display = v ? 'block' : 'none')
        }
        return b.visible
    }
};
SKIN.timeline = (function() {
    function set_bullets_(bid, steps, act, pre) {
        for (var i = 1; i <= steps; i++) {
            if (i < act) {
                SKIN.control.ModifyImageId(bid + i, 'imagep')
            } else if (i == act) {
                SKIN.control.ModifyImageId(bid + i, 'image')
            } else if (i <= pre) {
                SKIN.control.ModifyImageId(bid + i, 'imagel')
            } else {
                SKIN.control.ModifyImageId(bid + i, 'imagef')
            }
        }
    };
    return {
        Cleanup: function(id) {
            var t = SKIN.timeline_[id];
            if (!t) return;
            SKIN.bar.Cleanup(id + '#bar');
            if (t.ctls) {
                for (var i = 0, l = t.ctls.length; i < l; i++) {
                    SKIN.control.Cleanup(t.ctls[i])
                }
                delete t.ctls
            }
            delete t.dom;
            delete t.text;
            delete t.step;
            delete t.pre;
            delete t.steps;
            delete t.skin;
            delete t.bu_skin;
            delete t.ori;
            delete t.doc;
            delete SKIN.timeline_[id]
        },
        Add: function(config) {
            var id = config.id;
            var skin = config.skin;
            var dom = config.dom;
            if (!id || !skin || !dom) return null;
            var steps = config.steps;
            var doc = config.doc || document;
            var rtl = config.rtl || false;
            var d = doc.createElement('div');
            d.id = id;
            WCT.skin.ApplyTextFormats(d, skin);
            d.style.position = 'absolute';
            dom.appendChild(d);
            var bu_skin = {};
            for (var k in skin) {
                if (k.substr(0, 7) == 'bullet_') {
                    bu_skin[k.substr(7)] = skin[k]
                }
            }
            var ba_skin = {
                h: 0
            };
            for (var k in skin) {
                if (k.substr(0, 4) == 'bar_') {
                    ba_skin[k.substr(4)] = skin[k]
                }
            }
            ba_skin.y = (bu_skin.h >> 1) - (ba_skin.h >> 1);
            SKIN.bar.Add({
                id: id + '#bar',
                skin: ba_skin,
                dom: d,
                ori: config.ori,
                doc: doc,
                rtl: rtl
            });
            var text = null;
            text = doc.createElement('div');
            text.id = id + '#text';
            WCT.skin.ApplyTextFormats(text, skin);
            text.style.position = 'absolute';
            text.style.left = '0px';
            text.style.top = ba_skin.y + ba_skin.h + 1 + 'px';
            text.style.width = '100%';
            text.style.overflow = 'hidden';
            text.style.textOverflow = 'ellipsis';
            text.style.whiteSpace = 'nowrap';
            if (rtl) text.style.direction = 'rtl';
            d.appendChild(text);
            var ctls = [];
            if (steps) {
                var bid = id + '#';
                for (var i = 1; i <= steps; i++) {
                    SKIN.control.Add({
                        id: bid + i,
                        skin: bu_skin,
                        dom: d,
                        onexec: config.onexec,
                        scope: config.scope,
                        doc: doc,
                        rtl: rtl
                    });
                    ctls.push(bid + i)
                }
            }
            SKIN.timeline_[id] = {
                dom: d,
                text: text || null,
                step: 1,
                pre: 0,
                steps: steps,
                skin: skin,
                bu_skin: bu_skin,
                ori: config.ori,
                doc: doc,
                ctls: ctls,
                rtl: rtl
            };
            if (config.visibles) this.SetVisibles(id, config.visibles);
            if (config.jumpables) this.SetJumpables(id, config.jumpables);
            if (config.titles) this.SetTitles(id, config.titles);
            return d
        },
        Resize: function(id, size) {
            var t = SKIN.timeline_[id];
            if (!t) return;
            var hor = t.ori == 'hor';
            var si = hor ? 'width' : 'height';
            var po = hor ? (t.rtl ? 'right' : 'left') : 'top';
            var wh = hor ? 'w' : 'h';
            t.dom.style[si] = size + 'px';
            SKIN.bar.Resize(id + '#bar', size);
            this.Step(id, t.step, true);
            if (t.steps) {
                var off = 0;
                if (t.bu_skin[wh]) {
                    off = t.bu_skin[wh] >> 1;
                    size -= off
                }
                size += 1;
                var bid = id + '#';
                var rs = t.steps > 1 ? size / (t.steps - 1) : size;
                for (var i = 1; i <= t.steps; i++) {
                    var nbr = hor ? i : t.steps - i + 1;
                    var el = t.doc.getElementById(bid + nbr);
                    if (!el) continue;
                    var x = Math.round((i - 1) * rs) - off;
                    el.style[po] = x + 'px'
                }
            }
        },
        MoveTo: function(id, x, y) {
            var c = SKIN.timeline_[id];
            if (!c) return;
            x = c.rtl ? WCT.skin.ConvertXToRtl(x) : x;
            var p = {
                x: x,
                y: y
            };
            WCT.skin.ApplyPosition(c.dom, p)
        },
        Visible: function(id) {
            var c = SKIN.timeline_[id];
            if (!c) return null;
            var v = arguments[1];
            if (typeof v == 'boolean' && c.visible != v) {
                c.visible = v;
                c.dom.style.display = v ? 'block' : 'none'
            }
            return c.visible
        },
        Step: function(id) {
            var t = SKIN.timeline_[id];
            if (!t || !t.steps) return;
            var s = arguments[1];
            var f = arguments[2];
            if (typeof s == 'number' && s > 0 && s <= t.steps && (t.step != s || f)) {
                var progress = t.steps > 1 ? (s - 1) / (t.steps - 1) : 1;
                var bid = id + '#';
                t.step = s;
                SKIN.bar.Progress(id + '#bar', progress, t.size, f);
                set_bullets_(bid, t.steps, t.step, t.pre)
            }
            return t.step
        },
        Preloaded: function(id) {
            var t = SKIN.timeline_[id];
            if (!t || !t.steps) return;
            var s = arguments[1];
            if (typeof s == 'number' && s > 0 && s <= t.steps && t.pre != s) {
                var progress = t.steps > 1 ? (s - 1) / (t.steps - 1) : 1;
                var bid = id + '#';
                t.pre = s;
                SKIN.bar.Preloaded(id + '#bar', progress, t.size);
                set_bullets_(bid, t.steps, t.step, t.pre)
            }
            return t.pre
        },
        SetText: function(id, txt) {
            var t = SKIN.timeline_[id];
            if (t && t.text) WCT.SetNodeText(t.text, txt, t.doc)
        },
        SetTitles: function(id, tit) {
            var t = SKIN.timeline_[id];
            if (!t) return;
            id += '#';
            for (var i = 1; i <= t.steps; i++) {
                SKIN.control.SetTitle(id + i, tit[i - 1])
            }
        },
        SetVisibles: function(id, vis) {
            var t = SKIN.timeline_[id];
            if (!t) return;
            id += '#';
            for (var i = 1; i <= t.steps; i++) {
                SKIN.control.Visible(id + i, vis[i - 1])
            }
        },
        SetJumpables: function(id, jmp) {
            var t = SKIN.timeline_[id];
            if (!t) return;
            id += '#';
            for (var i = 1; i <= t.steps; i++) {
                SKIN.control.Enabled(id + i, jmp[i - 1])
            }
        }
    }
})();
SKIN.popup = {
    GetDim: function(skin) {
        var o = {
            l: 0,
            r: 0,
            t: 0,
            b: 0,
            w: 0,
            h: 0
        };
        if (skin) {
            o.l = [skin.w_w || 0];
            if (skin.nw && skin.nw.w) o.l.push(skin.nw.w);
            if (skin.w && skin.w.w) o.l.push(skin.w.w);
            if (skin.sw && skin.sw.w) o.l.push(skin.sw.w);
            o.l = o.l.min();
            o.r = [skin.e_w || 0];
            if (skin.ne && skin.ne.w) o.r.push(skin.ne.w);
            if (skin.e && skin.e.w) o.r.push(skin.e.w);
            if (skin.se && skin.se.w) o.r.push(skin.se.w);
            o.r = o.r.min();
            o.t = [skin.n_h || 0];
            if (skin.nw && skin.nw.h) o.t.push(skin.nw.h);
            if (skin.n && skin.n.h) o.t.push(skin.n.h);
            if (skin.ne && skin.ne.h) o.t.push(skin.ne.h);
            o.t = o.t.min();
            o.b = [skin.s_h || 0];
            if (skin.sw && skin.sw.h) o.b.push(skin.sw.h);
            if (skin.s && skin.s.h) o.b.push(skin.s.h);
            if (skin.se && skin.se.h) o.b.push(skin.se.h);
            o.b = o.b.min();
            o.w = o.l + o.r;
            o.h = o.t + o.b
        }
        return o
    },
    CreateFrame: function(dom, skin, cfg) {
        if (!skin || !cfg || !skin.n_h || !skin.s_h || !skin.w_w || !skin.e_w || !skin.nw || !skin.n || !skin.ne || !skin.w || !skin.e || !skin.sw || !skin.s || !skin.se) {
            return false
        }
        var doc = cfg.doc || document;
        var bid = cfg.id || '';
        var x = 0;
        var y = 0;
        var lst = ['nw', 'n', 'ne', 'w', 'e', 'sw', 's', 'se'];
        for (var i = 0, id = null; id = lst[i++];) {
            var cs = skin[id];
            if (!cs) continue;
            switch (id) {
                case 'nw':
                    cs.p = {
                        x: 0,
                        y: 0,
                        w: skin.w_w,
                        h: skin.n_h
                    };
                    break;
                case 'n':
                    x = skin.nw.p.w;
                    cs.p = {
                        x: x,
                        y: y,
                        w: cfg.w - skin.w_w - skin.e_w,
                        h: skin.n_h
                    };
                    break;
                case 'ne':
                    x += skin.n.p.w;
                    cs.p = {
                        x: x,
                        y: y,
                        w: skin.e_w,
                        h: skin.n_h
                    };
                    break;
                case 'w':
                    x = 0;
                    y = skin.ne.p.h;
                    cs.p = {
                        x: x,
                        y: y,
                        w: cs.w || skin.w_w,
                        h: cfg.h - skin.n_h - skin.s_h
                    };
                    break;
                case 'e':
                    var w = cs.w || skin.e_w;
                    x += cfg.w - w;
                    cs.p = {
                        x: x,
                        y: y,
                        w: w,
                        h: skin.w.p.h
                    };
                    break;
                case 'sw':
                    x = 0;
                    y += skin.e.p.h;
                    cs.p = {
                        x: x,
                        y: y,
                        w: skin.w_w,
                        h: skin.s_h
                    };
                    break;
                case 's':
                    x += skin.sw.p.w;
                    cs.p = {
                        x: x,
                        y: y,
                        w: skin.n.p.w,
                        h: skin.s_h
                    };
                    break;
                case 'se':
                    x += skin.s.p.w;
                    cs.p = {
                        x: x,
                        y: y,
                        w: skin.e_w,
                        h: skin.s_h
                    };
                    break
            }
            var el = doc.createElement('div');
            el.id = bid + id;
            if (cfg.resizable && !cfg.mini) {
                el.style.cursor = id + '-resize';
                el.onmousedown = cfg.onmousedown || null;
                if (cfg.controls) cfg.controls.push(el)
            }
            if (cs.p.w < 0) cs.p.w = 0;
            if (cs.p.h < 0) cs.p.h = 0;
            var wskin = WCT.skin;
            wskin.ApplyPosition(el, cs.p);
            if (cs.image) wskin.ApplyBgImage(el, cs.image);
            if (cs.background_color) el.style.backgroundColor = cs.background_color;
            dom.appendChild(el)
        }
        return true
    },
    CreateTitle: function(dom, skin, cfg) {
        if (!skin || !cfg) return false;
        var doc = cfg.doc || document;
        var bid = cfg.id || '';
        skin = WCT.DeepCopy(skin);
        skin.w = cfg.w;
        skin.tooltip = cfg.title;
        if (skin.x) skin.w -= skin.x * 2;
        if (cfg.rtl) skin.x = WCT.skin.ConvertXToRtl(skin.x);
        if (skin.padding) delete skin.padding;
        if (skin.padding_top) delete skin.padding_top;
        if (skin.padding_bottom) delete skin.padding_bottom;
        var wskin = WCT.skin;
        var tit = doc.createElement('div');
        tit.id = bid + 'title';
        wskin.ApplyPosition(tit, skin);
        wskin.ApplyTextFormats(tit, skin);
        wskin.ApplyPadding(tit, skin);
        WCT.dom.NotSelectable(tit);
        tit.style.overflow = 'hidden';
        tit.style.textOverflow = 'ellipsis';
        tit.style.whiteSpace = 'nowrap';
        if (skin.h) tit.style.lineHeight = skin.h + 'px';
        if (cfg.rtl) tit.style.direction = 'rtl';
        WCT.SetNodeText(tit, cfg.title, doc);
        dom.appendChild(tit);
        if (cfg.movable && cfg.onmousedown) {
            tit.style.cursor = 'pointer';
            tit.onmousedown = cfg.onmousedown;
            if (cfg.controls) cfg.controls.push(tit)
        }
        return tit
    },
    CreateControl: function(dom, skin, cfg) {
        if (!skin || !cfg) return false;
        var doc = cfg.doc || document;
        var bid = cfg.id || '';
        var d = SKIN.control.Add({
            id: bid,
            skin: skin,
            dom: dom,
            onexec: cfg.oncontrol,
            scope: cfg.scope,
            doc: doc,
            title: cfg.title,
            rtl: cfg.rtl
        });
        if (cfg.skins) cfg.skins.push({
            t: 'control',
            i: bid
        });
        return d
    }
};

function Topmost(cfg) {
    if (!arguments.length) return null;
    Topmost.SCOPE = this;
    this.cfg_ = {};
    this.popup_ = window.createPopup();
    this.interval_ = null;
    this.title_ = '';
    this.controls_ = [];
    this.skins_ = [];
    this.debug_win_in_ = false;
    this.ev_x_ = null;
    this.ev_y_ = null;
    this.ev_w_ = null;
    this.ev_h_ = null;
    this.ev_id_ = null;
    this.ev_fill_ = false;
    this.win_left_ = 0;
    this.win_top_ = 0;
    this.mini_ = false;
    this.mini_w_ = null;
    this.mini_h_ = null;
    this.skin_min_h_ = Topmost.MINI_H;
    var k = DATA.CFG_TOPMOST;
    var c = this.cfg_;
    for (var i = k.length - 1; i >= 0; i--) {
        var s = k[i].substr(8);
        if (s) c[s] = cfg[k[i]]
    }
    this.get_pos_();
    c.skin = cfg.skin;
    c.width = Math.max(Topmost.event.MIN_W, c.width);
    c.height = Math.max(Topmost.event.MIN_H, c.height);
    var skin = WCT.DeepCopy(DATA.GetS(DATA.SKIN_PREFIX + c.skin + ':popup.txt'));
    var ctx = new WCT.context(DATA.context);
    var surl = ctx.ToAbsPath(DATA.SKIN_PREFIX + c.skin) + '/';
    WCT.skin.ExtendUrls(skin, surl);
    this.skin_ = skin
};
WCT.ExtendObject(Topmost, {
    MINI_W: 150,
    MINI_H: 37,
    REFRESH_INTERVAL: 200,
    SCOPE: null,
    POSITION: null,
    WinBehind: function() {
        if (!MANAGER.standalone) {
            document.body.style.visibility = 'visible'
        } else {
            var pos = Topmost.POSITION;
            try {
                resizeTo(pos.width, pos.height);
                moveTo(pos.left, pos.top)
            } catch (e) {}
        }
    },
    WinOut: function() {
        if (Topmost.SCOPE && Topmost.SCOPE.debug_win_in_) return;
        if (!MANAGER.standalone) {
            document.body.style.visibility = 'hidden'
        } else {
            try {
                moveTo(screen.availWidth + 500, screen.availHeight + 500)
            } catch (e) {}
        }
    },
    Enabled: function() {
        return Topmost.SCOPE != null
    },
    Show: function() {
        if (Topmost && Topmost.SCOPE && Topmost.SCOPE.show_) {
            Topmost.SCOPE.show_()
        }
    },
    GetTaskDim: function(skin) {
        var o = {
            l: 0,
            r: 0,
            t: 0,
            b: 0
        };
        var s = skin && skin.task;
        if (s) {
            o.l = s.outer_spacing_l || 0;
            o.r = s.outer_spacing_r || 0;
            o.t = s.outer_spacing_t || 0;
            o.b = s.outer_spacing_b || 0
        }
        return o
    }
});
Topmost.prototype = (function() {
    function cleanup_controls_() {
        var c;
        while (c = this.controls_.shift()) {
            c.onclick = null;
            c.onmouseover = null;
            c.onmouseout = null;
            c.onmousedown = null;
            c.onmouseup = null;
            c.onmousemove = null;
            c.onselectstart = null;
            c.ondragstart = null
        }
        while (c = this.skins_.shift()) {
            SKIN[c.t].Cleanup(c.i)
        }
    };
    return {
        Destructor: function() {
            cleanup_controls_.call(this);
            if (this.popup_) {
                this.Hide();
                this.popup_ = null
            }
            this.cfg_ = null;
            Topmost.SCOPE = null;
            if (!MANAGER.standalone) {
                document.body.style.visibility = 'visible'
            }
        },
        Show: function() {
            if (!this.skin_ || !this.fill_()) {
                this.Destructor();
                return false
            }
            this.win_left_ = Math.min(window.screenLeft, screen.availWidth);
            this.win_top_ = Math.min(window.screenTop, screen.availHeight);
            var fdim = SKIN.popup.GetDim(this.skin_.frame);
            this.skin_min_h_ = fdim.h;
            this.show_();
            return true
        },
        Hide: function() {
            if (this.interval_) WCT.ClearTimeout(this.interval_);
            var doc = this.popup_.document;
            var b = doc.body;
            b.onmouseenter = null;
            b.onmousedown = null;
            b.onmousemove = null;
            b.onmouseup = null;
            b.onclick = null;
            b = document.body;
            b.onmousedown = null;
            b.onmousemove = null;
            b.onmouseup = null;
            b.onclick = null;
            b.releaseCapture();
            this.popup_.hide();
            if (arguments[0] !== false) {
                MANAGER.handler.CloseTopmostConnected()
            } else {
                Topmost.WinBehind()
            }
        },
        ToggleMinimize: function() {
            var c = this.cfg_;
            if (!this.mini_) {
                this.mini_ = true;
                this.mini_w_ = c.width;
                this.mini_h_ = c.height;
                c.left = c.left + c.width - Topmost.MINI_W;
                c.width = Topmost.MINI_W;
                c.height = this.skin_min_h_
            } else {
                this.mini_ = false;
                c.left = c.left + c.width - this.mini_w_;
                c.width = this.mini_w_;
                c.height = this.mini_h_
            }
            this.Refresh.call(this, true)
        },
        IsMinimized: function() {
            return this.mini_
        },
        AfterResize: function() {},
        Refresh: function() {
            arguments[0] === true && (this.ev_fill_ = true);
            if (this.interval_) WCT.ClearTimeout(this.interval_);
            this.show_()
        },
        GetDocument: function() {
            return this.popup_ && this.popup_.document || null
        },
        GetEvent: function() {
            return this.popup_.document.parentWindow.event
        },
        GetSkin: function() {
            return this.skin_
        },
        GetWH: function() {
            var c = this.cfg_;
            return {
                w: c.width,
                h: c.height
            }
        },
        SetTitle: function(t) {
            this.title_ = t;
            var d = this.popup_ && this.popup_.document || null;
            var c = d && d.getElementById('title');
            if (c) {
                WCT.SetNodeText(c, t, d);
                c.setAttribute('title', t)
            }
        },
        SetCSS: function(href) {
            var pop = this.popup_;
            var doc = pop.document;
            var head = doc.getElementsByTagName('head')[0];
            if (!head) {
                head = $$('head', doc);
                doc.documentElement.appendChild(head)
            }
            var css = $$('link', doc);
            css.href = href;
            css.type = 'text/css';
            css.rel = 'stylesheet';
            head.appendChild(css)
        },
        show_: function() {
            var doc = this.popup_.document;
            doc.body.onmouseenter = Topmost.event.OnMouseEnter;
            if (this.ev_fill_) {
                this.ev_fill_ = false;
                this.fill_(this)
            }
            var c = this.cfg_;
            try {
                this.popup_.show(c.left, c.top, c.width, c.height)
            } catch (e) {}
            if (!this.debug_win_in_) {
                Topmost.POSITION = {
                    left: c.left,
                    top: c.top,
                    width: c.width,
                    height: c.height
                };
                Topmost.WinOut()
            }
            this.interval_ = WCT.SetTimeout(Topmost.Show, Topmost.REFRESH_INTERVAL)
        },
        fill_: function() {
            cleanup_controls_.call(this);
            this.popup_.document.body.innerHTML = '';
            var hdl = MANAGER.handler.GetTopmostConnected();
            var rtl = hdl.GetContentInfo().rtl;
            var doc = this.popup_.document;
            var body = doc.body;
            var cfg = {
                resizable: true,
                movable: true,
                mini: this.mini_,
                controls: this.controls_,
                skins: this.skins_,
                title: this.title_,
                doc: doc,
                w: this.cfg_.width,
                h: this.cfg_.height,
                onmousedown: Topmost.event.OnMoveResize,
                oncontrol: Topmost.event.OnControl,
                scope: this,
                id: '',
                rtl: rtl
            };
            var sk = this.skin_;
            var sp = SKIN.popup;
            if (sp.CreateFrame(body, sk.frame, cfg) && sp.CreateTitle(body, sk.title, cfg)) {
                cfg = {
                    skins: this.skins_,
                    doc: doc,
                    oncontrol: Topmost.event.OnControl,
                    scope: this,
                    rtl: rtl
                };
                if (sk.exit) {
                    cfg.id = 'exit';
                    cfg.title = hdl.Trans(sk.exit.tooltip || '');
                    sp.CreateControl(body, sk.exit, cfg)
                }
                if (sk.restore && sk.minimize) {
                    cfg.id = this.mini_ ? 'restore' : 'minimize';
                    cfg.title = hdl.Trans(sk[cfg.id].tooltip || '');
                    sp.CreateControl(body, sk[cfg.id], cfg)
                }
                return true
            }
            return false
        },
        get_pos_: function() {
            var c = this.cfg_;
            var x = 0;
            var w = screen.availWidth;
            switch (c.orientation) {
                case 'N':
                case 'S':
                case 'C':
                    x = (w - c.width) >> 1;
                    break;
                case 'NE':
                case 'E':
                case 'SE':
                    x = w - c.width;
                    break
            }
            var y = 0;
            var h = screen.availHeight;
            switch (c.orientation) {
                case 'W':
                case 'E':
                case 'C':
                    y = (h - c.height) >> 1;
                    break;
                case 'SW':
                case 'S':
                case 'SE':
                    y = h - c.height;
                    break
            }
            c.left = x;
            c.top = y
        },
        debug_: function(msg) {
            var hdl = MANAGER.handler.GetActive();
            var shl = hdl && hdl.GetSlideHandler();
            var wnd = shl && shl.GetWindow();
            if (wnd && MANAGER.standalone && wnd.Log) {
                try {
                    moveTo(0, 0)
                } catch (e) {
                    return
                }
                this.debug_win_in_ = true;
                wnd.DEBUG = true;
                wnd.Log(msg)
            }
        }
    }
})();
Topmost.event = (function() {
    function move_() {
        var t = Topmost.SCOPE;
        var d = t && t.popup_ && t.popup_.document || null;
        if (!d) return;
        var e = d.parentWindow.event;
        if (!e) return;
        var to = d.getElementById('top');
        var ti = d.getElementById('title');
        if (to) to.style.cursor = 'move';
        if (ti) ti.style.cursor = 'move';
        t.cfg_.left = e.screenX - t.ev_x_;
        t.cfg_.top = e.screenY - t.ev_y_;
        t.Refresh();
        return true
    };

    function stop_move_() {
        Topmost.event.Stop(this);
        var t = Topmost.SCOPE;
        var d = t && t.popup_ && t.popup_.document || null;
        if (!d) return true;
        var to = d.getElementById('top');
        var ti = d.getElementById('title');
        if (to) to.style.cursor = 'pointer';
        if (ti) ti.style.cursor = 'pointer';
        return true
    };

    function resize_() {
        var t = Topmost.SCOPE;
        if (!t) return true;
        var e = t.popup_ && t.popup_.document.parentWindow.event;
        if (!e) return;
        var x = null;
        var y = null;
        var w = null;
        var h = null;
        switch (t.ev_id_) {
            case 'nw':
            case 'w':
            case 'sw':
                x = e.screenX - t.ev_x_;
                w = t.cfg_.width + t.cfg_.left - x;
                break;
            case 'ne':
            case 'e':
            case 'se':
                w = e.screenX - t.ev_w_ - t.cfg_.left;
                break
        }
        switch (t.ev_id_) {
            case 'nw':
            case 'n':
            case 'ne':
                y = e.screenY - t.ev_y_;
                h = t.cfg_.height + t.cfg_.top - y;
                break;
            case 'sw':
            case 's':
            case 'se':
                h = e.screenY - t.ev_h_ - t.cfg_.top;
                break
        }
        if (w != null) {
            if (w < Topmost.event.MIN_W) w = Topmost.event.MIN_W;
            if (w == t.cfg_.width) w = null
        }
        if (h != null) {
            if (h < Topmost.event.MIN_H) h = Topmost.event.MIN_H;
            if (h == t.cfg_.height) h = null
        }
        if (w != null || h != null) {
            if (x != null) t.cfg_.left = x;
            if (y != null) t.cfg_.top = y;
            if (w != null) t.cfg_.width = w;
            if (h != null) t.cfg_.height = h;
            t.AfterResize();
            t.Refresh(true)
        }
        return true
    };

    function stop_resize_() {
        Topmost.event.Stop(this);
        return true
    };
    return {
        MIN_W: 100,
        MIN_H: 100,
        MOVE_RESIZE_MAP: {
            top: {
                f1: 'move_',
                f2: 'stop_move_'
            },
            title: {
                f1: 'move_',
                f2: 'stop_move_'
            },
            nw: {
                f1: 'resize_',
                f2: 'stop_resize_'
            },
            n: {
                f1: 'resize_',
                f2: 'stop_resize_'
            },
            ne: {
                f1: 'resize_',
                f2: 'stop_resize_'
            },
            w: {
                f1: 'resize_',
                f2: 'stop_resize_'
            },
            e: {
                f1: 'resize_',
                f2: 'stop_resize_'
            },
            sw: {
                f1: 'resize_',
                f2: 'stop_resize_'
            },
            s: {
                f1: 'resize_',
                f2: 'stop_resize_'
            },
            se: {
                f1: 'resize_',
                f2: 'stop_resize_'
            }
        },
        CONTROL_MAP: {
            exit: 'Hide',
            minimize: 'ToggleMinimize',
            restore: 'ToggleMinimize'
        },
        Stop: function(el) {
            el.releaseCapture();
            el.onmousemove = null;
            el.onmouseup = null
        },
        OnMouseEnter: function() {
            var t = Topmost.SCOPE;
            if (!t) return true;
            t.popup_ && t.popup_.document.body.setActive();
            window.focus();
            Topmost.WinOut();
            return true
        },
        OnMoveResize: function() {
            var t = Topmost.SCOPE;
            if (!t) return true;
            var evt = t.popup_.document.parentWindow.event;
            var tar = evt.srcElement;
            if (!tar || !tar.id) return true;
            var map = Topmost.event.MOVE_RESIZE_MAP[tar.id];
            if (!map) return true;
            var f1 = map.f1 || null;
            var f2 = map.f2 || null;
            if (f1 && f2) {
                f1 = eval(f1);
                f2 = eval(f2)
            }
            if (typeof f1 != 'function' || typeof f2 != 'function') return true;
            t.ev_x_ = evt.screenX - t.cfg_.left;
            t.ev_y_ = evt.screenY - t.cfg_.top;
            t.ev_w_ = t.ev_x_ - t.cfg_.width;
            t.ev_h_ = t.ev_y_ - t.cfg_.height;
            t.ev_id_ = tar.id;
            var p = this.parentNode;
            p.setCapture();
            p.onmousemove = f1;
            p.onmouseup = f2;
            evt.cancelBubble = true;
            return true
        },
        OnControl: function(ctl_id) {
            var t = Topmost.SCOPE;
            if (!t) return;
            var act = Topmost.event.CONTROL_MAP[ctl_id];
            act && t[act] && t[act]()
        }
    }
})();
Topmost.praxis = function() {
    Topmost.apply(this, arguments);
    this.steps_ = 0;
    this.step_ = 0;
    this.visible_steps_ = null;
    this.jumpable_steps_ = null;
    this.titles_steps_ = null;
    this.task_h_ = Topmost.praxis.TASK_DEF_HEIGHT;
    this.task_min_h_ = 0;
    this.task_text_ = '';
    this.content_ = '';
    this.content_bgimages_ = [];
    this.saved_h_ = null;
    this.poi_ = null;
    this.cx_ = 0;
    this.cy_ = 0;
    this.cont_pos_ = null
};
Topmost.praxis.prototype = new Topmost;
WCT.ExtendObject(Topmost.praxis, {
    TASK_DEF_HEIGHT: 150,
    ScrollToPOI: function() {
        var me = Topmost.SCOPE;
        if (!me || !me.poi_) return;
        var cs = me.cont_pos_;
        var doc = me.popup_ && me.popup_.document;
        var el = doc && doc.getElementById('content');
        if (!cs || !el) return;
        var cw = el.scrollWidth;
        var ch = el.scrollHeight;
        var vw = cs.w;
        var vh = cs.h;
        var scroll_hor = vw < cw;
        var scroll_ver = vh < ch;
        if (!scroll_hor && !scroll_ver) return;
        var vx = me.cx_ || 0;
        var vy = me.cy_ || 0;
        var canvas = {
            x: vx,
            y: vy,
            w: vw,
            h: vh
        };
        var n = WCT.POI.Focus[me.poi_.focus_type](me.poi_, canvas);
        if (n.x != null) n.x = Math.min(Math.max(vw - cw, -n.x), 0);
        if (n.y != null) n.y = Math.min(Math.max(vh - ch, -n.y), 0);
        var end = {
            x: n.x != null ? n.x : vx,
            y: n.y != null ? n.y : vy
        };
        me.cx_ = end.x;
        me.cy_ = end.y;
        me.poi_uid_ = WCT.POI.Animate(el, canvas, end, 'SineInOut', me.poi_.anim_time, 10, null, null, true);
        me.poi_ = null
    },
    OnContentMoveStart: function() {
        var me = Topmost.SCOPE;
        if (!me) return;
        var cs = me.cont_pos_;
        var doc = me.popup_ && me.popup_.document;
        var evt = doc && doc.parentWindow.event;
        if (!cs || !evt) return;
        var el = doc.getElementById('content');
        if (!el) return;
        var cw = el.scrollWidth;
        var ch = el.scrollHeight;
        if (cw <= cs.w && ch <= cs.h) return;
        me.start_x_ = evt.clientX - me.cx_;
        me.start_y_ = evt.clientY - me.cy_;
        me.stop_x_ = -cw + cs.w;
        me.stop_y_ = -ch + cs.h;
        var par = el.parentNode;
        par.setCapture();
        par.onmouseup = Topmost.praxis.OnContentMoveEnd;
        par.onmousemove = Topmost.praxis.OnContentMove
    },
    OnContentMoveEnd: function() {
        var me = Topmost.SCOPE;
        if (!me) return;
        var doc = me.popup_ && me.popup_.document;
        var evt = doc && doc.parentWindow.event;
        if (!evt) return;
        var el = doc.getElementById('content') || null;
        if (!el) return;
        var x = Math.max(me.stop_x_, Math.min(0, evt.clientX - me.start_x_));
        var y = Math.max(me.stop_y_, Math.min(0, evt.clientY - me.start_y_));
        el.style.left = x + 'px';
        el.style.top = y + 'px';
        me.cx_ = x;
        me.cy_ = y;
        var par = el.parentNode;
        par.releaseCapture();
        par.onmouseup = null;
        par.onmousemove = null
    },
    OnContentMove: function() {
        var me = Topmost.SCOPE;
        if (!me) return;
        var doc = me.popup_ && me.popup_.document;
        var evt = doc && doc.parentWindow.event;
        if (!evt) return;
        var el = doc.getElementById('content') || null;
        if (!el) return;
        var x = Math.max(me.stop_x_, Math.min(0, evt.clientX - me.start_x_));
        var y = Math.max(me.stop_y_, Math.min(0, evt.clientY - me.start_y_));
        el.style.left = x + 'px';
        el.style.top = y + 'px'
    },
    OnSeparatorClick: function() {
        var t = Topmost.SCOPE;
        if (!t) return;
        if (t.sep_moved_) {
            t.sep_moved_ = false;
            return
        }
        var ss = t.skin_.separator;
        var cs = t.skin_.content;
        if (!ss || !cs) return;
        var c = t.cfg_;
        if (t.saved_h_ == null) {
            t.saved_h_ = c.height;
            c.height = t.task_h_ + ss.h + (cs.outer_spacing_b || 0) - 1;
        } else {
            c.height = t.saved_h_;
            t.saved_h_ = null
        }
        Topmost.praxis.SetHeights();
        t.Refresh(true)
    },
    OnSeparatorMoveStart: function() {
        var t = Topmost.SCOPE;
        if (!t) return;
        var e = t.popup_ && t.popup_.document.parentWindow.event;
        if (!e) return;
        var c = t.cfg_;
        if (t.task_ev_h_ == null) {
            var sh = t.skin_.frame ? SKIN.popup.GetDim(t.skin_.frame).b : 0;
            t.task_ev_h_ = t.task_h_;
            t.task_ev_mh_ = c.height - t.skin_.separator.sep_sp.h + 1;
            sh != null && (t.task_ev_mh_ -= sh)
        }
        var h = Math.max(t.task_min_h_, e.screenY - t.ev_y_ + t.task_ev_h_ - c.top);
        h = Math.min(h, t.task_ev_mh_);
        if (h != t.task_h_) {
            t.sep_moved_ = true;
            t.task_h_ = h;
            Topmost.praxis.SetHeights()
        }
        return true
    },
    OnSeparatorMoveEnd: function() {
        var t = Topmost.SCOPE;
        if (!t) return true;
        if (t.sep_moved_) WCT.SetTimeout(Topmost.praxis.AfterSeparatorMove, 20);
        delete t.task_ev_h_;
        delete t.task_ev_mh_;
        Topmost.event.Stop(this);
        return true
    },
    AfterSeparatorMove: function() {
        var t = Topmost.SCOPE;
        if (t) t.sep_moved_ = false
    },
    SetHeights: function() {
        var t = Topmost.SCOPE;
        if (!t) return;
        var doc = t.popup_.document;
        var body = doc.body;
        var ts = t.skin_.task;
        var as = ts && ts.area || null;
        var tls = ts && ts.timeline || null;
        var task = doc.getElementById('frame');
        var area = doc.getElementById('task');
        if (as && tls && task && area) {
            var task_bh = [];
            if (ts.prev) task_bh.push(ts.prev.h);
            if (ts.pnext) task_bh.push(ts.next.h);
            var task_tbh = Math.max(tls.h, task_bh.length ? task_bh.max() : 0);
            var task_h = t.task_h_ - (ts.outer_spacing_t || 0);
            var task_ah = task_h - (as.outer_spacing_t || 0) - (as.outer_spacing_b || 0) - task_tbh;
            task.style.height = task_h + 'px';
            if (task_ah > 0) {
                area.style.height = task_ah + 'px';
                area.style.display = 'block'
            } else {
                area.style.display = 'none'
            }
        }
        var sep_w = doc.getElementById('sep_w');
        var sep_e = doc.getElementById('sep_e');
        var sep_c = doc.getElementById('sep_c');
        var sep_sp = doc.getElementById('sep_sp');
        if (sep_w && sep_e && sep_c && sep_sp) {
            var sep_y = t.task_h_ - 1 + 'px';
            sep_w.style.top = sep_y;
            sep_e.style.top = sep_y;
            sep_c.style.top = sep_y;
            sep_sp.style.top = sep_y
        }
        var ss = t.skin_.separator;
        var cs = t.skin_.content;
        var content = doc.getElementById('content#outside');
        if (ss && cs && content) {
            var cont_b = cs.outer_spacing_b || 0;
            var cont_h = t.cfg_.height - t.task_h_ - ss.h - cont_b + 1;
            t.cont_pos_.h = cont_h;
            content.style.height = cont_h + 'px'
        }
    }
});
WCT.ExtendObject(Topmost.praxis.prototype, (function() {
    function create_task_() {
        var ts = WCT.DeepCopy(this.skin_.task);
        if (!ts) return false;
        var as = ts.area || null;
        var tls = ts.timeline;
        if (!as || !tls) return false;
        ts.x = ts.outer_spacing_l || 0;
        ts.y = ts.outer_spacing_t || 0;
        as.border_style = 'solid';
        as.border_width = 1;
        as.padding = 5;
        as.x = as.outer_spacing_l || 0;
        as.y = as.outer_spacing_t || 0;
        if (ts.prev) {
            if (!ts.prev.x) ts.prev.x = -29;
            ts.prev.y = -5
        }
        if (ts.next) {
            if (!ts.next.x) ts.next = -5;
            ts.next.y = -5
        }
        var doc = this.popup_.document;
        var body = doc.body;
        ts.w = this.cfg_.width - ts.x - (ts.outer_spacing_r || 0);
        var frame = $$('div', doc);
        frame.id = 'frame';
        WCT.skin.ApplyPosition(frame, ts);
        WCT.skin.ApplyTextFormats(frame, ts);
        body.appendChild(frame);
        var b_h = [];
        ts.prev && b_h.push(ts.prev.h);
        ts.pnext && b_h.push(ts.next.h);
        var res_h = Math.max(tls.h, b_h.max());
        this.task_min_h_ = ts.y + as.y + res_h;
        as.w = ts.w - as.x - (as.outer_spacing_r || 0);
        var hdl = MANAGER.handler.GetTopmostConnected();
        var rtl = hdl.GetContentInfo().rtl;
        var area = $$('div', doc);
        area.id = 'task';
        area.className = 'dgo_text_container';
        WCT.skin.ApplyPosition(area, as, true);
        WCT.skin.ApplyBorder(area, as);
        WCT.skin.ApplyTextFormats(area, as);
        area.style.overflow = 'auto';
        if (rtl) {
            area.style.direction = 'rtl';
            area.setAttribute('dir', 'rtl')
        } else {
            area.style.direction = 'ltr';
            area.setAttribute('dir', 'ltr')
        }
        frame.appendChild(area);
        area.onselectstart = function() {
            return false
        };
        area.ondragstart = function() {
            return false
        };
        this.controls_.push(area);
        create_timeline_.call(this);
        var sp = SKIN.popup;
        var cfg = {
            skins: this.skins_,
            doc: doc,
            oncontrol: Topmost.event.OnControl,
            scope: this,
            rtl: rtl
        };
        if (ts.prev) {
            cfg.id = 'prev';
            cfg.title = hdl.Trans(ts.prev.tooltip);
            sp.CreateControl(frame, ts.prev, cfg)
        }
        if (ts.next) {
            cfg.id = 'next';
            cfg.title = hdl.Trans(ts.next.tooltip);
            sp.CreateControl(frame, ts.next, cfg)
        }
        var cm = Topmost.event.CONTROL_MAP;
        cm.prev = 'Prev';
        cm.next = 'Next';
        this.SetTask(this.task_text_);
        return true
    };

    function create_timeline_() {
        var ts = this.skin_.task;
        var skin = ts.timeline;
        if (!skin) return;
        var tl = this.skins_.indexOfAtt('timeline', 'i');
        if (tl >= 0) SKIN.timeline.Cleanup('timeline');
        this.skins_.splice(tl, 1);
        var hdl = MANAGER.handler.GetTopmostConnected();
        var doc = this.popup_.document;
        var body = doc.body;
        var frame = doc.getElementById('frame');
        SKIN.timeline.Add({
            id: 'timeline',
            skin: skin,
            dom: frame,
            ori: 'hor',
            steps: this.steps_,
            onexec: on_timeline_,
            scope: this,
            doc: doc,
            rtl: hdl.GetContentInfo().rtl,
            visibles: this.visible_steps_,
            jumpables: this.jumpable_steps_,
            titles: this.titles_steps_
        });
        SKIN.timeline.MoveTo('timeline', 6, -20);
        SKIN.timeline.Resize('timeline', this.cfg_.width - (skin.outer_spacing_r || 0));
        this.skins_.push({
            t: 'timeline',
            i: 'timeline'
        })
    };

    function create_separator_() {
        var s = this.skin_.separator;
        if (!s || !this.skin_.task) return false;
        var doc = this.popup_.document;
        var body = doc.body;
        var y = this.task_h_ - 1;
        var w = this.cfg_.width;
        var h = s.h;
        var f_sh = this.skin_.frame ? SKIN.popup.GetDim(this.skin_.frame).b : 0;
        Topmost.event.MIN_H = y + h + f_sh;
        for (var id in s) {
            if (typeof s[id] != 'object') continue;
            var el = $$('div', doc);
            var cs = s[id];
            switch (id) {
                case 'sep_w':
                    cs.x = 0;
                    cs.h = h;
                    break;
                case 'sep_e':
                    cs.x = '-0';
                    cs.h = h;
                    break;
                case 'sep_c':
                    cs.x = s.sep_w.w;
                    cs.w = w - s.sep_w.w - s.sep_e.w;
                    cs.h = h;
                    Topmost.event.MOVE_RESIZE_MAP[id] = {
                        f1: 'Topmost.praxis.OnSeparatorMoveStart',
                        f2: 'Topmost.praxis.OnSeparatorMoveEnd'
                    };
                    el.style.cursor = 'n-resize';
                    el.onmousedown = Topmost.event.OnMoveResize;
                    this.controls_.push(el);
                    break;
                case 'sep_sp':
                    cs.x = (w - cs.w) >> 1;
                    cs.h = h;
                    Topmost.event.MOVE_RESIZE_MAP[id] = {
                        f1: 'Topmost.praxis.OnSeparatorMoveStart',
                        f2: 'Topmost.praxis.OnSeparatorMoveEnd'
                    };
                    el.style.cursor = 'pointer';
                    el.onmousedown = Topmost.event.OnMoveResize;
                    el.onclick = Topmost.praxis.OnSeparatorClick;
                    this.controls_.push(el);
                    break
            }
            el.id = id;
            WCT.skin.ApplyPosition(el, cs);
            WCT.skin.ApplyBgImage(el, cs.image);
            body.appendChild(el)
        }
        return true
    };

    function create_content_() {
        var ss = this.skin_.separator;
        var cs = this.skin_.content;
        if (!ss || !cs) return false;
        var doc = this.popup_.document;
        var body = doc.body;
        var l = cs.outer_spacing_l || 0;
        var r = cs.outer_spacing_r || 0;
        var b = cs.outer_spacing_b || 0;
        var p = {
            x: l,
            y: b == 0 ? '-0' : -b,
            w: this.cfg_.width - l - r
        };
        this.cont_pos_ = p;
        var outside = $$('div', doc);
        outside.id = 'content#outside';
        WCT.skin.ApplyPosition(outside, p);
        outside.style.overflow = 'hidden';
        body.appendChild(outside);
        this.controls_.push(outside);
        var cont = $$('div', doc);
        cont.id = 'content';
        cont.style.position = 'absolute';
        cont.style.left = this.cx_ + 'px';
        cont.style.top = this.cy_ + 'px';
        cont.style.cursor = 'move';
        outside.appendChild(cont);
        cont.onselectstart = function() {
            return false
        };
        cont.ondragstart = function() {
            return false
        };
        cont.onmousedown = Topmost.praxis.OnContentMoveStart;
        this.controls_.push(cont);
        cont.innerHTML = this.content_;
        if (this.poi_) WCT.SetTimeout(Topmost.praxis.ScrollToPOI, 5);
        return true
    };

    function on_timeline_(ctl_id) {
        var step = Number(ctl_id.split('#').top());
        if (!isNaN(step) && step > 0 && step <= this.steps_) {
            this.Jump(step - 1)
        }
    };

    function update_content_bgimage_(html) {
        var start = html.indexOf('id="base_obj#bgimage"');
        if (start < 0) start = html.indexOf('id=base_obj#bgimage');
        var end = html.indexOf('</div></div>', start + 1);
        if (end < 0) end = html.indexOf('</DIV></DIV>', start + 1);
        if (start < 0 || end < 0) return true;
        var img = html.substring(start, end).match(/src=".*?"/);
        for (var i = img.length - 1; i >= 0; i--) {
            img[i] = img[i].substring(5, img[i].length - 1)
        }
        var cbi = this.content_bgimages_;
        if (img.length != cbi.length) {
            this.content_bgimages_ = img;
            return true
        }
        for (var i = img.length - 1; i >= 0; i--) {
            if (img[i] != cbi[i]) {
                this.content_bgimages_ = img;
                return true
            }
        }
        return false
    };
    return {
        Destructor: function() {
            var wnd = this.popup_.document.parentWindow;
            if (wnd) {
                wnd.ctx = null;
                wnd.Page = null
            }
            WCT.POI.StopAnimation(this.poi_uid_);
            this.task_text_ = null;
            this.content_ = null;
            this.content_bgimages_ = null;
            this.visible_steps_ = null;
            this.jumpable_steps_ = null;
            this.titles_steps_ = null;
            this.poi_ = null;
            Topmost.prototype.Destructor.call(this)
        },
        Restart: function() {
            this.content_ = '';
            this.content_bgimages_ = []
        },
        AfterResize: function() {
            this.cx_ = 0;
            this.cy_ = 0
        },
        SetSteps: function(s, v, j, t) {
            this.steps_ = s;
            this.visible_steps_ = v;
            this.jumpable_steps_ = j;
            this.titles_steps_ = t;
            var ts = this.skin_.task;
            var tls = ts.timeline;
            if (!tls) return;
            var doc = this.popup_.document;
            var body = doc.body;
            var frame = doc.getElementById('frame');
            create_timeline_.call(this)
        },
        SetStep: function(s) {
            this.step_ = s;
            SKIN.timeline.Step('timeline', s + 1)
        },
        SetTask: function(html) {
            var doc = this.popup_.document;
            var el = doc && doc.getElementById('task') || null;
            this.task_text_ = html;
            if (el) el.innerHTML = html
        },
        SetContent: function(dom) {
            var html = dom.innerHTML;
            if (html == this.content_) return;
            this.content_ = html;
            var doc = this.popup_.document;
            var el = doc && doc.getElementById('content') || null;
            if (el) {
                if (update_content_bgimage_.call(this, html)) {
                    el.innerHTML = html
                } else {
                    var start = false;
                    var cn = el.childNodes;
                    var n = null;
                    var i = 0;
                    while (n = cn[i]) {
                        if (n.nodeType != WCT.dom.ELEMENT_NODE) {
                            i++
                        } else if (start) {
                            el.removeChild(n)
                        } else if (n.id == 'base_obj') {
                            start = true;
                            i++
                        } else {
                            i++
                        }
                    }
                    var d = $$('div', doc);
                    d.innerHTML = html;
                    start = false;
                    cn = d.childNodes;
                    n = null;
                    i = 0;
                    while (n = cn[i]) {
                        if (n.nodeType != WCT.dom.ELEMENT_NODE) {
                            i++
                        } else if (start) {
                            el.appendChild(n)
                        } else if (n.id == 'base_obj') {
                            start = true;
                            i++
                        } else {
                            i++
                        }
                    }
                }
                var cb = dom.getElementsByTagName('input');
                for (var i = 0, e1 = null; e1 = cb[i++];) {
                    if (e1.type == 'checkbox' || e1.type == 'radio') {
                        var e2 = doc.getElementById(e1.id);
                        if (e2) {
                            e2.checked = e1.checked;
                            e2.value = e1.value
                        }
                    }
                }
                var sb = dom.getElementsByTagName('select');
                for (var i = 0, e1 = null; e1 = sb[i++];) {
                    var e2 = doc.getElementById(e1.id);
                    if (e2) e2.selectedIndex = e1.selectedIndex
                }
                if (this.poi_) WCT.SetTimeout(Topmost.praxis.ScrollToPOI, 5)
            }
        },
        ScrollToPOI: function(poi, focus_type, anim_time, orig) {
            orig.focus_type = focus_type;
            orig.anim_time = anim_time;
            this.poi_ = orig
        },
        ResetPOI: function() {
            this.poi_ = {
                x: 0,
                y: 0,
                w: 100,
                h: 100,
                time: 100,
                focus_type: 'Simple'
            };
            var doc = this.popup_.document;
            var el = doc && doc.getElementById('content') || null;
            if (el) {
                el.style.left = '0px';
                el.style.top = '0px'
            }
        },
        Prev: function() {
            var hdl = MANAGER.handler.GetTopmostConnected();
            if (hdl) hdl.ExecCommand('prev_task')
        },
        Next: function() {
            var hdl = MANAGER.handler.GetTopmostConnected();
            if (hdl) hdl.ExecCommand('next_task')
        },
        Jump: function(step) {
            var hdl = MANAGER.handler.GetTopmostConnected();
            if (hdl) hdl.ExecCommand('jump', step)
        },
        fill_: function() {
            if (Topmost.prototype.fill_.call(this) && !this.mini_) {
                var wnd = this.popup_.document.parentWindow;
                if (wnd) {
                    wnd.ctx = {
                        cfg_show: function() {
                            if (parent.topmost_ctx && parent.topmost_ctx.cfg_show) {
                                parent.topmost_ctx.cfg_show(arguments[0], true, 'force=1')
                            }
                        }
                    };
                    wnd.Page = {
                        RTFireTrigger: function() {
                            if (parent.topmost_ctx && parent.topmost_ctx.cfg_show) {
                                parent.topmost_ctx.cfg_show('trigger!' + arguments[0])
                            }
                        }
                    }
                }
                if (create_task_.call(this) && create_separator_.call(this) && create_content_.call(this)) {
                    Topmost.praxis.SetHeights();
                    this.SetStep(this.step_);
                    return true
                }
            }
            return false
        }
    }
})());
var DEFAULTS = {
    ok: {
        t: 'boolean',
        d: true
    },
    show: {
        t: 'string',
        d: ''
    },
    style: {
        t: 'string',
        d: 'default'
    },
    library: {
        t: 'string',
        d: 'library.txt'
    },
    navigator: {
        t: 'boolean',
        d: false
    },
    help4: {
        t: 'boolean',
        d: false
    },
    cache: {
        t: 'boolean',
        d: true
    },
    version: {
        t: 'string',
        d: '~~~VERSION~~~'
    },
    selftest: {
        t: 'boolean',
        d: false
    },
    title: {
        t: 'string',
        d: ''
    },
    window_cfg_top: {
        t: 'number',
        d: null
    },
    window_cfg_left: {
        t: 'number',
        d: null
    },
    window_cfg_width: {
        t: 'number',
        d: null
    },
    window_cfg_height: {
        t: 'number',
        d: null
    },
    window_cfg_orientation: {
        t: 'string',
        d: ''
    },
    window_cfg_name: {
        t: 'string',
        d: ''
    },
    window_cfg_force: {
        t: 'boolean',
        d: null
    },
    window_cfg_features_fullscreen: {
        t: 'boolean',
        d: false
    },
    window_cfg_features_menubar: {
        t: 'boolean',
        d: true
    },
    window_cfg_features_toolbar: {
        t: 'boolean',
        d: true
    },
    window_cfg_features_location: {
        t: 'boolean',
        d: true
    },
    window_cfg_features_resizable: {
        t: 'boolean',
        d: true
    },
    window_cfg_features_scrollbars: {
        t: 'boolean',
        d: true
    },
    window_cfg_features_status: {
        t: 'boolean',
        d: true
    },
    handler_preloadfile: {
        t: 'string',
        d: ''
    },
    handler_socket: {
        t: 'boolean',
        d: false
    },
    handler_window_close: {
        t: 'boolean',
        d: true
    },
    handler_preload_lib: {
        t: 'boolean',
        d: false
    },
    video_mode: {
        t: 'boolean',
        d: false
    },
    video_fps: {
        t: 'number',
        d: 25
    },
    video_debug: {
        t: 'string',
        d: ''
    },
    panel_orientation: {
        t: 'string',
        d: 'top'
    },
    panel_fixed: {
        t: 'boolean',
        d: false
    },
    panel_toc_numbering: {
        t: 'string',
        d: '1.'
    },
    panel_toc_animation: {
        t: 'boolean',
        d: false
    },
    panel_lesson_nav_mode: {
        t: 'string',
        d: 'tourstop'
    },
    panel_nav_disabled: {
        t: 'boolean',
        d: false
    },
    panel_nav_chapter: {
        t: 'boolean',
        d: true
    },
    hide_panel: {
        t: 'boolean',
        d: false
    },
    panel_show_topic_title: {
        t: 'boolean',
        d: true
    },
    panel_send_content: {
        t: 'boolean',
        d: true
    },
    panel_taskinfo_toggle: {
        t: 'boolean',
        d: false
    },
    panel_show_help: {
        t: 'boolean',
        d: true
    },
    panel_show_exit: {
        t: 'boolean',
        d: true
    },
    panel_show_logo: {
        t: 'boolean',
        d: true
    },
    panel_show_subtitle: {
        t: 'boolean',
        d: false
    },
    tracking_backend: {
        t: 'string',
        d: 'none'
    },
    tracking_collaborator_detail: {
        t: 'number',
        d: 2
    },
    tracking_debug_mode: {
        t: 'boolean',
        d: false
    },
    tracking_scorm_simulation: {
        t: 'boolean',
        d: false
    },
    prevent_server_check: {
        t: 'boolean',
        d: false
    },
    scorm_tracking: {
        t: 'string',
        d: 'score'
    },
    scorm_decide_passed: {
        t: 'string',
        d: 'on_completion'
    },
    scorm_suspend_resume: {
        t: 'string',
        d: 'enabled'
    },
    scorm_scoring: {
        t: 'string',
        d: 'scoring_percentage'
    },
    scorm_score_precision: {
        t: 'number',
        d: 2
    },
    scorm_only_one_commit: {
        t: 'boolean',
        d: true
    },
    scorm_objective_tracking: {
        t: 'boolean',
        d: false
    },
    scorm_safe_mode: {
        t: 'boolean',
        d: false
    },
    scorm_location: {
        t: 'string',
        d: 'auto'
    },
    scorm_allow_restart: {
        t: 'boolean',
        d: true
    },
    scorm_nav_request: {
        t: 'boolean',
        d: false
    },
    aicc_tracking: {
        t: 'string',
        d: 'score'
    },
    aicc_objective_tracking: {
        t: 'boolean',
        d: false
    },
    aicc_decide_passed: {
        t: 'string',
        d: 'on_completion'
    },
    aicc_suspend_resume: {
        t: 'string',
        d: 'enabled'
    },
    aicc_score_precision: {
        t: 'number',
        d: 2
    },
    aicc_crossdomain: {
        t: 'string',
        d: 'disabled'
    },
    aicc_allow_restart: {
        t: 'boolean',
        d: true
    },
    feedback_enabled: {
        t: 'boolean',
        d: false
    },
    feedback_force_end: {
        t: 'boolean',
        d: false
    },
    feedback_external_url: {
        t: 'string',
        d: ''
    },
    assignmentId: {
        t: 'string',
        d: ''
    },
    startMode: {
        t: 'string',
        d: 'start'
    },
    step: {
        t: 'string',
        d: ''
    },
    assets: {
        t: 'object',
        d: []
    },
    caption: {
        t: 'string',
        d: ''
    },
    description: {
        t: 'string',
        d: ''
    },
    shortdesc: {
        t: 'string',
        d: ''
    },
    tclass: {
        t: 'string',
        d: ''
    },
    uid: {
        t: 'string',
        d: ''
    },
    language: {
        t: 'string',
        d: ''
    },
    keywords: {
        i: true
    },
    context_id: {
        t: 'string',
        d: ''
    },
    creator: {
        t: 'string',
        d: ''
    },
    ctx: {
        t: 'boolean',
        d: false
    },
    book_style: {
        t: 'string',
        d: 'standard'
    },
    content_slide: {
        t: 'string',
        d: ''
    },
    book_page_sound: {
        t: 'string',
        d: ''
    },
    book_close_sound: {
        t: 'string',
        d: ''
    },
    single_click_opens_book: {
        t: 'boolean',
        d: false
    },
    hide_audio_controls: {
        t: 'boolean',
        d: false
    },
    hide_navigation_controls: {
        t: 'boolean',
        d: false
    },
    hide_index_page_button: {
        t: 'boolean',
        d: false
    },
    hide_search_button: {
        t: 'boolean',
        d: false
    },
    hide_toc_control: {
        t: 'boolean',
        d: false
    },
    hide_progress_control: {
        t: 'boolean',
        d: false
    },
    lms_cfg_track_completion: {
        t: 'boolean',
        d: true
    },
    max_score_percent: {
        t: 'number',
        d: null
    },
    mastery_score_percent: {
        t: 'number',
        d: null
    },
    contentlanguage: {
        t: 'string',
        d: 'en-US'
    },
    'control.mastery_percent': {
        t: 'number',
        d: 80
    },
    macroset: {
        t: 'string',
        d: ''
    },
    mediaqualities: {
        t: 'string',
        d: '.gsm.wav;.mp3'
    },
    mode: {
        t: 'string',
        d: ''
    },
    recording_mode: {
        t: 'string',
        d: ''
    },
    topmost: {
        t: 'boolean',
        d: false
    },
    topmost_orientation: {
        t: 'string',
        d: 'SE'
    },
    topmost_width: {
        t: 'number',
        d: 640
    },
    topmost_height: {
        t: 'number',
        d: 480
    },
    glossary_width: {
        t: 'number',
        d: 400
    },
    en_transition: {
        t: 'boolean',
        d: true
    },
    en_transition_rev: {
        t: 'boolean',
        d: true
    },
    t2_transition: {
        t: 'string',
        d: 'progid:DXImageTransform.Microsoft.GradientWipe(GradientSize=0.25, wipestyle=0, motion=reverse)'
    },
    t2_transition_rev: {
        t: 'string',
        d: 'progid:DXImageTransform.Microsoft.GradientWipe(GradientSize=0.25, wipestyle=0, motion=forward)'
    },
    t2_skin: {
        t: 'string',
        d: 'trainer_skin',
        n: 'skin'
    },
    tr: {
        t: 'string',
        d: 'standard'
    },
    guilanguage: {
        t: 'string',
        d: 'en-US'
    },
    show_focus_layer: {
        t: 'boolean',
        d: false
    },
    show_startpage: {
        t: 'boolean',
        d: false
    },
    show_stoppage: {
        t: 'boolean',
        d: true
    },
    startpage: {
        t: 'string',
        d: ''
    },
    big_mouse: {
        t: 'boolean',
        d: false
    },
    view_mode: {
        t: 'string',
        d: '100'
    },
    mobile_view_mode: {
        t: 'string',
        d: '100'
    },
    allow_mobile_pinch_zoom: {
        t: 'boolean',
        d: false
    },
    show_tts_subtitle: {
        t: 'boolean',
        d: false
    },
    sub_font_family: {
        t: 'string',
        d: 'Arial'
    },
    sub_font_size: {
        t: 'string',
        d: '13'
    },
    sub_text_color: {
        t: 'string',
        d: '#FFFFFF'
    },
    sub_align: {
        t: 'string',
        d: 'Center'
    },
    sub_background_color: {
        t: 'string',
        d: '#000000'
    },
    lib_shortdesc: {
        t: 'boolean',
        d: true
    },
    lib_desc: {
        t: 'boolean',
        d: true
    },
    lib_assets: {
        t: 'boolean',
        d: true
    },
    lib_tree: {
        t: 'boolean',
        d: true
    },
    lib_searchstring: {
        t: 'string',
        d: ''
    },
    lib_startentity: {
        t: 'string',
        d: ''
    },
    lib_glossary_root: {
        t: 'string',
        d: ''
    },
    lib_caption: {
        t: 'string',
        d: ''
    },
    lib_breadcrumb_trail: {
        t: 'boolean',
        d: true
    },
    lib_search_slides: {
        t: 'boolean',
        d: true
    },
    lib_entity_caption: {
        t: 'boolean',
        d: true
    },
    lib_list_mode: {
        t: 'string',
        d: 'content'
    },
    lib_glossary_rootlang: {
        t: 'boolean',
        d: false
    },
    lib_full_expand_check: {
        t: 'boolean',
        d: false
    },
    book_show_book_group: {
        t: 'boolean',
        d: false
    },
    book_show_cdoc: {
        t: 'boolean',
        d: false
    },
    book_show_project: {
        t: 'boolean',
        d: false
    },
    book_noslide_template: {
        t: 'string',
        d: ''
    },
    book_project_template: {
        t: 'string',
        d: ''
    },
    playback_mode: {
        t: 'string',
        d: 'audio_text'
    },
    allow_restart: {
        t: 'boolean',
        d: true
    },
    vol_master: {
        t: 'number',
        d: 100
    },
    vol_narrative: {
        t: 'number',
        d: 80
    },
    vol_booksound: {
        t: 'number',
        d: 50
    },
    vol_effects: {
        t: 'number',
        d: 50
    },
    vol_lesson: {
        t: 'number',
        d: 100
    },
    disable_fx: {
        t: 'boolean',
        d: true
    },
    audio_ext: {
        t: 'string',
        d: '.mp3'
    },
    keys_play: {
        t: 'string',
        d: 'space'
    },
    keys_pause: {
        t: 'string',
        d: 'space'
    },
    keys_stop: {
        t: 'string',
        d: ''
    },
    keys_back: {
        t: 'string',
        d: 'left'
    },
    keys_next: {
        t: 'string',
        d: 'right'
    },
    keys_feedback: {
        t: 'string',
        d: 'ctrl_f1'
    },
    keys_show_highlight: {
        t: 'string',
        d: ''
    },
    keys_ignore_hotkeys: {
        t: 'boolean',
        d: false
    }
};
DEFAULTS.GetFull = function() {
    var def = DEFAULTS;
    var o = {};
    for (var k in def) {
        var d = def[k];
        if (typeof d != 'function' && !d.i) {
            o[d.n || k] = d.d
        }
    }
    return o
};
DEFAULTS.Clamp = function(key, val) {
    var def = DEFAULTS[key];
    if (!def || def.i) return undefined;
    switch (def.t) {
        case 'boolean':
            var v = WCT.ClampBoolean(val, true);
            if (typeof v == 'boolean') return v;
            break;
        case 'number':
            if (typeof val == 'number') {
                return val
            } else if (val != null) {
                var n = Number(val);
                if (!isNaN(n)) return n
            }
            break;
        case 'object':
            if (typeof val == 'object') return val;
            break;
        case 'string':
            if (val != null) return val + '';
            break
    }
    return arguments[2] ? def.d : undefined
};
if (!window.DEBUG) DEBUG = false;
var SEARCH = {};
var CACHING_MODES = {
    FULL: 'full',
    MOBILE: 'mobile'
};
var WA_LAYOUT = {
    path: '',
    global: 'trainer_global.js',
    book: 'trainer_book.js',
    demo: 'trainer_demo.js',
    lib: 'trainer_lib.js',
    praxis: 'trainer_praxis.js',
    test: 'trainer_test.js',
    uebung: 'trainer_uebung.js',
    pres: 'trainer_pres.js',
    guided: 'trainer_guided.js',
    sim_fallbacks: 'simulation_fallbacks.js',
    slide_fallbacks: 'slide_fallbacks.js'
};
(function() {
    var manager_ = {
        wnd: null,
        active: null
    };
    var clients_ = {};
    var win_cfg_ = null;
    var entity_txt_ = 'entity.txt';
    var entity_txt_save_ = null;
    var busy_ = 0;
    var boot_debug_ = false;
    var boot_msg_ = '';
    var url_params_ = {};
    var url_search_ = '';
    var url_hash_ = '';
    var multi_file_map_ = {};
    var start_object_ = null;
    var cache_ = {};
    var async_idx_ = 0;
    var async_ = {};

    function load_cfg_(addrs) {
        var m = [];
        var b = [];
        for (var i = 0, a = null; a = addrs[i]; i++) {
            var d = this.GetS(a);
            if (!d) {
                b.push(a)
            } else {
                m.push(d)
            }
        }
        if (boot_debug_) boot_msg_ = b.join(', ');
        if (arguments[1]) {
            m.push(url_params_, arguments[1])
        } else {
            m.push(url_params_)
        }
        var cfg = merge_cfg_(m);
        return cfg && cfg.ok ? cfg : null
    };

    function merge_cfg_(cfgs) {
        var m = DEFAULTS.GetFull();
        for (var i = 0, c = null; c = cfgs[i++];) {
            for (var k in c) {
                var v = DEFAULTS.Clamp(k, c[k], true);
                if (typeof v != 'undefined') m[DEFAULTS[k].n || k] = v
            }
        }
        if (m) correct_cfg_(m);
        return m
    };

    function correct_cfg_(m) {
        m.window_cfg_name = m.window_cfg_name.replace(/ /g, '_');
        m.topmost = false;
        if (!m.lms_cfg_track_completion) {
            m.scorm_tracking = 'none';
            m.aicc_tracking = 'none'
        }
        var k = DATA.CFG_KEYS;
        for (var t in k) {
            var kt = k[t];
            for (var i = kt.length - 1; i >= 0; i--) {
                m[kt[i]] = m[kt[i]].replace(/ /g, '_')
            }
        }
        if (m.lib_searchstring) m.lib_list_mode = 'search';
        if (!m.book_noslide_template) {
            m.book_show_book_group = false;
            m.book_show_cdoc = false
        }
        if (!m.book_project_template) {
            m.book_show_project = false
        }
        if (m.video_debug) {
            m.video_mode = true;
            m.video_fps = 10
        }
        if (m.video_mode || m.navigator || m.help4) {
            var vm_reset = {
                window_cfg_top: null,
                window_cfg_left: null,
                window_cfg_width: null,
                window_cfg_height: null,
                window_cfg_orientation: null,
                window_cfg_name: null,
                window_cfg_features_menubar: null,
                window_cfg_features_toolbar: null,
                window_cfg_features_location: null,
                window_cfg_features_resizable: null,
                window_cfg_features_scrollbars: null,
                window_cfg_features_status: null,
                window_cfg_features_fullscreen: false
            };
            if (m.video_mode || m.navigator) {
                vm_reset.show_startpage = false;
                vm_reset.show_stoppage = false;
                vm_reset.hide_panel = m.video_mode && !m.navigator
            }
            for (var k in vm_reset) {
                m[k] = DEFAULTS.Clamp(k, vm_reset[k], true)
            }
        }
        if (m.ctx) {
            var c = DATA.GetUrlSearch(true).ctx.split('&').toMap({
                delimiter: '='
            });
            delete c.ctx;
            m.ctx = {};
            for (var i in c) {
                m.ctx[i.toLowerCase()] = c[i].toLowerCase()
            }
        }
        if (m.prevent_server_check) DATA.OmitRequest('.server')
    };

    function set_cache_(ckey, data) {
        if (data && DATA.CACHING_MODE == CACHING_MODES.MOBILE) {
            if (ckey.search(/:lesson\.js$|:slide\.js$|:textatoms.*?\.txt$|adaptable!.*?\.txt$/) >= 0) {
                return
            }
        }
        cache_[ckey] = data
    };

    function handle_mfm_(data) {
        for (var id in data) {
            var a = data[id];
            for (var i = 0, c = null; c = a[i++];) {
                multi_file_map_[c] = id
            }
        }
    };

    function handle_get_(addr, data) {
        var mfid = this.MULTI_FILE_ID;
        var ctx = this.context;
        var ckey = ctx.Resolve(addr);
        if (typeof data != 'object' || !data || !data[mfid]) {
            set_cache_(ckey, data);
            return data
        }
        if (data[this.MULTI_FILE_MAP_ID]) {
            handle_mfm_.call(this, data[this.MULTI_FILE_MAP_ID]);
            delete data[this.MULTI_FILE_MAP_ID]
        }
        set_cache_(ckey, null);
        var wadd = WCT.address;
        var r = null;
        for (var id in data) {
            if (id == mfid) continue;
            var a = new wadd(id).AsString();
            set_cache_(a, data[id]);
            if (a == ckey) r = data[id]
        }
        return r
    };

    function load_library_() {
        var src = url_params_.library || 'library.txt';
        var lib = this.GetS(src);
        if (!lib && src != 'library.txt') {
            src = 'library.txt';
            lib = this.GetS(src)
        }
        url_params_.library = src;
        if (lib) entity_txt_ = lib.entity_filename || 'entity.txt';
        return lib
    };

    function prepare_addr_(addr) {
        return addr.replace(/entity\.txt/, entity_txt_).replace(/^config:/, WA_LAYOUT.path).replace(/simulation_fallbacks\.js/, WA_LAYOUT.sim_fallbacks).replace(/slide_fallbacks\.js/, WA_LAYOUT.slide_fallbacks)
    };

    function prepare_ctx_(addr, ctx) {
        if (addr.indexOf('mgr:') !== 0 || !TRACKING.backend.collaborator.Available()) return;
        var b = ctx.GetBase().replace(/\/[^\/]+?\/[^\/]+?$/, '');
        ctx.SetServerBase(b)
    };
    window.DATA = {
        INDEX_HTML: 'index.html',
        MACROSET: DEBUG ? ['simulation_defaults.js', 'simulation_help.js', 'simulation_pp.js', 'simulation.js', 'simulation_branchform.js', 'simulation_action.js', 'simulation_quiz.js'] : ['simulationr.js'],
        SLIDE_RENDERER: DEBUG ? 'slide/slide.htm' : 'slide.htm',
        MULTI_FILE_ID: 'multi_file_',
        MULTI_FILE_MAP_ID: 'multi_file_map_',
        SKIN_PREFIX: 'adaptable!',
        CACHING_MODE: CACHING_MODES.FULL,
        HTML_STYLES_CSS: 'adaptable!text_styles:text_styles.css',
        DEFAULT_LANGUAGE: WCT.language.DEFAULT,
        LANGUAGE_SOURCES: ['glossary:textatoms.'],
        BOOT_FF_REBOOT: 'FF_REBOOT',
        BOOT_ERROR: 'ERROR',
        BOOT_OK: 'OK',
        BOOT_REOPEN: 'REOPEN',
        BOOT_TOPMOST: 'TOPMOST',
        BOOT_ERROR_PAGE: 'ERRORPAGE',
        CFG_KEYS: {
            lesson: ['keys_play', 'keys_pause', 'keys_stop', 'keys_back', 'keys_next', 'keys_show_highlight'],
            book: ['keys_stop', 'keys_back', 'keys_next'],
            slide: ['keys_stop'],
            library: ['keys_stop', 'keys_back', 'keys_next'],
            file: ['keys_stop']
        },
        CFG_VOLUME: ['vol_master', 'vol_narrative', 'vol_booksound', 'vol_effects', 'disable_fx'],
        CFG_WINDOW: ['title', 'window_cfg_top', 'window_cfg_left', 'window_cfg_width', 'window_cfg_height', 'window_cfg_orientation', 'window_cfg_name', 'window_cfg_features_fullscreen', 'window_cfg_features_menubar', 'window_cfg_features_toolbar', 'window_cfg_features_location', 'window_cfg_features_resizable', 'window_cfg_features_scrollbars', 'window_cfg_features_status', 'window_cfg_force'],
        CFG_TOPMOST: ['topmost', 'topmost_width', 'topmost_height', 'topmost_orientation'],
        HELP_DEF_LANG: 'en-US',
        HELP_LANGUAGES: {
            'de-DE': true,
            'en-US': true
        },
        HELP_LIBRARY_KEY: 2001,
        HELP_LESSON_KEY: 2022,
        HELP_BOOK_KEY: 2003,
        LESSON_MODE: {
            demo: true,
            uebung: true,
            praxis: true,
            test: true,
            pres: true,
            guided: true
        },
        LESSON_TOUR_KEY: 'Tour',
        SHARE_URL: '',
        context: new WCT.context(),
        Cleanup: function() {
            manager_.wnd = null;
            manager_.active = null;
            for (var c in clients_) {
                delete clients_[c]
            }
            clients_ = {};
            entity_txt_ = 'entity.txt';
            entity_txt_save_ = null;
            WCT.CleanupObject(url_params_);
            url_params_ = {};
            url_search_ = '';
            url_hash_ = '';
            WCT.CleanupObject(start_object_);
            start_object_ = null;
            WCT.CleanupObject(cache_);
            cache_ = {};
            WCT.CleanupObject(async_);
            async_idx_ = 0;
            async_ = {};
            multi_file_map_ = {};
            if (this.context) this.context.Destructor();
            this.context = new WCT.context()
        },
        InitLight: function() {
            var ctx = this.context;
            ctx.Set('glossary', 'standard');
            ctx.Set('style', 'default');
            ctx.Set('trainer', 'standard');
            if (PLATFORM.IOS && PLATFORM.VERSION < 7) this.CACHING_MODE = CACHING_MODES.MOBILE;
            var loc = location;
            var hs = loc.href.indexOf('?') >= 0;
            var hh = loc.href.indexOf('#') >= 0;
            var url = unescape(loc.href.split(hs || !hh ? '?' : '#')[0]);
            var idx1 = url.lastIndexOf('/');
            var idx2 = url.lastIndexOf('\\');
            var idx = -1;
            var st = '/';
            if (idx1 >= 0) {
                idx = idx1
            } else if (idx2 >= 0) {
                idx = idx2;
                st = '\\'
            }
            ctx.SetSlashType(st);
            url_hash_ = unescape(loc.search);
            if (loc.hash) {
                if (url_hash_.search(/&hash=/)) url_hash_ = url_hash_.replace(/\&hash=[^&]+/, '');
                var lhs = loc.hash.substr(1).split('&');
                var res = [];
                for (var i = 0, l = lhs.length; i < l; i++) {
                    var clh = lhs[i];
                    res.push((clh.search('=') === -1 ? 'hash=' : '') + clh)
                }
                if (res.length) url_hash_ += '&' + res.join('&')
            }
            if (url_hash_ && (url_hash_.indexOf('&') >= 0 || url_hash_.indexOf('=') >= 0)) {
                var hash_data = url_hash_.substr(1).split('&');
                url_hash_ = '';
                for (var i = 0, l = hash_data.length; i < l; i++) {
                    var hd = hash_data[i].split('=');
                    if (hd[0].trim() == 'hash') {
                        url_hash_ = '#' + hd[1].trim();
                        hash_data.splice(i, 1);
                        break
                    }
                }
                url_search_ = unescape('?' + hash_data.join('&'))
            }
            url = url.substr(0, idx >= 0 ? idx : 0);
            ctx.SetBase(url);
            ctx.Set('trainer', TRAINER_VERSION);
            url_params_.version = TRAINER_VERSION;
            this.DEFAULT_LANGUAGE = WCT.language.FromBrowser(this.DEFAULT_LANGUAGE);
            if (url_search_.length && url_search_.charAt(0) == '?') {
                var search = url_search_.substr(1);
                var cidx = search.indexOf('ctx=1');
                if (cidx >= 0) search = search.substr(0, cidx + 5);
                WCT.ExtendObject(url_params_, search.split('&').toMap({
                    delimiter: '='
                }))
            }
            url_params_.cache = url_params_.cache ? WCT.ClampBoolean(url_params_.cache) : true;
            if (url_params_.force_tablet) {
                BROWSER.TABLET = true;
                BROWSER.MOBILE = true
            } else if (url_params_.force_phone) {
                BROWSER.PHONE = true;
                BROWSER.MOBILE = true
            }
            var wnd = null;
            if (window.opener) {
                wnd = BROADCAST.SendClient(window.opener, 'GetActiveManager')
            } else if (parent && parent.parent) {
                wnd = BROADCAST.SendClient(parent.parent, 'GetActiveManager')
            }
            var uid = null;
            if (wnd != null) {
                try {
                    if (wnd.MANAGER) {
                        uid = wnd.MANAGER.GetUid();
                        if (uid && MANAGER.GetBase() != wnd.MANAGER.GetBase()) {
                            uid = null
                        }
                    }
                } catch (e) {
                    uid = null
                }
            }
            if (uid && uid != MANAGER.GetUid()) {
                manager_.wnd = wnd;
                manager_.active = false;
                var cfg = BROADCAST.SendMaster('ClientInit', window);
                this.Parse(cfg)
            } else {
                manager_.wnd = window;
                manager_.active = true;
                var urlStyle = url_params_.style;
                if (!urlStyle) {
                    var match = loc.hash.match(/style=([^&]+)(&|$)/);
                    urlStyle = match ? match[1] : 'default'
                }
                url_params_.style = DEFAULTS.Clamp('style', urlStyle, true);
                ctx.Set('style', url_params_.style);
                var d = this.GetS('style:entity.txt');
                if (d && d.simulation_playback) {
                    WA_LAYOUT.path = 'adaptable!' + d.simulation_playback + ':';
                    if (d.text_styles) {
                        this.HTML_STYLES_CSS = 'adaptable!' + d.text_styles + ':text_styles.css'
                    }
                }
            }
            return url_params_
        },
        InitFull: function() {
            var u = url_params_;
            var cfg = null;
            var mmode = null;
            if (u.error == 1) {
                return {
                    boot_status_: this.BOOT_ERROR_PAGE,
                    msg: u.error_msg,
                    opt: u.error_opt
                }
            }
            if (u.handler_preloadfile) {
                this.GetS(u.handler_preloadfile)
            }
            start_object_ = {
                type: null
            };
            if (u.config && !u.show) {
                var uc = u.config.split('/');
                uc[2] = uc[2].replace(/\..*$/, '');
                u.show = uc[0] + '!' + uc[1] + ':' + uc[2]
            }
            if (u.share_url) {
                this.SHARE_URL = u.share_url
            }
            var lib = null;
            if (u.show) {
                var r = new WCT.address(u.show);
                start_object_.full = r.AsString();
                start_object_.tclass = r.class_id;
                start_object_.uid = r.local_id;
                if (r.class_id == 'project') {
                    if (this.LESSON_MODE[r.sub_path]) {
                        start_object_.mode = r.sub_path
                    } else if (u.mode && this.LESSON_MODE[u.mode]) {
                        start_object_.mode = u.mode
                    } else {
                        start_object_.filename = r.sub_path
                    }
                } else {
                    start_object_.filename = r.sub_path
                }
            } else {
                lib = load_library_.call(this, u.library);
                if (lib) {
                    if (lib.root) {
                        var r = lib.root;
                        start_object_.full = r.tclass + '!' + r.uid + (r.mode ? ':' + r.mode : '');
                        start_object_.tclass = r.tclass;
                        start_object_.uid = r.uid;
                        start_object_.mode = r.mode
                    } else {
                        boot_msg_ = 'No Library Root!'
                    }
                }
            }
            if (start_object_.filename) {
                if (!HANDLER.file.IsAcceptedExt(start_object_.filename)) {
                    var url = this.context.ToAbsPath(start_object_.full);
                    return {
                        boot_url_: url,
                        boot_status_: this.BOOT_URL
                    }
                }
            }
            if (start_object_.uid) {
                boot_debug_ = true;
                switch (start_object_.tclass) {
                    case 'project':
                        if (this.LESSON_MODE[start_object_.mode]) {
                            if (url_hash_) {
                                start_object_.tourstop = url_hash_.substring(1)
                            } else if (r.sub_class_id === 'tourstop') {
                                start_object_.tourstop = r.sub_local_id
                            }
                            mmode = HANDLER.MODE.lesson;
                            cfg = this.GetConfig('project', start_object_.uid, start_object_.mode)
                        } else {
                            mmode = HANDLER.MODE.library;
                            if (!lib) load_library_.call(this, u.library);
                            cfg = this.GetConfig('project', start_object_.uid)
                        }
                        break;
                    case 'book':
                        if (url_hash_) start_object_.bookmark = url_hash_.substring(1);
                        mmode = HANDLER.MODE.book;
                        cfg = this.GetConfig('book', start_object_.uid);
                        break;
                    case 'slide':
                        mmode = HANDLER.MODE.slide;
                        cfg = this.GetConfig('slide', start_object_.uid);
                        break;
                    case 'group':
                        if (url_hash_) start_object_.bookmark = url_hash_.substring(1);
                        mmode = HANDLER.MODE.library;
                        if (!lib) load_library_.call(this, u.library);
                        cfg = this.GetConfig('group', start_object_.uid);
                        break;
                    case 'cdoc':
                        mmode = HANDLER.MODE.cdoc;
                        cfg = this.GetConfig('cdoc', start_object_.uid);
                        break
                }
                boot_debug_ = false;
                if (start_object_.filename) {
                    mmode = HANDLER.MODE.file
                }
            }
            if (cfg && mmode) {
                cfg.boot_status_ = this.BOOT_OK;
                start_object_.type = mmode;
                if (cfg.tr) this.context.Set('glossary', cfg.tr)
            } else {
                return {
                    boot_status_: BROWSER.FIREFOX && this.context.GetProtocol() == 'file' ? this.BOOT_FF_REBOOT : this.BOOT_ERROR,
                    boot_msg_: boot_msg_
                }
            }
            if (cfg.handler_preloadfile) {
                this.GetS(cfg.handler_preloadfile)
            }
            win_cfg_ = this.ExtractWindowConfig(cfg);
            var req_wnd = this.RequiresNewWindow(win_cfg_, true);
            if (BROWSER.IE && BROWSER.VERSION < 11 && start_object_.type == HANDLER.MODE.lesson && start_object_.mode == 'praxis') {
                cfg.topmost = true;
                cfg.boot_status_ = this.BOOT_TOPMOST
            } else if (manager_.active && !BROWSER.MOBILE && req_wnd) {
                cfg.boot_status_ = this.BOOT_REOPEN
            }
            cfg.boot_msg_ = boot_msg_;
            if (start_object_.type == HANDLER.MODE.library) {
                if (cfg.lib_startentity) {
                    if (!start_object_.bookmark) start_object_.bookmark = cfg.lib_startentity;
                    cfg.lib_startentity = ''
                }
            }
            return cfg
        },
        GetConfig: function() {
            var tclass = arguments[0] || (start_object_ ? start_object_.tclass : null);
            if (!tclass) return null;
            var uid = arguments[1];
            var mode = arguments[2];
            var props = arguments[3];
            if (tclass == 'project' && mode) {
                var addr = ['config:' + WA_LAYOUT.global, 'config:' + WA_LAYOUT[mode], 'project!' + uid + ':' + mode + '.js'];
                var d = this.GetS(addr[2]);
                this.context.Set('style', url_params_.style || d && d.style || DEFAULTS.style.d);
                return load_cfg_.call(this, addr, props)
            }
            var cfg = {
                book: 'book',
                slide: 'book',
                group: 'lib',
                project: 'lib',
                cdoc: 'lib'
            }[tclass];
            var addr = ['config:' + WA_LAYOUT.global, 'config:' + WA_LAYOUT[cfg]];
            if (uid) addr.push(tclass + '!' + uid + ':entity.txt');
            return load_cfg_.call(this, addr, props)
        },
        ExtractWindowConfig: function(cfg) {
            var a = this.CFG_WINDOW;
            var f = null;
            for (var i = 0, k = null; k = a[i]; i++) {
                if (k.substr(0, 11) != 'window_cfg_') continue;
                var v = null;
                var t = DEFAULTS[k].t;
                if (t == 'string') {
                    if (cfg[k] == '') continue
                } else if (t == 'number') {
                    if (typeof cfg[k] != 'number' || cfg[k] < 0) continue
                } else if (t != 'boolean') {
                    continue
                }
                if (cfg[k] != null) v = cfg[k];
                if (v != null) {
                    f || (f = {});
                    var s = k.substr(11);
                    if (s.substr(0, 9) == 'features_') {
                        f.features || (f.features = {});
                        f.features[s.substr(9)] = v
                    } else {
                        f[s] = v
                    }
                }
            }
            return f
        },
        RequiresNewWindow: function(cfg) {
            if (cfg.force) return true;
            var s = arguments[1] || false;
            var c = win_cfg_;
            for (var k in cfg) {
                switch (k) {
                    case 'top':
                    case 'left':
                    case 'width':
                    case 'height':
                        if (cfg[k] != -1 && (s || c[k] != cfg[k])) return true;
                        break
                }
            }
            var fn = cfg.features;
            var fc = c.features;
            if (!fn) return false;
            if (!fc) return true;
            for (var k in fn) {
                switch (k) {
                    case 'fullscreen':
                        if (s && fn[k] || !s && fc[k] != fn[k]) return true;
                        break;
                    case 'menubar':
                    case 'toolbar':
                    case 'location':
                    case 'resizable':
                    case 'scrollbars':
                    case 'status':
                        if (s && !fn[k] || !s && fc[k] != fn[k]) return true;
                        break
                }
            }
            return false
        },
        GetWindowConfig: function() {
            return win_cfg_
        },
        GetUrlParams: function() {
            return url_params_
        },
        GetUrlSearch: function() {
            if (arguments[0]) {
                var i = url_search_.indexOf('ctx=1');
                if (i >= 0) {
                    var s = url_search_.charAt(i - 1) == '&' ? url_search_.substr(0, i - 1) : url_search_.substr(0, i);
                    return {
                        search: s,
                        ctx: url_search_.substr(i)
                    }
                }
                return {
                    search: url_search_,
                    ctx: ''
                }
            }
            return url_search_
        },
        GetUrlHash: function() {
            return url_hash_
        },
        GetStartObject: function() {
            return start_object_
        },
        OmitRequest: function(addr) {
            var ckey = this.context.Resolve(addr);
            if (typeof cache_[ckey] == 'undefined') {
                cache_[ckey] = null
            }
        },
        SetEntityFilter: function(fid) {
            if (fid == null) {
                entity_txt_ = entity_txt_save_ != null ? entity_txt_save_ : 'entity.txt'
            } else {
                if (entity_txt_save_ == null) entity_txt_save_ = entity_txt_;
                entity_txt_ = 'entity' + fid + '.txt'
            }
        },
        GetS: function(addr) {
            var ctx = arguments[2] || this.context;
            prepare_ctx_(addr, ctx);
            addr = prepare_addr_(addr);
            var ckey = ctx.Resolve(addr);
            if (typeof cache_[ckey] != 'undefined') {
                return cache_[ckey]
            }
            var d = null;
            if (!manager_.active) {
                busy_++;
                d = BROADCAST.SendMaster('GetData', addr, arguments[1], ctx.Stringify());
                d = d ? JSON.parse(d) : null;
                busy_--
            } else {
                if (multi_file_map_[ckey]) {
                    this.GetS(multi_file_map_[ckey]);
                    if (typeof cache_[ckey] != 'undefined') {
                        return cache_[ckey]
                    }
                }
                busy_++;
                var e = arguments[1] != null ? arguments[1] : 'eval';
                var u = ctx.ToAbsPath(addr);
                if (!url_params_.cache && ckey !== '.server') {
                    u += '?' + Date.now()
                }
                d = XHR.GetS(u, e);
                busy_--;
                if (e == 'XML') {
                    if (arguments[3]) {
                        d = arguments[3](d)
                    } else {
                        return d
                    }
                }
            }
            return handle_get_.call(this, addr, d)
        },
        GetSM: function(addrs) {
            if (!TRACKING.backend.collaborator.Available()) return null;
            if (addrs.length == 1) {
                return this.GetS(addrs[0])
            }
            var c = arguments[1] || this.context;
            var o = [];
            var r = [];
            var s = [];
            var a = [];
            for (var i = 0, l = addrs.length; i < l; i++) {
                var addr = prepare_addr_(addrs[i]);
                var k = c.Resolve(addr);
                if (typeof cache_[k] != 'undefined') {
                    o[i] = cache_[k];
                    continue
                }
                o[i] = null;
                r.push({
                    k: k,
                    i: i
                });
                s.push({
                    method: 'GET',
                    url: c.ToRelPath(addr),
                    body: '{}'
                });
                a.push(addr)
            }
            if (!r.length) return o;
            var d = null;
            busy_++;
            if (!manager_.active) {
                d = BROADCAST.SendMaster('GetDataM', JSON.stringify(a), c.Stringify());
                d = d ? JSON.parse(d) : null
            } else {
                d = XHR.PostS(c.GetBase() + '/multiple_request', {
                    request: s
                }, 'JSON');
                d = d && d.response || null
            }
            busy_--;
            if (!d || d.length != r.length) return o;
            for (var i = 0, l = r.length; i < l; i++) {
                if (d[i] && !d[i].error_message) {
                    set_cache_(r[i].k, d[i]);
                    o[r[i].i] = d[i]
                } else {
                    set_cache_(r[i].k, null)
                }
            }
            return o
        },
        GetA: function(addr, callback, scope) {
            var ctx = arguments[4] || this.context;
            prepare_ctx_(addr);
            addr = prepare_addr_(addr);
            var ckey = ctx.Resolve(addr);
            if (typeof cache_[ckey] != 'undefined') {
                callback.call(scope, cache_[ckey], addr);
                return
            }
            var u = ctx.ToAbsPath(addr);
            if (!url_params_.cache) u += '?' + Date.now();
            var e = arguments[3] != null ? arguments[3] : 'eval';
            var i = async_idx_++;
            var f = function(r) {
                busy_--;
                this.GetA_cb(i, r);
                i = null
            };
            var p = function() {
                busy_--
            };
            busy_++;
            async_[i] = {
                f: callback,
                s: scope,
                a: addr,
                e: e,
                x: arguments[5]
            };
            XHR.GetA(u, this, f, p, e)
        },
        GetA_cb: function(i, r) {
            var a = async_[i];
            delete async_[i];
            if (a.e == 'XML') {
                if (a.x) {
                    r = a.x(r)
                } else {
                    a.f.call(a.s, r, a.a);
                    return
                }
            }
            r = handle_get_.call(this, a.a, r);
            a.f.call(a.s, r, a.a)
        },
        GetAll: function(addr) {
            if (busy_ > 0) {
                WCT.SetTimeout(this.GetAll, 100, this, [addr]);
                return
            }
            this.GetA(addr + ':entity.txt', this.GetAll_cb, this)
        },
        GetAll_cb: function(data, addr) {
            if (!data || !data.assets) return;
            for (var i = 0, a = null; a = data.assets[i++];) {
                if (a.tclass && a.uid) this.GetAll(a.tclass + '!' + a.uid)
            }
        },
        SetActiveManager: function(manager_wnd) {
            var uid = null;
            try {
                uid = manager_wnd.MANAGER.GetUid()
            } catch (e) {}
            if (uid == null) return;
            manager_.active = false;
            if (uid == MANAGER.GetUid()) {
                manager_.active = true;
                var cfg = BROADCAST.SendMaster('ClientInit');
                this.Parse(cfg);
                MANAGER.InitTracking();
                BROADCAST.SendMaster('NewMasterReady')
            }
            manager_.wnd = manager_wnd
        },
        GetActiveManager: function() {
            return manager_
        },
        AddClient: function(client_wnd) {
            var uid = null;
            try {
                uid = client_wnd.MANAGER.GetUid()
            } catch (e) {}
            if (uid != null) clients_[uid] = client_wnd
        },
        RemoveClient: function(client_uid) {
            delete clients_[client_uid]
        },
        HasClients: function() {
            for (var uid in clients_) {
                return true
            }
            return false
        },
        GetClients: function() {
            return clients_
        },
        GetSlideRendererUrl: function() {
            var search = arguments[0] || {};
            search.edit_mode = 0;
            search.t2 = 1;
            search.uid = WCT.uid.Generate('6');
            var s = [];
            for (var k in search) {
                s.push(k + '=' + search[k])
            }
            if (arguments[1]) s.push('hash=' + arguments[1]);
            search = s.join('&');
            var url = 'trainer:' + DATA.SLIDE_RENDERER;
            url = this.context.ToAbsPath(url);
            return url + (search ? ('#' + search) : '')
        },
        Stringify: function() {
            return JSON.stringify({
                cache: cache_,
                wa_layout: WA_LAYOUT,
                mfm: multi_file_map_
            })
        },
        Parse: function(cfg) {
            if (!cfg) return;
            cfg = JSON.parse(cfg);
            cache_ = cfg.cache;
            WA_LAYOUT = cfg.wa_layout;
            multi_file_map_ = cfg.mfm
        },
        Trans: function(key) {
            var lang = arguments[1] || this.DEFAULT_LANGUAGE;
            if (lang == 'mul') lang = 'en-US';
            if (cache_['lang!' + lang]) {
                var d = cache_['lang!' + lang][key];
                return d != null ? d : '[' + key + ']'
            }
            var urls = this.LANGUAGE_SOURCES;
            var def = this.DEFAULT_LANGUAGE;
            var data = {};
            var ctx = null;
            if (this.context.Get('glossary') != 'standard') {
                ctx = new WCT.context(this.context);
                ctx.Set('glossary', 'standard')
            }
            for (var i = 0, u = null; u = urls[i]; i++) {
                var a = u + lang + '.txt';
                if (!ctx) {
                    var d = this.GetS(a, '');
                    if (!d && lang != def) {
                        a = u + def + '.txt';
                        d = this.GetS(a, '')
                    }
                    if (d) {
                        d = WCT.localization.Parse(d);
                        set_cache_(a, d);
                        WCT.ExtendObject(data, d)
                    }
                } else {
                    var d1 = this.GetS(a, '');
                    var d2 = this.GetS(a, '', ctx);
                    if (!d1 && !d2 && lang != def) {
                        a = u + def + '.txt';
                        d1 = this.GetS(a, '');
                        d2 = this.GetS(a, '', ctx)
                    }
                    if (d2) {
                        d2 = WCT.localization.Parse(d2);
                        if (d1) {
                            d1 = WCT.localization.Parse(d1);
                            for (var k in d1) {
                                d2[k] = d1[k]
                            }
                        }
                        set_cache_(a, d2);
                        WCT.ExtendObject(data, d2)
                    } else if (d1) {
                        d1 = WCT.localization.Parse(d1);
                        set_cache_(a, d2);
                        WCT.ExtendObject(data, d2)
                    }
                }
            }
            set_cache_('lang!' + lang, data);
            return data[key] != null ? data[key] : '[' + key + ']'
        }
    }
})();
var SCORM_API = (function() {
    var data_ = {};
    var init_ = false;
    return {
        Enable: function(v) {
            if (v) {
                window.API_1484_11 = this
            } else if (window.API_1484_11) {
                window.API_1484_11 = null
            }
        },
        Initialize: function() {
            if (confirm('Restart?')) {
                data_ = WCT.store.Get(WCT.store.KEYS.scorm_api) || '{}';
                try {
                    data_ = JSON.parse(data_)
                } catch (e) {
                    data_ = {}
                }
            } else {
                WCT.store.Remove(WCT.store.KEYS.scorm_api);
                data_ = {}
            }
            init_ = true
        },
        Terminate: function() {
            init_ = false
        },
        GetValue: function(cmd) {
            return init_ && typeof data_[cmd] != 'undefined' ? data_[cmd] : null
        },
        SetValue: function(cmd, value) {
            if (init_) data_[cmd] = value
        },
        Commit: function() {}
    }
})();
var SOCKETS = {
    Cleanup: function() {
        for (var id in SOCKETS) {
            if (id != 'Cleanup') SOCKETS[id].Destructor()
        }
    }
};

function Socket(url, callback, scope) {
    var uid = WCT.uid.Generate(8, 'SOCK_');
    SOCKETS[uid] = this;
    this.uid_ = uid;
    this.url_ = url;
    this.cb_ = callback;
    this.scope_ = scope;
    this.conn_ = null
};
Socket.OnEvent = function(sid, type, evt) {
    var me = SOCKETS[sid];
    if (!me) return;
    switch (type) {
        case 'open':
        case 'close':
            if (me.cb_) me.cb_.call(me.scope_, type);
            break;
        case 'error':
        case 'message':
            if (me.cb_) me.cb_.call(me.scope_, type, evt.data);
            break
    }
};
Socket.prototype = {
    Destructor: function() {
        this.Close();
        delete SOCKETS[this.uid_];
        this.cb_ = null;
        this.scope_ = null
    },
    Open: function() {
        var c = this.conn_;
        if (c && c.readyState <= 1) {
            return true
        }
        var u = this.uid_;
        var s = window.WebSocket || window.MozWebSocket;
        try {
            c = s ? new s('ws://' + this.url_) : null
        } catch (e) {
            c = null
        }
        this.conn_ = c;
        if (!c) return false;
        c.onopen = function(evt) {
            Socket.OnEvent(u, 'open', evt)
        };
        c.onmessage = function(evt) {
            Socket.OnEvent(u, 'message', evt)
        };
        c.onerror = function(evt) {
            Socket.OnEvent(u, 'error', evt)
        };
        c.onclose = function(evt) {
            Socket.OnEvent(u, 'close', evt)
        };
        return true
    },
    Close: function() {
        if (this.conn_) this.conn_.close();
        this.conn_ = null
    },
    Send: function(msg) {
        var c = this.conn_;
        if (c && c.readyState == 1) {
            c.send(msg)
        }
    },
    GetState: function() {
        return c ? c.readyState : null
    }
};

function SocketHandler(callback, scope) {
    this.callback_ = callback;
    this.scope_ = scope;
    this.socket_ = null;
    this.socket_tries_ = 0;
    this.socket_synch_ = false
};
SocketHandler.MAX_SOCKET_RECONNECTS = 3;
SocketHandler.OnSocket = function(type) {
    var status = {
        cing: false,
        open: false,
        sync: false,
        disc: false
    };
    var s = this.socket_;
    switch (type) {
        case 'error':
            return;
            break;
        case 'open':
            this.socket_synch_ = false;
            this.socket_tries_ = 0;
            this.socket_.Send('HELO');
            status.open = true;
            break;
        case 'init':
            if (!s) {
                s = new Socket(document.location.host + '/', SocketHandler.OnSocket, this);
                this.socket_synch_ = false;
                this.socket_tries_ = 0;
                this.socket_ = s
            }
        case 'close':
            status.disc = true;
            if (!s) break;
            if (++this.socket_tries_ < SocketHandler.MAX_SOCKET_RECONNECTS) {
                status.disc = false;
                status.cing = true;
                if (!s.Open()) {
                    WCT.SetTimeout(SocketHandler.OnSocket, 100, this, ['close'])
                }
            } else {
                this.socket_ = null;
                s.Destructor()
            }
            break;
        case 'message':
            var data = arguments[1];
            this.socket_synch_ = data;
            status.sync = true;
            break;
        case 'sync':
            if (!s) return;
            if (this.socket_synch_ !== false) {
                status.sync = true;
                break
            }
        case 'unsync':
            if (!s) return;
            status.open = true;
            break
    }
    status.conn = this.socket_synch_ !== false;
    status.message = this.socket_synch_;
    this.callback_.call(this.scope_, status)
};
SocketHandler.prototype = {
    Destructor: function() {
        this.callback_ = null;
        this.scope_ = null;
        if (this.socket_) {
            var s = this.socket_;
            this.socket_ = null;
            s.Destructor()
        }
        this.socket_synch_ = null
    },
    Init: function() {
        SocketHandler.OnSocket.call(this, 'init')
    },
    Sync: function() {
        SocketHandler.OnSocket.call(this, 'sync')
    },
    Unsync: function() {
        SocketHandler.OnSocket.call(this, 'unsync')
    }
};
(function() {
    function init_(tclass, uid, pageset) {
        var e = this.entities_;
        if (tclass != 'slide' && e[tclass][uid]) return false;
        var info = DATA.GetS(tclass + '!' + uid + ':entity.txt');
        if (!info) return false;
        var item = {
            tclass: tclass,
            uid: uid,
            caption: info.caption || '',
            shortdesc: info.shortdesc || '',
            description: info.description || '',
            assets: WCT.DeepCopy(info.assets || []),
            hidden_in_toc: typeof info.hidden_in_toc !== 'undefined' ? WCT.ClampBoolean(info.hidden_in_toc) : false,
            pageset: [],
            order: [],
            parents: [],
            visited: false
        };
        e[tclass][uid] = item;
        if (tclass === 'slide') this._slideCnt++;
        if (item.hidden_in_toc) this._hidden.push(this._slideCnt);
        if (tclass == 'slide') {
            item.keywords = info.keywords || '';
            item.language = info.language || '';
            item.assets = [];
            return true
        }
        if (this.has_mngr_) {
            var r = [];
            for (var i = 0, a = null; a = item.assets[i]; i++) {
                switch (a.tclass) {
                    case 'slide':
                    case 'project':
                    case 'group':
                    case 'cdoc':
                    case 'book':
                        r.push(a.tclass + '!' + a.uid + ':entity.txt');
                        break
                }
            }
            if (r.length) DATA.GetSM(r)
        }
        var cd = this.cdoc_;
        var pj = this.project_;
        var bg = this.book_group_;
        var ac = {
            slide: 1,
            project: 1,
            group: 1,
            cdoc: 1,
            book: 1
        };
        for (var i = 0, a = null; a = item.assets[i++];) {
            if (!ac[a.tclass]) continue;
            var ps = a.tclass != 'book' ? pageset : a.uid;
            if (init_.call(this, a.tclass, a.uid, ps)) {
                item.order.push(a.tclass + '!' + a.uid);
                e[a.tclass][a.uid].parents.push(tclass + '!' + uid);
                if (a.tclass == 'slide' || bg && (a.tclass == 'group' || a.tclass == 'book') || cd && a.tclass == 'cdoc' || pj && a.tclass == 'project') {
                    e.book[pageset].pageset.push(a.uid)
                }
            } else {
                item.assets.splice(--i, 1)
            }
        }
        if (bg && uid == pageset) {
            e.book[uid].pageset.push(uid)
        }
        return true
    };

    function prune_(tclass, uid) {
        if (tclass == 'slide' || this.cdoc_ && tclass == 'cdoc' || this.project_ && tclass == 'project' || this.book_group_ && (tclass == 'book' || tclass == 'group')) {
            return
        }
        var e = this.entities_;
        var c = e[tclass][uid];
        var o = WCT.DeepCopy(c.order);
        for (var i = 0, id = null; id = o[i++];) {
            id = id.split('!');
            prune_.call(this, id[0], id[1])
        }
        if (!c.order.length) {
            var my = tclass + '!' + uid;
            var p = c.parents;
            for (var i = 0, id = null; id = p[i++];) {
                id = id.split('!');
                var par = e[id[0]][id[1]];
                var idx = par.order.indexOf(my);
                if (idx >= 0) par.order.splice(idx, 1)
            }
        }
    };

    function create_list_(tclass, uid) {
        var e = this.entities_[tclass][uid];
        var l = this.list_;
        var idx = l.length;
        var lvl = arguments[2] || 0;
        if (!e) e = {};
        l.push({
            tclass: tclass,
            uid: uid,
            caption: e.caption || '',
            level: lvl++,
            list_idx: idx,
            hidden_in_toc: !!e.hidden_in_toc
        });
        if (tclass == 'slide' || this.cdoc_ && tclass == 'cdoc' || this.project_ && tclass == 'project' || this.book_group_ && (tclass == 'book' || tclass == 'group')) {
            var o = this.order_;
            l[idx].order_idx = o.length;
            o.push(tclass + '!' + uid)
        }
        var order = e.order || [];
        for (var i = 0, id = null; id = order[i++];) {
            id = id.split('!');
            create_list_.call(this, id[0], id[1], lvl)
        }
    };

    function create_tree_(tclass, uid, tree) {
        var e = this.entities_[tclass][uid];
        var nbr = arguments[3] || 0;
        var par = typeof arguments[4] == 'number' ? arguments[4] : null;
        if (!e) e = {};
        var st = [];
        var tr = {
            type: 'Ref',
            tclass: tclass,
            caption: e.caption || '',
            shortdesc: e.shortdesc || '',
            description: e.description || '',
            uid: uid,
            subtree: st,
            nbr: nbr,
            par: par
        };
        tree.push(tr);
        this.treeindex_[nbr] = tr;
        par = nbr++;
        var assets = e.assets || [];
        for (var i = 0, a = null; a = assets[i++];) {
            if (a.type == 'Ref' || typeof a.type == 'undefined') {
                nbr = create_tree_.call(this, a.tclass, a.uid, st, nbr, par)
            } else {
                a = WCT.DeepCopy(a);
                a.nbr = nbr++;
                a.par = par;
                st.push(a)
            }
        }
        return nbr
    };

    function link_list_tree_(tree) {
        var l = this.list_;
        var lidx = arguments[1] || 0;
        for (var i = 0, n = null; n = tree[i++];) {
            var idx = l.indexOfAtt(n.uid, 'uid', lidx);
            if (idx >= 0) {
                n.list_idx = idx;
                l[idx].tree_nbr = n.nbr;
                lidx = idx + 1
            }
            if (n.subtree) lidx = link_list_tree_.call(this, n.subtree, lidx)
        }
        return lidx
    };

    function get_book_(titm) {
        var t = this.treeindex_;
        while (titm && titm.tclass != 'book') {
            titm = t[titm.par]
        }
        return titm ? titm.tclass + '!' + titm.uid : null
    };

    function bg_next_prev_(litm, next) {
        var l = this.list_;
        var t = this.treeindex_;
        var titm = t[litm.tree_nbr];
        var pitm = t[titm.par];
        var pst = pitm ? pitm.subtree : [];
        var idx = pst.indexOfAtt(litm.tree_nbr, 'nbr');
        if (idx >= 0) {
            var itm;
            var c = next ? 1 : -1;
            while (itm = pst[idx += c]) {
                var oidx = itm.list_idx != null ? l[itm.list_idx].order_idx : null;
                if (oidx != null) return oidx
            }
        }
        return null
    };

    function get_first_(oidx) {
        var l = this.list_;
        var i = l.indexOfAtt(oidx, 'order_idx');
        var v = l[i].level;
        while (l[i - 1] && l[i - 1].level == v) {
            i--
        }
        return l[i].order_idx
    };

    function std_next_prev_(lidx, next) {
        var l = this.list_;
        var t = this.treeindex_;
        var ed = this.entities_.cdoc;
        var cd = this.cdoc_;
        var litm = l[lidx];
        var ok = litm.tclass == 'cdoc' && (ed[litm.uid].order.length || !cd);
        var c = next ? 1 : -1;
        var itm;
        while (itm = l[lidx += c]) {
            switch (itm.tclass) {
                case 'book':
                case 'group':
                    ok = true;
                    break;
                case 'cdoc':
                    if (!cd) {
                        ok = true
                    } else if (itm.order_idx && (ok || ed[itm.uid].order.length || itm.level != litm.level)) {
                        return c > 0 ? itm.order_idx : get_first_.call(this, itm.order_idx)
                    }
                    break;
                case 'slide':
                    if (itm.order_idx && (ok || itm.level != litm.level)) {
                        return c > 0 ? itm.order_idx : get_first_.call(this, itm.order_idx)
                    }
                    break
            }
        }
        return null
    };

    function create_navi_() {
        var l = this.list_;
        var t = this.treeindex_;
        var n = this.navi_;
        var ed = this.entities_.cdoc;
        var cd = this.cdoc_;
        var pj = this.project_;
        var bg = this.book_group_;
        for (var i = 0, ol = this.order_.length; i < ol; i++) {
            var lidx = l.indexOfAtt(i, 'order_idx');
            var litm = l[lidx];
            var titm = t[litm.tree_nbr];
            var pitm = t[titm.par];
            n[i] = {
                book: get_book_.call(this, titm),
                chap: null,
                next: bg_next_prev_.call(this, litm, true),
                prev: bg_next_prev_.call(this, litm, false)
            };
            switch (litm.tclass) {
                case 'book':
                case 'group':
                    n[i].chap = litm.tclass + '!' + litm.uid;
                    break;
                case 'cdoc':
                    if (ed[litm.uid].order.length || !cd) {
                        n[i].chap = 'cdoc!' + litm.uid
                    }
                case 'project':
                    if (litm.tclass == 'project' && !pj) break;
                case 'slide':
                    if (!pitm) break;
                    if (!n[i].chap) n[i].chap = pitm.tclass + '!' + pitm.uid;
                    if (!bg) {
                        n[i].next = std_next_prev_.call(this, lidx, true);
                        n[i].prev = std_next_prev_.call(this, lidx, false)
                    }
                    break
            }
        }
    };

    function create_keywords_() {
        var sl = this.entities_.slide;
        var kw = this.keywords_;
        for (var id in sl) {
            var k = sl[id].keywords.split(',');
            for (var i = 0, l = k.length; i < l; i++) {
                var w = k[i].trim();
                if (w) {
                    if (!kw[w]) kw[w] = [];
                    kw[w].push({
                        uid: id,
                        caption: sl[id].caption
                    })
                }
            }
        }
    };
    window.Toc = function(tclass, uid) {
        var cfg = arguments[2] || {};
        this.tclass_ = tclass;
        this.uid_ = uid;
        this.cdoc_ = cfg.cdoc || false;
        this.book_group_ = cfg.book_group || false;
        this.project_ = cfg.project || false;
        this.has_mngr_ = TRACKING.backend.collaborator.Available();
        this.entities_ = {
            book: {},
            slide: {},
            group: {},
            project: {},
            cdoc: {}
        };
        this.list_ = [];
        this.tree_ = [];
        this.order_ = [];
        this.navi_ = {};
        this.keywords_ = {};
        this.treeindex_ = {};
        this._hidden = [];
        this._slideCnt = 0;
        if (init_.call(this, tclass, uid, uid) && cfg.full_setup !== false) {
            prune_.call(this, tclass, uid);
            create_list_.call(this, tclass, uid);
            create_tree_.call(this, tclass, uid, this.tree_);
            link_list_tree_.call(this, this.tree_);
            create_navi_.call(this);
            create_keywords_.call(this)
        }
    };
    window.Toc.prototype = {
        Destructor: function() {
            this.tclass_ = null;
            this.uid_ = null;
            WCT.CleanupObject(this.entities_);
            WCT.CleanupObject(this.list_);
            WCT.CleanupObject(this.tree_);
            WCT.CleanupObject(this.order_);
            WCT.CleanupObject(this.navi_);
            WCT.CleanupObject(this.keywords_);
            WCT.CleanupObject(this.treeindex_);
            this.entities_ = null;
            this.list_ = null;
            this.tree_ = null;
            this.order_ = null;
            this.navi_ = null;
            this.keywords_ = null;
            this.treeindex_ = null
        },
        GetBooks: function() {
            return this.entities_.book
        },
        GetProjects: function() {
            return this.entities_.project
        },
        GetList: function() {
            return this.list_
        },
        GetTree: function() {
            return this.tree_
        },
        GetKeywords: function() {
            return this.keywords_
        },
        GetSlideCount: function() {
            return this.order_.length
        },
        GetBook: function(order_idx) {
            var o = this.navi_[order_idx];
            if (o && o.book) {
                o = o.book.split('!');
                return this.entities_[o[0]][o[1]]
            }
            return null
        },
        GetChapter: function(order_idx) {
            var o = this.navi_[order_idx];
            if (o && o.chap) {
                o = o.chap.split('!');
                return this.entities_[o[0]][o[1]]
            }
            return null
        },
        GetSlide: function(order_idx) {
            var o = this.order_[order_idx];
            if (o) {
                o = o.split('!');
                return this.entities_[o[0]][o[1]]
            }
            return null
        },
        GetSlideOrderIdx: function(type, param) {
            switch (type) {
                case 'prev':
                case 'next':
                    var n = this.navi_[param];
                    return n && n[type] != null ? n[type] : null;
                    break;
                case 'cur':
                    var l = this.list_;
                    if ((arguments[2] || 'uid') == 'uid') {
                        var tclass = null;
                        var id = param;
                        if (id.indexOf('!') >= 0) {
                            id = id.split('!');
                            tclass = id[0];
                            id = id[1]
                        }
                        var idx = null;
                        if (tclass) {
                            for (var i = 0, c = null; c = l[i]; i++) {
                                if (c.tclass == tclass && c.uid == id) {
                                    idx = i;
                                    break
                                }
                            }
                        }
                        if (idx == null) idx = l.indexOfAtt(param, 'uid');
                        idx = l[idx] ? l[idx].order_idx : null;
                        if (typeof idx == 'number') return idx
                    } else {
                        while (l[param] && l[param].order_idx == null) param++;
                        if (l[param].order_idx != null) return l[param].order_idx
                    }
                    break
            }
            return null
        },
        GetSlideListIdx: function(order_idx) {
            var idx = this.list_.indexOfAtt(order_idx, 'order_idx');
            return idx >= 0 ? idx : null
        },
        GetListItems: function(tclass, uid) {
            var it = [];
            for (var i = 0, li = this.list_, l = null; l = li[i]; i++) {
                if (l.tclass == tclass && l.uid == uid) it.push(l)
            }
            return it
        },
        MarkVisited: function(uid) {
            var tclass = arguments[1] || 'slide';
            var e = this.entities_;
            var cur = e[tclass] && e[tclass][uid] || null;
            if (!cur) return;
            cur.visited = true;
            var cd = this.cdoc_;
            var bg = this.book_group_;
            var pj = this.project_;
            for (var i = 0, pid = null; pid = cur.parents[i++];) {
                var pp = pid.split('!');
                var p_tclass = pp[0];
                if (cd && p_tclass == 'cdoc' || pj && p_tclass == 'project' || bg && (p_tclass == 'book' || p_tclass == 'group')) {
                    continue
                }
                var p_uid = pp[1];
                var p = e[p_tclass][p_uid];
                var v = true;
                for (var j = 0, oid = null; oid = p.order[j++];) {
                    var op = oid.split('!');
                    var o_tclass = op[0];
                    var o_uid = op[1];
                    if (!e[o_tclass][o_uid].visited) {
                        v = false;
                        break
                    }
                }
                if (v) this.MarkVisited(p_uid, p_tclass)
            }
        },
        IsVisited: function(tclass, uid) {
            var tc = this.entities_[tclass];
            return tc && tc[uid] && tc[uid].visited || false
        },
        GetVisited: function() {
            var e = this.entities_;
            var v = [];
            for (var id in e) {
                var c = e[id];
                for (var uid in c) {
                    if (c[uid].visited) v.push(c[uid])
                }
            }
            return v
        },
        GetHidden: function() {
            return this._hidden
        }
    }
})();

function VolumeSlider(hdl_uid, dom, callback) {
    var vols = arguments[3];
    var mutes = arguments[4];
    var ctl_dom = arguments[5];
    this.vols_ = vols ? WCT.DeepCopy(vols) : {};
    this.mutes_ = mutes ? WCT.DeepCopy(mutes) : {};
    var hdl = MANAGER.handler.Get(hdl_uid);
    this.hdl_uid_ = hdl_uid;
    this.uid_ = WCT.uid.Generate(10, 'VS');
    this.id_ = hdl.GetUid() + '#volume';
    this.dom_parent_ = dom;
    this.callback_ = callback;
    this.allow_mouse_close_ = false;
    this.timeout_ = null;
    this.ctl_dom_ = ctl_dom || null;
    this.slider_ids_ = [];
    VolumeSlider.CONTAINER[this.uid_] = this;
    var s = WCT.skin.Merge(VolumeSlider.SKIN, hdl.GetSkin('panel').hor.volume, false, true);
    if (s.channels) {
        var chnls = [];
        var chnls_x = 0;
        for (var i = 0, l = s.channels.length; i < l; i++) {
            chnl = {
                id: s.channels[i],
                x: chnls_x,
                y: s.y,
                w: s.w,
                h: s.h - (2 * s.padding)
            };
            if (i > 0) {
                chnl.border_color = s.separator_color;
                chnl.border_style = 'none none none ' + s.separator_style;
                chnl.border_width = s.separator_width;
                chnls_x += s.separator_width
            }
            if (s.background_color) chnl.background_color = s.background_color;
            chnls.push(chnl);
            chnls_x += s.w
        }
        s.channels = chnls
    }
    this.skin_ = s;
    var fs = s.font_size;
    VolumeSlider.CAP_H = Math.max(20, Math.max(fs + s.channel_text_padding_t, s.audio_icon.h + s.audio_icon_margin_t + s.audio_icon_margin_b));
    VolumeSlider.BOT_H = Math.max(16, Math.max(fs + s.mute_text_padding_t, (s.checkbox_h || 13) + s.checkbox_margin_t + s.checkbox_margin_b));
    this.show_()
};
WCT.ExtendObject(VolumeSlider, {
    SUPPORTED_CHANNELS: {
        Master: true,
        Booksound: true,
        Pagesound: true,
        Narrative: true,
        Effects: true
    },
    FX_CHANNEL: 'Effects',
    DEFAULT: 50,
    TIMEOUT: 200,
    CONTAINER: {},
    SKIN: {
        w: 80,
        h: 154,
        border_color: '#EFEFEF',
        border_width: 1,
        border_style: 'solid',
        font_family: 'Arial',
        font_size: 12,
        text_color: '#000000',
        padding: 1,
        checkbox_margin_t: 0,
        checkbox_margin_r: 3,
        checkbox_margin_b: 0,
        checkbox_margin_l: 2,
        separator_color: '#999999',
        separator_style: 'solid',
        separator_width: 1,
        channel_text_padding_t: 0,
        mute_text_padding_t: 0,
        audio_icon_margin_t: 0,
        audio_icon_margin_r: 0,
        audio_icon_margin_b: 0,
        audio_icon_margin_l: 0
    },
    Cleanup: function() {
        var cont = VolumeSlider.CONTAINER;
        for (var uid in cont) {
            cont[uid].Destructor();
            delete cont[uid]
        }
    },
    OnOver: function(ev) {
        ev = WCT.event.Standardize(ev);
        var t = ev.target;
        while (t && !t.getAttribute('vs_uid')) t = t.parentNode;
        var uid = t && t.getAttribute('vs_uid') || null;
        if (!uid) return;
        var vs = VolumeSlider.CONTAINER[uid] || null;
        if (vs) {
            vs.allow_mouse_close_ = true;
            if (vs.timeout_) WCT.ClearTimeout(vs.timeout_)
        }
    },
    OnOut: function(ev) {
        ev = WCT.event.Standardize(ev);
        var t = ev.target;
        while (t && !t.getAttribute('vs_uid')) t = t.parentNode;
        var uid = t && t.getAttribute('vs_uid') || null;
        if (!uid) return;
        var vs = VolumeSlider.CONTAINER[uid] || null;
        if (vs && vs.allow_mouse_close_) {
            vs.timeout_ = WCT.SetTimeout(VolumeSlider.Close, 10, VolumeSlider, [vs.uid_])
        }
    },
    Close: function(uid) {
        var vs = VolumeSlider.CONTAINER[uid] || null;
        if (vs) {
            var hdl = MANAGER.handler.Get(vs.hdl_uid_);
            vs.callback_.call(hdl, 'close')
        }
    },
    OnMute: function(ev) {
        ev = WCT.event.Standardize(ev);
        var uid = ev.target && ev.target.getAttribute('vs_uid') || null;
        if (!uid) return;
        var vs = VolumeSlider.CONTAINER[uid] || null;
        if (vs) {
            var id = ev.target.id.split('#');
            var channel = id[id.length - 3];
            var muted = ev.target.checked;
            var hdl = MANAGER.handler.Get(vs.hdl_uid_);
            vs.mutes_[channel] = muted;
            vs.SetMute(channel, muted);
            vs.callback_.call(hdl, 'mute', channel, muted)
        }
    }
});
VolumeSlider.prototype = (function() {
    function create_main_dom_() {
        var id = this.id_;
        var s = this.skin_;
        var i = WCT.iframe.Create();
        var d = $$('div');
        var hdl = MANAGER.handler.Get(this.hdl_uid_);
        var pori = hdl.GetPanelOrientation() == 'bottom' ? -1 : 1;
        WCT.skin.ApplyBorder(i, s);
        i.id = id + '#iframe';
        i.style.height = s.h + 'px';
        i.style.borderColor = 'transparent';
        i.style.backgroundColor = '#FFFFFF';
        i.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=1)';
        i.style.opacity = '0.01';
        i.setAttribute('vs_uid', this.uid_);
        WCT.skin.ApplyBorder(d, s);
        WCT.dom.NotSelectable(d);
        d.id = id + '#main';
        d.style.height = s.h + 'px';
        d.style.position = 'absolute';
        d.setAttribute('vs_uid', this.uid_);
        var dom = this.dom_parent_;
        dom.appendChild(i);
        dom.appendChild(d);
        d.onmouseover = VolumeSlider.OnOver;
        d.onmouseout = VolumeSlider.OnOut;
        return {
            dom: d,
            iframe: i
        }
    };

    function create_channels_(obj) {
        var dom = obj.dom;
        var iframe = obj.iframe;
        var skin = this.skin_;
        var cskin = skin.channels || [];
        var cap_h = VolumeSlider.CAP_H;
        var bot_h = VolumeSlider.BOT_H;
        var sids = this.slider_ids_;
        var uid = this.uid_;
        var v = this.vols_;
        var m = this.mutes_;
        var id = this.id_ + '#main#';
        var supported = VolumeSlider.SUPPORTED_CHANNELS;
        var w = 0;
        var n = -1;
        var hdl = MANAGER.handler.Get(this.hdl_uid_);
        var disable_fx = hdl.GetConfig('disable_fx');
        var fx = VolumeSlider.FX_CHANNEL;
        for (var i = 0, c = null; c = cskin[i]; i++) {
            if (!supported[c.id] || disable_fx && c.id == fx) continue;
            w += c.w;
            n++;
            var cid = id + c.id;
            var d = $$('div');
            d.id = cid;
            d.style.position = 'relative';
            WCT.skin.ApplyPosition(d, c);
            d.style.width = skin.w - (2 * skin.padding) + 'px';
            WCT.skin.ApplyTextFormats(d, c);
            WCT.skin.ApplyBorder(d, c);
            d.style.overflow = 'hidden';
            d.style.padding = skin.padding + 'px';
            dom.appendChild(d);
            cid += '#';
            var cap = $$('div');
            cap.id = cid + 'caption';
            cap.style.height = cap_h + 'px';
            cap.style.fontFamily = skin.font_family;
            cap.style.fontSize = skin.font_size + 'px';
            cap.style.color = skin.text_color;
            cap.style.overflow = 'hidden';
            cap.style.marginTop = skin.channel_text_padding_t + 'px';
            d.appendChild(cap);
            if (skin.audio_icon) {
                var ico = $$('div');
                var ai = skin.audio_icon;
                ico.id = cid + 'ico';
                WCT.skin.ApplyBgImage(ico, ai);
                WCT.skin.ApplyPosition(ico, {
                    x: skin.padding,
                    y: skin.padding,
                    w: ai.w,
                    h: ai.h
                });
                WCT.skin.ApplyMargin(ico, {
                    margin_left: skin.audio_icon_margin_l,
                    margin_right: skin.audio_icon_margin_r,
                    margin_top: skin.audio_icon_margin_t,
                    margin_bottom: skin.audio_icon_margin_b
                });
                cap.appendChild(ico);
                cap.style.paddingLeft = skin.audio_icon_margin_l + skin.audio_icon_margin_r + ai.w + 2 + 'px'
            }
            var cap_txt = hdl.Trans('CHANNEL_' + c.id.toUpperCase());
            cap_txt = document.createTextNode(cap_txt);
            cap.setAttribute('title', c.id);
            cap.appendChild(cap_txt);
            var slbg = skin.slider_bg || {};
            var slbw = slbg.w || 0;
            var sl_b = $$('div');
            sl_b.id = cid + 'slider_bg';
            slbg.id && WCT.skin.ApplyBgImage(sl_b, slbg);
            WCT.skin.ApplyPosition(sl_b, {
                x: (c.w - slbw) >> 1,
                y: cap_h + skin.padding,
                w: slbw,
                h: c.h - cap_h - bot_h
            });
            d.appendChild(sl_b);
            var sid = cid + 'slider_ico';
            var ico_skin = {
                image: skin.slider_icon,
                image_h: skin.slider_icon_h,
                image_a: skin.slider_icon_a,
                image_d: skin.slider_icon_d,
                x: (c.w - skin.slider_icon.w) >> 1,
                y: cap_h + skin.padding,
                w: skin.slider_icon.w,
                h: skin.slider_icon.h
            };
            SKIN.control.Add({
                id: sid,
                skin: ico_skin,
                dom: d
            });
            SKIN.control.RegisterCallback(sid, 'mousedown', on_down_, this);
            SKIN.control.RegisterCallback(sid, 'touchstart', on_down_, this);
            SKIN.control.IgnoreEvent('click');
            sids.push(sid);
            this.SetVolume(c.id, v[c.id]);
            var bot = $$('div');
            bot.id = cid + 'bottom';
            WCT.skin.ApplyPosition(bot, {
                x: 0,
                y: -skin.padding,
                w: c.w,
                h: bot_h
            });
            bot.style.fontFamily = skin.font_family;
            bot.style.fontSize = skin.font_size + 'px';
            bot.style.color = skin.text_color;
            bot.style.lineHeight = bot_h + 'px';
            bot.style.whiteSpace = 'nowrap';
            bot.style.overflow = 'hidden';
            var mu = WCT.dom.CreateInputElement('checkbox');
            mu.id = cid + 'bottom#mute';
            mu.style.position = 'absolute';
            mu.style.marginTop = skin.checkbox_margin_t + 'px';
            mu.style.marginRight = skin.checkbox_margin_r + 'px';
            mu.style.marginBottom = skin.checkbox_margin_b + 'px';
            mu.style.marginLeft = skin.padding + skin.checkbox_margin_l + 'px';
            mu.style.verticalAlign = 'middle';
            if (skin.checkbox_w) mu.style.width = skin.checkbox_w + 'px';
            if (skin.checkbox_h) mu.style.height = skin.checkbox_h + 'px';
            if (BROWSER.IE7) {
                if (!skin.checkbox_w) mu.style.width = '18px';
                if (!skin.checkbox_h) mu.style.height = '18px'
            }
            mu.setAttribute('vs_uid', uid);
            mu.onclick = VolumeSlider.OnMute;
            var txt_wrp = $$('DIV');
            txt_wrp.style.position = 'absolute';
            txt_wrp.style.display = 'inline';
            txt_wrp.style.height = bot_h + 'px';
            txt_wrp.style.paddingTop = skin.mute_text_padding_t + 'px';
            txt_wrp.style.left = skin.padding + skin.checkbox_margin_l + skin.checkbox_margin_r + (skin.checkbox_w || 13) + 'px'
            txt_wrp.innerHTML = hdl.Trans('AUDIO_MUTE');
            bot.appendChild(mu);
            bot.appendChild(txt_wrp);
            d.appendChild(bot);
            this.SetMute(c.id, m[c.id])
        }
        w += n * skin.separator_width;
        dom.style.width = w + 'px';
        iframe.style.width = w + 'px'
    };

    function on_down_(id, evt) {
        var el = $(id);
        if (!el) return;
        var s = this.skin_;
        var p = WCT.dom.GetPosition(el.parentNode, true);
        var bot_h = VolumeSlider.BOT_H;
        var cap_h = VolumeSlider.CAP_H;
        var dnd = new WCT.dnd(el, null, false);
        dnd.Restrict('x', true);
        dnd.Restrict('y', false, cap_h + s.padding, s.h - s.padding - bot_h - s.slider_icon.h);
        dnd.SetCallback('onend', on_end_, this);
        if (evt.type == 'touchstart') {
            dnd.Begin(evt.changedTouches[arguments[2]], true)
        } else {
            dnd.Begin(evt)
        }
        dnd.SetStartPos(p.left, p.top + (el.offsetHeight >> 1));
        this.dnd_ = dnd
    };

    function on_end_(el) {
        var s = this.skin_;
        if (!s) return;
        var id = el.id.split('#');
        var cid = id[id.length - 2];
        var bh = s.h - VolumeSlider.CAP_H - VolumeSlider.BOT_H - (2 * s.padding) - s.slider_icon.h;
        var v = Math.round((el.offsetTop - VolumeSlider.CAP_H - s.padding) * 100 / bh);
        var hdl = MANAGER.handler.Get(this.hdl_uid_);
        v = 100 - Math.max(0, Math.min(100, v));
        this.vols_[cid] = v;
        this.callback_.call(hdl, 'volume', cid, v)
    };
    return {
        Destructor: function() {
            delete VolumeSlider.CONTAINER[this.uid_];
            if (this.timeout_) {
                WCT.ClearTimeout(this.timeout_);
                this.timeout_ = null
            }
            if (this.slider_ids_) {
                for (var i = this.slider_ids_.length - 1; i >= 0; i--) {
                    SKIN.control.Cleanup(this.slider_ids_[i])
                }
                this.slider_ids_ = null
            }
            this.skin_ = null;
            this.dom_parent_ = null;
            this.callback_ = null;
            this.vols_ = null;
            this.mutes_ = null;
            this.hdl_uid_ = null;
            this.ctl_dom_ = null;
            var d = $(this.id_ + '#main');
            var i = $(this.id_ + '#iframe');
            if (d) {
                d.onmouseover = null;
                d.parentNode && d.parentNode.removeChild(d)
            }
            if (i && i.parentNode) i.parentNode.removeChild(i)
        },
        SetVolume: function(id, v) {
            var el_id = this.id_ + '#main#' + id + '#slider_ico';
            var el = $(el_id);
            if (!el || !this.skin_ || !this.skin_.slider_icon) return;
            if (typeof v != 'number') v = VolumeSlider.DEFAULT;
            var s = this.skin_;
            var bh = s.h - VolumeSlider.CAP_H - VolumeSlider.BOT_H;
            var ih = s.slider_icon.h;
            var y = Math.round((bh - ih) / 100 * (100 - v)) + VolumeSlider.CAP_H + s.padding;
            el.style.top = y + 'px';
            this.vols_[id] = v
        },
        SetMute: function(id, m) {
            var cid = this.id_ + '#main#' + id;
            var el_id = cid + '#bottom#mute';
            var el = $(el_id);
            if (!el) return;
            typeof m == 'boolean' || (m = false);
            el.checked = m ? 'checked' : '';
            var ico_id = cid + '#ico';
            var ico = $(ico_id);
            if (ico) {
                var s = this.skin_;
                var ai = !m ? s.audio_icon : s.audio_icon_d;
                WCT.skin.ApplyBgImage(ico, ai);
                WCT.skin.ApplyPosition(ico, {
                    w: ai.w,
                    h: ai.h
                })
            }
            var slider_id = cid + '#slider_ico';
            SKIN.control.Enabled(slider_id, !m)
        },
        show_: function() {
            var obj = create_main_dom_.call(this);
            create_channels_.call(this, obj);
            var cdom = this.ctl_dom_;
            if (cdom) {
                var hdl_dom = MANAGER.handler.Get(this.hdl_uid_).GetDom();
                var cp = WCT.dom.GetPosition(this.ctl_dom_);
                var cw = cdom.offsetWidth;
                var mw = obj.dom.offsetWidth;
                var ww = WCT.dom.GetWindowWidth();
                var x = cp.left + (cw >> 1) - (mw >> 1);
                if (x + mw + 5 > ww) {
                    x = Math.max(0, ww - mw - 5)
                } else if (x < 5) {
                    x = 5
                }
                var mh = obj.dom.offsetHeight;
                var wh = WCT.dom.GetWindowHeight();
                var y = cp.top + cdom.offsetHeight + 2;
                if (y + mh + 5 > wh) {
                    y = Math.max(0, cp.top - mh - 5)
                }
                obj.iframe.style.left = x + 'px';
                obj.iframe.style.top = y + 'px';
                obj.dom.style.left = x + 'px';
                obj.dom.style.top = y + 'px';
                if (BROWSER.SAFARI) {
                    obj.dom.style.display = 'none';
                    obj.dom.offsetHeight;
                    obj.dom.style.display = ''
                }
                if (PLATFORM.IOS) obj.dom.style.opacity = 0.999
            }
            obj.dom = null;
            obj.iframe = null
        }
    }
})();

function TaskInfo(hdl_uid, info) {
    this.hdl_uid_ = hdl_uid;
    this.info_ = info;
    this.uid_ = hdl_uid + '#' + (info.uid || 'taskinfo');
    this.fader_ = null;
    this.loaded_ = false;
    this.created_ = false;
    this.visible_ = false;
    this.auto_h_ = false;
    this.content_h_ = null;
    this.full_h_ = null;
    this.skin_ = null;
    this.mini_ = false;
    this.skin_d_ = {
        l: 0,
        t: 0,
        r: 0,
        b: 0
    };
    this.controls_ = [];
    this.dnd_ = null;
    this.viewport_dim_ = null;
    this.cur_x_ = 0;
    this.cur_y_ = 0;
    this.dragged_ = false;
    this.ctx_ = {
        hdl_uid_: hdl_uid,
        taskinfo_: this,
        Cleanup: function() {
            this.taskinfo_ = null
        },
        cfg_show: function() {
            var hdl = MANAGER.handler.Get(this.hdl_uid_);
            var ctx = hdl ? hdl.GetSlideCtx(0) : null;
            if (ctx) ctx.cfg_show.apply(ctx, arguments)
        }
    }
};
TaskInfo.CSS_RELOAD_TIME = 250;
TaskInfo.prototype = (function() {
    function get_iframe_doc_(frame) {
        var doc = null;
        try {
            var wnd = frame.contentWindow;
            doc = wnd.document
        } catch (e) {}
        return doc || null
    };

    function get_xy_() {
        var i = this.info_;
        var o = (i.orientation || '').toLowerCase();
        var x = {
            s: 'left',
            v: 0
        };
        var y = {
            s: 'top',
            v: 0
        };
        switch (o) {
            case 'ne':
                x.s = 'right';
                break;
            case 'n':
                x.v = 'auto';
                break;
            case 'nw':
                break;
            case 'w':
                y.v = 'auto';
                break;
            case 'sw':
                y.s = 'bottom';
                break;
            case 's':
                x.v = 'auto';
                y.s = 'bottom';
                break;
            case 'se':
                x.s = 'right';
                y.s = 'bottom';
                break;
            case 'e':
                x.s = 'right';
                y.v = 'auto';
                break;
            case 'c':
            default:
                x.v = 'auto';
                y.v = 'auto';
                break
        }
        i.x = x;
        i.y = y
    };

    function on_content_(frame) {
        var inf = this.info_;
        var doc = inf && !this.loaded_ ? get_iframe_doc_(frame) : null;
        if (!doc || !doc.body) return;
        var hdl = MANAGER.handler.Get(this.hdl_uid_);
        var ctx = hdl.GetContext();
        var hse = $('customcss', doc);
        if (hse) hse.href = ctx.ToAbsPath(DATA.HTML_STYLES_CSS);
        doc.body.className = 'dgo_text_container';
        var rtl = hdl.GetContentInfo().rtl;
        doc.body.setAttribute('dir', rtl ? 'rtl' : 'ltr');
        frame.contentWindow.ctx = this.ctx_;
        var sd = this.skin_d_;
        var sc = this.skin_.content || {};
        var pw = (sc.padding_left || 0) + (sc.padding_right || 0);
        var cont = doc.createElement('div');
        doc.body.style.backgroundColor = inf.bgcolor;
        cont.style.overflow = 'auto';
        cont.style.width = Math.max(0, inf.w - sd.l - sd.r - pw) + 'px';
        WCT.skin.ApplyPadding(cont, sc);
        if (PLATFORM.IOS) cont.style.WebkitOverflowScrolling = 'touch';
        ctx.Set('macro', inf.macro_uid);
        ctx.SetScope('macro');
        cont.innerHTML = ctx.ResolveHtmlString(inf.text);
        doc.body.appendChild(cont);
        this.loaded_ = true;
        WCT.SetTimeout(hdl.Resize, TaskInfo.CSS_RELOAD_TIME, hdl, [null, true])
    };

    function create_(info) {
        if (!this.loaded_ || (this.created_ && !arguments[1])) return;
        var hdl = MANAGER.handler.Get(this.hdl_uid_);
        var main = $(this.uid_);
        if (!hdl || !main) return;
        var iframe = $(this.uid_ + '#content');
        var cont = iframe && get_iframe_doc_(iframe);
        var body = cont && cont.body;
        cont = body && body.getElementsByTagName('div');
        cont = cont && cont[0];
        if (!cont) return;
        var inf = this.info_;
        var sd = this.skin_d_;
        var ch;
        if (this.created_) {
            ch = this.content_h_
        } else {
            ch = this.auto_h_ ? cont.offsetHeight : inf.h - sd.t - sd.b;
            this.content_h_ = ch
        }
        if (ch + sd.t + sd.b + info.y + 10 >= info.h) {
            ch = Math.max(0, info.h - info.y - sd.t - sd.b - 10)
        }
        ch = Math.max(sd.min_h - sd.t - sd.b, ch);
        var skin = this.skin_;
        var sc = skin.content || {};
        var ph = (sc.padding_top || 0) + (sc.padding_bottom || 0);
        var full_h = ch + sd.t + sd.b;
        main.style.height = full_h + 'px';
        iframe.style.height = ch + 'px';
        cont.style.height = Math.max(0, ch - ph) + 'px';
        this.full_h_ = full_h;
        apply_xy_.call(this, main, info);
        var frame = $(this.uid_ + '#frame');
        if (frame) frame.parentNode.removeChild(frame);
        frame = $$('div');
        frame.id = this.uid_ + '#frame';
        main.insertBefore(frame, main.firstChild);
        SKIN.popup.CreateFrame(frame, skin.frame, {
            id: this.uid_ + '#frame#',
            w: inf.w,
            h: full_h
        });
        this.created_ = true;
        update_dnd_area_.call(this);
        this.Visible(this.visible_)
    };

    function apply_xy_dragged_(dom, info) {
        var tiw = this.info_.w;
        var tih = this.info_.h;
        var tix = this.cur_x_;
        var tiy = this.cur_y_;
        var off_x = info.x;
        var off_y = info.y;
        var win_w = info.w + off_x;
        var win_h = info.h + off_y;
        if (tix + tiw > win_w && tix > off_x && win_w - tiw > 0) {
            dom.style.left = win_w - tiw + 'px';
            this.cur_x_ = win_w - tiw
        }
        if (tiy + tih > win_h && tiy > off_y) {
            dom.style.top = win_h - tih + 'px';
            this.cur_y_ = win_h - tih
        }
    };

    function apply_xy_(dom, info) {
        if (this.dragged_) {
            apply_xy_dragged_.call(this, dom, info);
            return
        }
        var inf = this.info_;
        var h = this.full_h_;
        if (inf.x.s == 'left' && inf.x.v != 'auto') {
            dom.style.left = info.x + 'px'
        } else if (inf.x.s == 'right' && info.x == 0) {
            dom.style.left = info.w - inf.w + 'px'
        } else if (inf.x.v == 'auto') {
            dom.style.left = Math.max(info.x, (info.w - inf.w) >> 1) + 'px'
        } else {
            dom.style.left = '';
            dom.style.right = '';
            dom.style[inf.x.s] = inf.x.v + 'px'
        }
        if (inf.y.s == 'top' && inf.y.v != 'auto') {
            dom.style.top = info.y + 'px'
        } else if (inf.y.s == 'bottom' && info.y == 0) {
            dom.style.top = info.h - h + 'px'
        } else if (inf.y.v == 'auto') {
            dom.style.top = Math.max(info.y, (info.h - h) >> 1) + 'px'
        } else {
            dom.style.top = '';
            dom.style.bottom = '';
            dom.style[inf.y.s] = inf.y.v + 'px'
        }
    };

    function create_control_(id, skin, dom) {
        var hdl = MANAGER.handler.Get(this.hdl_uid_);
        if (!hdl || !skin[id]) return;
        var cfg = {
            skins: this.controls_,
            oncontrol: on_control_,
            scope: this,
            rtl: hdl.GetContentInfo().rtl
        };
        var s = WCT.DeepCopy(skin[id]);
        cfg.id = this.uid_ + '#' + id;
        cfg.title = hdl.Trans(s.tooltip || '');
        var d = SKIN.popup.CreateControl(dom, s, cfg);
        if (d && id == 'restore') SKIN.control.Visible(cfg.id, false)
    };

    function on_control_(id, evt) {
        id = id.split('#').top();
        switch (id) {
            case 'exit':
                this.Close();
                break;
            case 'minimize':
                if (this.mini_) return;
                this.mini_ = true;
                var sd = this.skin_d_;
                var d = WCT.DeepCopy(this.viewport_dim_);
                d.h = sd.min_h - sd.t - sd.b;
                hdl_position_.call(this, true);
                create_.call(this, d, true);
                hdl_position_.call(this);
                SKIN.control.Visible(this.uid_ + '#minimize', false);
                SKIN.control.Visible(this.uid_ + '#restore', true);
                break;
            case 'restore':
                if (!this.mini_) return;
                this.mini_ = false;
                hdl_position_.call(this, true);
                create_.call(this, this.viewport_dim_, true);
                hdl_position_.call(this);
                SKIN.control.Visible(this.uid_ + '#restore', false);
                SKIN.control.Visible(this.uid_ + '#minimize', true);
                break
        }
    };

    function on_fader_() {
        on_control_.call(this, '#exit', null, true)
    };

    function hdl_position_() {
        var dom = $(this.uid_);
        if (!dom) return;
        if (arguments[0]) {
            this.cur_x_ = dom.offsetLeft;
            this.cur_y_ = dom.offsetTop
        } else {
            dom.style.left = this.cur_x_ + 'px';
            dom.style.top = this.cur_y_ + 'px'
        }
    };

    function on_dnd_start_(main) {
        if (!this.viewport_dim_) return;
        var vd = this.viewport_dim_;
        var sr_cov = $$('div');
        sr_cov.id = this.uid_ + '#sr_cover';
        sr_cov.style.position = 'absolute';
        sr_cov.style.left = vd.x + 'px';
        sr_cov.style.top = vd.y + 'px';
        sr_cov.style.width = vd.w + 'px';
        sr_cov.style.height = vd.h + 'px';
        main.parentNode.insertBefore(sr_cov, main);
        var sk = this.skin_d_;
        var tw_cov = $$('div');
        tw_cov.id = this.uid_ + '#tw_cover';
        tw_cov.style.position = 'absolute';
        tw_cov.style.left = sk.l + 'px';
        tw_cov.style.top = sk.t + 'px';
        tw_cov.style.width = this.info_.w - sk.l - sk.r + 'px';
        tw_cov.style.height = this.content_h_ + 'px';
        main.appendChild(tw_cov)
    };

    function on_dnd_end_() {
        var cover = $(this.uid_ + '#sr_cover');
        if (cover) cover.parentNode.removeChild(cover);
        cover = $(this.uid_ + '#tw_cover');
        if (cover) cover.parentNode.removeChild(cover);
        this.dragged_ = true;
        var dom = $(this.uid_);
        if (!dom) return;
        this.cur_x_ = dom.offsetLeft;
        this.cur_y_ = dom.offsetTop
    };

    function update_dnd_area_() {
        var v = this.viewport_dim_;
        var dnd = this.dnd_;
        if (!v || !dnd) return;
        var min_x = v.x;
        var max_x = v.w - this.info_.w + v.x;
        dnd.Restrict('x', min_x == max_x, min_x, max_x);
        var min_y = v.y;
        var max_y = v.h - this.full_h_ + v.y;
        dnd.Restrict('y', min_y == max_y, min_y, max_y)
    };
    return {
        Destructor: function() {
            if (this.ctx_) {
                this.ctx_.Cleanup();
                this.ctx_ = null
            }
            if (this.controls_) {
                for (var i = 0, c = null; c = this.controls_[i]; i++) {
                    SKIN[c.t].Cleanup(c.i);
                    this.controls_[i] = null
                }
                this.controls_ = null
            }
            if (this.dnd_) {
                this.dnd_.Destructor();
                this.dnd_ = null
            }
            if (this.fader_) {
                this.fader_.Destructor();
                this.fader_ = null
            }
            var d = $(this.uid_);
            if (d) d.parentNode.removeChild(d);
            this.info_ = null;
            this.skin_ = null;
            this.skin_d_ = null;
            this.viewport_dim_ = null
        },
        Resize: function(info) {
            this.viewport_dim_ = info;
            create_.call(this, info);
            update_dnd_area_.call(this);
            var main = $(this.uid_);
            if (main) apply_xy_.call(this, main, info)
        },
        Show: function(dom) {
            var hdl = MANAGER.handler.Get(this.hdl_uid_);
            var inf = this.info_;
            if (!hdl || !inf.text) return;
            if ($(this.uid_)) return;
            var cfg_skin = hdl.GetConfig('skin');
            var skin = WCT.DeepCopy(DATA.GetS(DATA.SKIN_PREFIX + cfg_skin + ':taskinfo.txt'));
            var surl = hdl.GetContext().ToAbsPath('skin:') + '/';
            WCT.skin.ExtendUrls(skin, surl);
            this.skin_ = skin;
            if (!skin || !skin.frame) return;
            var sd = SKIN.popup.GetDim(skin.frame);
            sd.min_h = skin.frame ? sd.h : Topmost.MINI_H;
            if (typeof inf.w != 'number' || inf.w <= Topmost.MINI_W) inf.w = Topmost.MINI_W;
            if (typeof inf.h != 'number' || inf.h <= sd.min_h) {
                if (inf.h <= 0) this.auto_h_ = true;
                inf.h = sd.min_h
            }
            if (inf.modal && !PLATFORM.ANDROID) {
                var f = new WCT.Fader(this.uid_ + '#fader', {
                    opacity: 0.05,
                    bgcolor: '#FFFFFF'
                }, {
                    callback_f: on_fader_,
                    callback_s: this
                });
                f.Create(dom);
                this.fader_ = f
            }
            get_xy_.call(this);
            var main = $$('div');
            main.id = this.uid_;
            main.style.position = 'absolute';
            main.style.width = inf.w + 'px';
            main.style.height = inf.h + 'px';
            main.style.visibility = 'hidden';
            if (inf.modal) main.style.zIndex = 1;
            dom.appendChild(main);
            var rtl = hdl.GetContentInfo().rtl;
            var c = {
                w: inf.w,
                title: inf.title || hdl.Trans('TASK'),
                id: this.uid_ + '#',
                rtl: rtl
            };
            var d = SKIN.popup.CreateTitle(main, skin.title, c);
            if (d) {
                d.style.cursor = 'pointer';
                var dnd = new WCT.dnd(main, d);
                dnd.SetCallback('onbegin', on_dnd_start_, this);
                dnd.SetCallback('onend', on_dnd_end_, this);
                this.dnd_ = dnd
            }
            create_control_.call(this, 'exit', skin, main);
            if (inf.mini !== false) {
                create_control_.call(this, 'restore', skin, main);
                create_control_.call(this, 'minimize', skin, main)
            }
            var cskin = this.skin_.content;
            if (cskin) {
                sd.l = cskin.outer_spacing_l || 0;
                sd.r = cskin.outer_spacing_r || 0
            }
            sd.t = Math.max(sd.t, skin.title ? skin.title.h : 0);
            var content = WCT.iframe.Create(DATA.context.ToAbsPath('trainer:about_blank.html'));
            content.id = this.uid_ + '#content';
            content.style.position = 'absolute';
            content.style.left = sd.l + 'px';
            content.style.top = sd.t + 'px';
            content.style.width = inf.w - sd.l - sd.r + 'px';
            content.style.overflow = 'hidden';
            WCT.iframe.Load(content, on_content_, this, main, [content]);
            this.skin_d_ = sd
        },
        Close: function() {
            var hdl = MANAGER.handler.Get(this.hdl_uid_);
            if (!hdl) return;
            var msg = hdl.Trans('CLOSE_TASK');
            if (this.info_.close_msg === false || confirm(msg)) {
                hdl.ExecCommand('taskinfo_close')
            }
        },
        Visible: function() {
            var v = arguments[0];
            if (typeof v == 'boolean') {
                var main = $(this.uid_);
                if (main) {
                    main.style.visibility = v && this.loaded_ ? 'visible' : 'hidden';
                    if (BROWSER.MOBILE) main.style.display = v && this.loaded_ ? '' : 'none'
                }
                this.visible_ = v
            }
            return this.visible_
        },
        IsModal: function() {
            return this.info_ && this.info_.modal || false
        }
    }
})();

function Searchfield(config) {
    var hdl_id = config.hdl_id;
    var id = config.id;
    var skin = config.skin;
    var dom = config.dom;
    var rtl = config.rtl || false;
    this.hdl_id_ = hdl_id;
    this.id_ = id;
    this.onsearch_ = config.onsearch;
    this.scope_ = config.scope;
    this.rtl_ = rtl;
    this.skin_ = skin;
    var id = hdl_id + '#' + id;
    var d = $$('div');
    d.id = id;
    d.style.position = 'absolute';
    d.style.height = skin.h + 'px';
    dom.appendChild(d);
    Searchfield.STORE[id] = this;
    id += '#';
    var bg = $$('div');
    bg.id = id + 'bg';
    bg.style.position = 'absolute';
    WCT.skin.ApplyMargin(bg, skin);
    bg.style.borderWidth = skin.border_width + 'px';
    bg.style.borderStyle = 'solid';
    bg.style.borderColor = '#999999 #666666 #666666 #999999';
    bg.style.borderRadius = skin.border_radius + 'px';
    bg.style.backgroundColor = '#FFFFFF';
    d.appendChild(bg);
    var hdl = MANAGER.handler.Get(hdl_id);
    var ip = WCT.dom.CreateInputElement('text');
    if (rtl) ip.style.direction = 'rtl';
    ip.id = id + 'ip';
    ip.setAttribute('autocorrect', 'off');
    ip.setAttribute('autocomplete', 'off');
    ip.setAttribute('placeholder', hdl.Trans('SEARCH'));
    ip.style.borderStyle = 'none';
    ip.style.borderColor = 'transparent';
    ip.style.borderWidth = '0px';
    ip.style.position = 'absolute';
    if (skin.font_size) ip.style.fontSize = skin.font_size + 'px';
    if (!BROWSER.MOBILE) ip.style.WebkitAppearance = 'none';
    if (BROWSER.MOBILE) ip.onblur = function(ev) {
        if (window.parent) window.parent.scrollTo(0, 0)
    };
    if (skin.input_font_size) ip.style.fontSize = skin.input_font_size;
    ip.onkeyup = Searchfield.OnKeyup;
    bg.appendChild(ip);
    if (skin.clear) {
        if (rtl) skin.clear.x = WCT.skin.ConvertXToRtl(skin.clear.x);
        SKIN.control.Add({
            id: id + 'clear',
            skin: skin.clear,
            dom: d,
            onexec: Searchfield.OnClear,
            scope: this
        });
        SKIN.control.Visible(id + 'clear', false, 'visibility')
    }
    if (skin.magnifier) {
        if (rtl) skin.magnifier.x = WCT.skin.ConvertXToRtl(skin.magnifier.x);
        var mf = SKIN.control.Add({
            id: id + 'magni',
            skin: skin.magnifier,
            dom: d
        });
        mf.style.cursor = 'default'
    }
};
WCT.ExtendObject(Searchfield, {
    STORE: {},
    Cleanup: function() {
        var s = Searchfield.STORE;
        for (var i in s) delete s[i]
    },
    OnKeyup: function(evt) {
        var idx = this.id.lastIndexOf('#');
        var ids = this.id.substr(0, idx);
        var me = Searchfield.STORE[ids];
        if (!me) return;
        SKIN.control.Visible(ids + '#clear', this.value != '', 'visibility');
        evt = WCT.event.Standardize(evt);
        if (evt.keyCode == 27) Searchfield.OnClear.call(me);
        if (evt.keyCode != 13) return WCT.event.Cancel(evt);
        if (BROWSER.MOBILE) this.blur();
        if (me.onsearch_) me.onsearch_.call(me.scope_, this.value, evt.keyCode == 13);
        return WCT.event.Cancel(evt)
    },
    OnClear: function() {
        var id = this.hdl_id_ + '#' + this.id_;
        var ip = $(id + '#ip');
        if (ip) ip.value = '';
        SKIN.control.Visible(id + '#clear', false, 'visibility');
        if (this.onsearch_) this.onsearch_.call(this.scope_, '')
    }
});
Searchfield.prototype = {
    Destructor: function() {
        var id = this.hdl_id_ + '#' + this.id_;
        delete Searchfield.STORE[id];
        SKIN.control.Cleanup(id + '#clear');
        SKIN.control.Cleanup(id + '#magni');
        var d = $(id);
        if (d) d.parentNode.removeChild(d);
        this.onsearch_ = null;
        this.scope_ = null;
        this.skin_ = null
    },
    GetDom: function() {
        return $(this.hdl_id_ + '#' + this.id_)
    },
    SetWH: function(w, h) {
        var id = this.hdl_id_ + '#' + this.id_;
        var s = this.skin_;
        var x = 0;
        var main = $(id);
        if (main) {
            main.style.width = w + 'px';
            main.style.height = h + 'px'
        }
        id += '#';
        var bg = $(id + 'bg');
        var bw = s.border_width * 2;
        if (bg) {
            w = Math.max(0, w - s.margin_left - s.margin_right - bw);
            h = Math.max(0, h - s.margin_top - s.margin_bottom - bw);
            bg.style.width = w + 'px';
            bg.style.height = h + 'px'
        }
        var cl = $(id + 'clear');
        if (cl) {
            var cl_w = cl.offsetWidth;
            w -= cl_w;
            if (this.rtl_) x += cl_w
        }
        var mf = $(id + 'magni');
        if (mf) {
            var mf_w = mf.offsetWidth;
            w -= mf_w;
            if (!this.rtl_) x += mf_w
        }
        var ip = $(id + 'ip');
        if (ip) {
            if (BROWSER.IE6 || BROWSER.IE7) h -= bw;
            h = Math.max(0, h);
            ip.style.left = x + 'px';
            ip.style.width = Math.max(0, w) + 'px';
            ip.style.height = h + 'px';
            ip.style.lineHeight = h + 'px'
        }
    },
    SetXY: function(x, y) {
        var main = $(this.hdl_id_ + '#' + this.id_);
        if (main) {
            main.style[this.rtl_ ? 'right' : 'left'] = x + 'px';
            main.style.top = y + 'px'
        }
    },
    SetValue: function(value) {
        var id = this.hdl_id_ + '#' + this.id_;
        var ip = $(id + '#ip');
        if (ip) ip.value = value;
        SKIN.control.Visible(id + '#clear', value.length ? true : false, 'visibility')
    },
    Blur: function() {
        var ip = $(this.hdl_id_ + '#' + this.id_ + '#ip');
        if (ip) ip.blur()
    },
    Focus: function() {
        var ip = $(this.hdl_id_ + '#' + this.id_ + '#ip');
        if (ip) ip.focus()
    }
};
var API = {
    T2_API: true,
    GotoEntity: function(addr) {
        var hdl = MANAGER.handler.GetActive();
        if (!hdl || !hdl.ExecCommand) return;
        var p = addr.split('!');
        hdl.ExecCommand('jump_' + p[0], p[1])
    }
};
var BROADCAST = {
    SendMaster: function(fun) {
        var m = DATA.GetActiveManager();
        var p1 = arguments[1];
        var p2 = arguments[2];
        var p3 = arguments[3];
        var p4 = arguments[4];
        var p5 = arguments[5];
        var p6 = arguments[6];
        try {
            var rec = m && m.wnd && m.wnd.BROADCAST && m.wnd.BROADCAST.Receive || null;
            if (!rec) return null;
            if (p6 != null) {
                return rec(fun, p1, p2, p3, p4, p5, p6)
            } else if (p5 != null) {
                return rec(fun, p1, p2, p3, p4, p5)
            } else if (p4 != null) {
                return rec(fun, p1, p2, p3, p4)
            } else if (p3 != null) {
                return rec(fun, p1, p2, p3)
            } else if (p2 != null) {
                return rec(fun, p1, p2)
            } else if (p1 != null) {
                return rec(fun, p1)
            } else {
                return rec(fun)
            }
        } catch (e) {}
        return null
    },
    SendClients: function(fun) {
        var cs = DATA.GetClients();
        for (var uid in cs) {
            this.SendClient(cs[uid], fun, arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6])
        }
    },
    SendClient: function(client_wnd, fun) {
        var p1 = arguments[2];
        var p2 = arguments[3];
        var p3 = arguments[4];
        var p4 = arguments[5];
        var p5 = arguments[6];
        var p6 = arguments[7];
        try {
            var rec = client_wnd && client_wnd.BROADCAST && client_wnd.BROADCAST.Receive || null;
            if (!rec) return null;
            if (p6 != null) {
                return rec(fun, p1, p2, p3, p4, p5, p6)
            } else if (p5 != null) {
                return rec(fun, p1, p2, p3, p4, p5)
            } else if (p4 != null) {
                return rec(fun, p1, p2, p3, p4)
            } else if (p3 != null) {
                return rec(fun, p1, p2, p3)
            } else if (p2 != null) {
                return rec(fun, p1, p2)
            } else if (p1 != null) {
                return rec(fun, p1)
            } else {
                return rec(fun)
            }
        } catch (e) {}
        return null
    },
    Receive: function(fun) {
        var fn = MANAGER.broadcast[fun];
        if (fn) {
            var p1 = arguments[1];
            var p2 = arguments[2];
            var p3 = arguments[3];
            var p4 = arguments[4];
            var p5 = arguments[5];
            var p6 = arguments[6];
            if (p6 != null) {
                return fn(p1, p2, p3, p4, p5, p6)
            } else if (p5 != null) {
                return fn(p1, p2, p3, p4, p5)
            } else if (p4 != null) {
                return fn(p1, p2, p3, p4)
            } else if (p3 != null) {
                return fn(p1, p2, p3)
            } else if (p2 != null) {
                return fn(p1, p2)
            } else if (p1 != null) {
                return fn(p1)
            } else {
                return fn()
            }
        }
        return null
    }
};

function LayoutManager() {
    this.layout_ = arguments[0] || []
};
LayoutManager.prototype = (function() {
    function calc_all_() {
        var lay = this.layout_;
        var hor = lay.a == 'hor';
        var a = 0;
        var w = 0;
        var h = 0;
        var wm = [];
        var wh = [];
        for (var i = 0, g = null; g = lay[i++];) {
            var gw = 0;
            var gh = 0;
            var gwm = [];
            var ghm = [];
            var c = 0;
            for (var j = 0, e = null; e = g.els[j++];) {
                if (!e.v) continue;
                gw += e.w;
                gh += e.h;
                gwm.push(e.w);
                ghm.push(e.h);
                if (e.a) a++;
                c++
            }
            if (c > 0) {
                if (g.a == 'hor') {
                    gw += g.si * (c - 1) + g.sl + g.sr;
                    gh = Math.max.apply(null, ghm) + g.st + g.sb
                } else {
                    gw = Math.max.apply(null, gwm) + g.sl + g.sr;
                    gh += g.si * (c - 1) + g.st + g.sb
                }
                if (hor) {
                    w += gw;
                    wh.push(gh)
                } else {
                    wm.push(gw);
                    h += gh
                }
            }
        }
        if (hor) {
            h = Math.max.apply(null, wh)
        } else {
            w = Math.max.apply(null, wm)
        }
        return {
            w: w,
            h: h,
            a: a
        }
    };

    function get_auto_(max, min) {
        var hor = this.layout_.a == 'hor';
        var auto = 0;
        if (min.a > 0) {
            if (hor && max.w > min.w) {
                auto = (max.w - min.w) / min.a
            } else if (!hor && max.h > min.h) {
                auto = (max.h - min.h) / min.a
            }
        }
        return auto
    };

    function apply_(max, min, auto) {
        var lay = this.layout_;
        var hor = lay.a == 'hor';
        var ret = [];
        var x = 0;
        var y = 0;
        for (var i = 0, g = null; g = lay[i++];) {
            var gx = g.sl;
            var gy = g.st;
            if (hor) {
                gx += x
            } else {
                gy += y
            }
            var gwm = [];
            var ghm = [];
            var c = 0;
            for (var j = 0, l = g.els.length, e = null; e = g.els[j++];) {
                if (!e.v) {
                    ret.push({
                        x: 0,
                        y: 0,
                        w: 0,
                        h: 0
                    });
                    continue
                }
                if (c > 0) {
                    if (g.a == 'hor') {
                        gx += g.si
                    } else {
                        gy += g.si
                    }
                }
                var ew = e.w;
                var eh = e.h;
                if (e.a) {
                    if (hor) {
                        ew += auto
                    } else {
                        eh += auto
                    }
                }
                ret.push({
                    x: gx,
                    y: gy,
                    w: ew,
                    h: eh
                });
                if (g.a == 'hor') {
                    gx += ew
                } else {
                    gy += eh
                }
                gwm.push(ew);
                ghm.push(eh);
                c++
            }
            if (c > 0) {
                if (hor) {
                    x = gx + g.sr;
                    if (g.a == 'vert') x += Math.max.apply(null, gwm)
                } else {
                    y = gy + g.sb;
                    if (g.a == 'hor') y += Math.max.apply(null, ghm)
                }
            }
        }
        return ret
    };
    return {
        Destructor: function() {
            this.layout_ = null
        },
        FromPanelSkin: function(skin, outer_alignment) {
            var oa = outer_alignment || 'hor';
            var layout = [];
            layout.a = oa;
            for (var i = 0, g = null, cnt = 0; g = skin[i++];) {
                var grp = {
                    a: g.alignment || 'hor',
                    si: g.inner_spacing || 0,
                    sl: g.outer_spacing_l || 0,
                    sr: g.outer_spacing_r || 0,
                    st: g.outer_spacing_t || 0,
                    sb: g.outer_spacing_b || 0,
                    els: []
                };
                for (var j = 0, e = null; e = g.elements[j++];) {
                    grp.els.push({
                        w: e.w || 0,
                        h: e.h || 0,
                        a: e.autosize || false,
                        v: true,
                        cnt: cnt++
                    })
                }
                layout.push(grp)
            }
            this.layout_ = layout
        },
        Visible: function(cnt, vis) {
            var lay = this.layout_;
            for (var i = 0, g = null; g = lay[i++];) {
                var idx = g.els.indexOfAtt(cnt, 'cnt');
                if (idx >= 0) {
                    g.els[idx].v = vis;
                    return
                }
            }
        },
        Apply: function(w, h) {
            var max = {
                w: w,
                h: h
            };
            var min = calc_all_.call(this);
            var auto = get_auto_.call(this, max, min);
            return apply_.call(this, max, min, auto)
        },
        GetMinDim: function() {
            var min = calc_all_.call(this);
            return {
                w: min.w,
                h: min.h
            }
        }
    }
})();
var Print = {
    Close: function() {
        var elem = $('print_box');
        if (elem) elem.parentNode.removeChild(elem);
        elem = $('print_elem');
        if (elem) elem.parentNode.removeChild(elem);
        var body = document.body;
        var cn = body.childNodes;
        for (var i = 0, cur = null; cur = cn[i++];) {
            if (cur.style) {
                cur.style.display = '';
                cur.style.visibility = '';
                if (PLATFORM.IOS) {
                    cur.style.zIndex = '';
                    cur.style.opacity = ''
                }
            }
        }
    },
    Open: function(hdl, elem) {
        var body = document.body;
        var cn = body.childNodes;
        for (var i = 0, cur = null; cur = cn[i++];) {
            if (cur.style) {
                cur.style.display = 'none';
                cur.style.visibility = 'hidden';
                if (PLATFORM.IOS) {
                    cur.style.zIndex = 0;
                    cur.style.opacity = 0
                }
            }
        }
        var box = $$('div');
        var rtl = hdl.GetContentInfo().rtl ? 'rtl' : '';
        box.id = 'print_box';
        box.style.direction = rtl;
        box.style.padding = '5px';
        box.style.fontWeight = 'bold';
        box.style.fontFamily = elem.style.fontFamily;
        if (PLATFORM.MOBILE) box.style.width = WCT.dom.GetWindowWidth() + 'px';
        body.appendChild(box);
        elem.style.width = '';
        elem.id = 'print_elem';
        try {
            body.appendChild(elem)
        } catch (e) {
            box.innerHTML = elem.outerHTML
        }
        window.print();
        if (arguments[2]) {
            Print.Close();
            return
        }
        var close = $$('a');
        close.style.direction = rtl;
        close.href = 'javascript:void(0);';
        close.appendChild($$2(hdl.Trans('BACK')));
        close.onclick = Print.Close;
        if (PLATFORM.MOBILE) close.ontouchend = Print.Close;
        if (box.firstChild) {
            box.insertBefore(close, box.firstChild)
        } else {
            box.appendChild(close)
        }
    }
};
var NOTIFICATION = {
    SPACER: '<br /><br />'
};
(function() {
    var DEF_SKIN_ = {
        background_color: '#999999',
        background_color_h: '#CCCCCC',
        border_left: '1px solid #666666',
        border_bottom: '1px solid #666666',
        border_right: '1px solid #666666',
        border_bottom_left_radius: 3,
        border_bottom_right_radius: 3,
        box_shadow: '2px 2px 3px 1px rgba(0, 0, 0, 0.3)',
        font_family: 'Arial,Helvetica,sans-serif',
        font_size: 15,
        text_align: 'center',
        padding_top: 8,
        padding_left: 5,
        padding_right: 20,
        padding_bottom: 8,
        y: 1,
        w: '60%'
    };
    var ID_ = 'notification';
    var closing_ = false;
    var skin_ = null;
    var during_ = false;
    var delayed_ = [];
    var msg_ = '';
    var y_ = null;

    function on_event_(ev) {
        ev = WCT.event.Standardize(ev);
        var d = ev.target;
        var s = '';
        switch (ev.type) {
            case 'mouseover':
                s = '_h';
            case 'mouseout':
                if (skin_['background_color' + s]) d.style.backgroundColor = skin_['background_color' + s];
                break;
            case 'click':
                close_();
                break
        }
    };

    function animate_(dom, time, start, delta, steps) {
        var t = (new Date()).getTime();
        var c = Math.min((t - time) / steps, 1);
        var y = start + delta * c;
        dom.style.top = y + 'px';
        if (c < 1) {
            WCT.SetTimeout(animate_, 1, null, [dom, time, start, delta, steps])
        } else {
            during_ = false;
            if (closing_) {
                closing_ = false;
                dom.parentNode.removeChild(dom)
            } else {
                dom.style.top = '0px';
                hdl_delayed_()
            }
        }
    };

    function close_() {
        var d = $(ID_);
        closing_ = true;
        var time = (new Date()).getTime();
        WCT.SetTimeout(animate_, 1, null, [d, time, 0, -y_, 200])
    };

    function hdl_delayed_() {
        var d = $(ID_);
        if (!d) return;
        var m = '';
        var msg = msg_;
        while (m = delayed_.shift()) {
            msg = m + NOTIFICATION.SPACER + msg
        }
        delayed_ = [];
        if (msg == msg_) return;
        msg_ = msg;
        var c = d.cloneNode(1);
        c.id += '#clone';
        d.parentNode.appendChild(c);
        d.style.visibility = 'hidden';
        d.innerHTML = msg_;
        var y = d.offsetHeight;
        var dy = y - y_;
        if (dy == 0) {
            d.style.visibility = 'visible';
            c.parentNode.removeChild(c);
            return
        }
        d.style.top = -dy + 'px';
        d.style.visibility = 'visible';
        y_ = y;
        c.parentNode.removeChild(c);
        var t = (new Date()).getTime();
        WCT.SetTimeout(animate_, 1, null, [d, t, -dy, dy, 200])
    };
    NOTIFICATION.SetSkin = function(skin) {
        skin_ = WCT.DeepCopy(DEF_SKIN_);
        for (var i in skin) {
            skin_[i] = skin[i]
        }
        var s = arguments[1];
        if (typeof s == 'string') this.SPACER = s
    };
    NOTIFICATION.ShowMessage = function(msg) {
        if (!skin_) return;
        var dom = $(ID_);
        if (dom) {
            delayed_.push(msg);
            if (!during_) hdl_delayed_()
        } else {
            var dom = $$('div');
            dom.id = ID_;
            WCT.skin.ApplyPosition(dom, skin_);
            WCT.skin.ApplyTextFormats(dom, skin_);
            WCT.skin.ApplyBorder(dom, skin_);
            WCT.skin.ApplyPadding(dom, skin_);
            dom.style.zIndex = 2;
            dom.style.cursor = 'pointer';
            dom.innerHTML = msg;
            document.body.appendChild(dom);
            msg_ = msg;
            dom.onmouseover = on_event_;
            dom.onmouseout = on_event_;
            dom.onclick = on_event_;
            this.Resize();
            y_ = dom.offsetHeight;
            dom.style.top = -y_ + 'px';
            during_ = true;
            var time = (new Date()).getTime();
            WCT.SetTimeout(animate_, 1, null, [dom, time, -y_, y_, 200])
        }
    };
    NOTIFICATION.Resize = function() {
        var d = $(ID_);
        if (!d) return;
        var w = WCT.dom.GetWindowWidth();
        var x = w;
        if (typeof skin_.w == 'number') {
            x -= skin_.w
        } else if (skin_.w.indexOf('%') >= 0) {
            x -= w * parseInt(skin_.w) / 100
        } else {
            return
        }
        x = x >> 1;
        d.style.left = x + 'px'
    }
})();
(function() {
    var handler_ = [];
    var states_ = {};

    function get_hdl_() {
        return MANAGER.handler.Get(handler_[0])
    };

    function apply_() {
        var hdl = get_hdl_();
        if (!hdl) return;
        var t = states_[hdl.GetUid()];
        var h = t.hash || DATA.GetUrlHash() || '';
        WCT.bookmark.Set(h)
    };

    function changed_(hash) {
        var hdl = get_hdl_();
        if (!hdl || !hdl.OnBookmark) return;
        hash = hash.split('&');
        var c = states_[hdl.GetUid()];
        var s = {};
        for (var i = 0, l = hash.length; i < l; i++) {
            var d = hash[i].split('=');
            if (typeof c[d[0]] != 'undefined') s[d[0]] = d[1]
        }
        hdl.OnBookmark(s)
    };
    window.BOOKMARK = {
        Start: function() {
            WCT.bookmark.Observe(changed_)
        },
        Stop: function() {
            WCT.bookmark.StopObserving()
        },
        AddHandler: function(uid) {
            handler_.push(uid);
            states_[uid] = {}
        },
        RemoveHandler: function(uid) {
            var idx = handler_.indexOf(uid);
            if (idx < 0) return;
            handler_.splice(idx, 1);
            delete states_[uid];
            apply_()
        },
        SetState: function(uid, state) {
            if (states_[uid]) {
                var c = false;
                for (var key in state) {
                    if (states_[uid][key] !== state[key]) {
                        states_[uid][key] = state[key];
                        c = true
                    }
                }
                if (c) apply_()
            }
        }
    }
})();

function DropDown(config) {
    this.uid_ = WCT.uid.Generate(8, 'DD_');
    this.hdl_id_ = config.hdl_id;
    this.dom_id_ = config.id + '#' + this.uid_;
    this.skin_ = config.skin;
    this.rtl_ = config.rtl || false;
    this.options_ = [];
    this.current_ = null;
    this.fader_ = null;
    this.open_ = false;
    this.sel_ = null;
    this.cb_fun_ = null;
    this.cb_scp_ = null;
    DropDown.STORE[this.uid_] = this;
    this.style_ = {
        bg: null,
        ico: null
    }
};
DropDown.STORE = {};
DropDown.ResizeIE7 = function() {
    var n = this.dom_id_ + '#p';
    var p = $(n);
    if (!p) return;
    var o = this.options_;
    n += '#';
    var w = [];
    for (var i = 0, c = null; c = o[i++];) {
        var d = $(n + c);
        if (d) {
            var pl = parseInt(d.style.paddingLeft) || 0;
            var pr = parseInt(d.style.paddingRight) || 0;
            w.push(d.clientWidth - pl - pr)
        }
    }
    if (!w.length) return;
    w = Math.max.apply(null, w);
    for (var i = 0, c = null; c = o[i++];) {
        var d = $(n + c);
        if (d) d.style.width = w + 'px'
    }
    p.style.visibility = 'visible'
};
DropDown.prototype = (function() {
    function set_handler_(dom) {
        var ov = arguments[1] || on_visual_;
        dom.onmouseover = ov;
        dom.onmouseout = ov;
        dom.onmousedown = ov;
        dom.onmouseup = ov;
        dom.onclick = on_click_
    };

    function rem_handler_(dom) {
        dom.onmouseover = null;
        dom.onmouseout = null;
        dom.onmousedown = null;
        dom.onmouseup = null;
        dom.onclick = null
    };

    function create_icon_(name, skin, id) {
        var d = $$('div');
        d.id = id;
        d.style.position = 'absolute';
        d.style.backgroundRepeat = 'no-repeat';
        d.style.fontSize = '1px';
        d.style.cursor = 'pointer';
        d.style.backgroundImage = 'url(' + (skin.id || '') + ')';
        d.style.backgroundPosition = (skin.x || 0) + 'px ' + (skin.y || 0) + 'px';
        return d
    };

    function set_option_() {
        var o = this.options_;
        if (!o.length) return false;
        var c = this.current_;
        if (!c) {
            c = o[0];
            this.current_ = c
        }
        var si = this.skin_.icons;
        var sc = si[c] && si[c].image || null;
        if (!sc) return false;
        var iid = sc.id || '';
        var st = this.style_;
        var i = this.dom_id_ + '#i';
        var d = $(i);
        if (!d) {
            if (!arguments[0]) return false;
            d = create_icon_(c, sc, i);
            d.style[this.rtl_ ? 'right' : 'left'] = (si.x || 0) + 'px';
            d.style.top = (si.y || 0) + 'px';
            d.style.width = (si.w || 0) + 'px';
            d.style.height = (si.h || 0) + 'px';
            arguments[0].appendChild(d);
            st.ico = iid
        } else {
            if (st.ico != iid) {
                d.style.backgroundImage = 'url(' + iid + ')';
                st.ico = iid
            }
            d.style.backgroundPosition = (sc.x || 0) + 'px ' + (sc.y || 0) + 'px'
        }
        return true
    };

    function get_icon_(s, e) {
        var mode = e.type.replace(/mouse/, '');
        var mdif = {
            over: '_h',
            down: '_a',
            up: '_h'
        }[mode] || '';
        var icon = this.rtl_ ? s['image_rtl' + mdif] || s.image_rtl : null;
        return icon || s['image' + mdif] || s.image
    };

    function on_visual_(e) {
        var id = (this.id || '').split('#').top();
        var me = DropDown.STORE[id];
        if (!me) return;
        var sk = me.skin_;
        var si = sk && sk.icons && sk.icons[me.current_] || null;
        if (!si) return;
        e = WCT.event.Standardize(e);
        var m = {
            bg: {
                s: get_icon_.call(me, sk, e),
                i: me.dom_id_
            },
            ico: {
                s: get_icon_.call(me, si, e),
                i: me.dom_id_ + '#i'
            }
        };
        var st = me.style_;
        for (var k in m) {
            var dom = $(m[k].i);
            var skn = m[k].s;
            if (!dom || !skn) continue;
            var src = skn.id || '';
            if (st[k] != src) {
                dom.style.backgroundImage = 'url(' + src + ')';
                st[k] = src
            }
            dom.style.backgroundPosition = (skn.x || 0) + 'px ' + (skn.y || 0) + 'px'
        }
    };

    function on_visual_p_(e) {
        var id = (this.id || '').split('#')[2];
        var me = DropDown.STORE[id];
        if (!me) return;
        var sk = me.skin_;
        var sp = sk && sk.popup || null;
        if (!sp) return;
        e = WCT.event.Standardize(e);
        var t = e.target.id ? e.target : e.target.parentNode;
        var i = t.id.split('#').top();
        if (me.options_.indexOf(i) < 0) return;
        var mode = e.type.replace(/mouse/, '');
        var mdif = {
            over: '_h',
            down: '_a',
            up: '_h'
        }[mode] || '';
        t.style.color = sp['text_color' + mdif] || '#000000';
        t.style.backgroundColor = sp['background_color' + mdif] || '#FFFFFF';
        var img = null;
        if (sp.icons && sp.icons[i]) img = get_icon_.call(me, sp.icons[i], e);
        if (!img && sk.icons[i]) img = get_icon_.call(me, sk.icons[i], e);
        if (img) {
            var dom = $(t.id + '#i');
            var src = img.id || '';
            if (src != me.style_['p_' + i]) {
                dom.style.backgroundImage = 'url(' + src + ')';
                me.style_['p_' + i] = src
            }
            dom.style.backgroundPosition = (img.x || 0) + 'px ' + (img.y || 0) + 'px'
        }
        me.sel_ = i
    };

    function on_click_(e) {
        var id = (this.id || '').split('#');
        var me = DropDown.STORE[id[2]];
        if (!me) return;
        if (id.top() == 'p') {
            var idx = me.options_.indexOf(me.sel_);
            close_.call(me);
            select_.call(me, idx)
        } else {
            if (me.open_) {
                close_.call(me)
            } else {
                open_.call(me)
            }
        }
    };

    function select_(idx) {
        this.current_ = this.options_[idx];
        set_option_.call(this);
        if (this.cb_fun_) {
            this.cb_fun_.call(this.cb_scp_, this.current_)
        }
    };

    function open_() {
        if (this.open_) return;
        this.open_ = true;
        var sk = this.skin_;
        var sp = sk.popup;
        if (!sp) return;
        var ios7ff = PLATFORM.IOS && PLATFORM.VERSION >= 7;
        var w = ios7ff ? WCT.dom.GetWindowWidth() + 'px' : null;
        var h = ios7ff ? WCT.dom.GetWindowHeight() + 'px' : null;
        var f = new WCT.Fader(this.dom_id_ + '#f', {
            bgcolor: '#FFFFFF',
            opacity: 0.01,
            w: w,
            h: h
        }, {
            callback_f: close_,
            callback_s: this
        });
        f.Create(document.body);
        this.fader_ = f;
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var ff = hdl ? hdl.GetSkin() : {};
        ff = ff.font_family;
        var id = this.dom_id_ + '#p';
        var d = $$('div');
        d.id = id;
        d.style.position = 'absolute';
        d.style.zIndex = '1';
        d.style.backgroundColor = sp.outer_background_color || '#FFFFFF';
        d.style.border = sp.outer_border || '0px none';
        d.style.padding = (sp.inner_spacing || 0) + 'px';
        if (sp.box_shadow) d.style.boxShadow = sp.box_shadow;
        if (ff) d.style.fontFamily = ff;
        var c = $$('div');
        c.style.border = sp.inner_border || '0px none';
        d.appendChild(c);
        id += '#';
        for (var i = 0, opt = this.options_, o = null; o = opt[i++];) {
            var pi = create_popup_item_.call(this, o, c, id);
            if (!pi) continue;
            if (i > 1) pi.style.borderTop = sp.item_border || '0px none'
        }
        var rtl = this.rtl_;
        var p = $(this.dom_id_);
        p = WCT.dom.GetPosition(p);
        var dim = hdl.GetHandlerDim();
        if (rtl) {
            d.style.right = dim.w - p.left - (sk.w || 0) + 'px'
        } else {
            d.style.left = p.left + 'px'
        }
        d.style.top = p.top + (sk.h || 0) + 1 + 'px';
        if (rtl && BROWSER.IE7) d.style.visibility = 'hidden';
        document.body.appendChild(d);
        if (PLATFORM.IOS && rtl) {
            d.style.right = '';
            d.style.left = dim.w - d.offsetWidth + 'px'
        }
        set_handler_(d, on_visual_p_);
        if (rtl && BROWSER.IE7) WCT.SetTimeout(DropDown.ResizeIE7, 1, this)
    };

    function close_() {
        this.open_ = false;
        if (this.fader_) {
            this.fader_.Destructor();
            this.fader_ = null
        }
        var p = $(this.dom_id_ + '#p');
        if (p) {
            rem_handler_(p);
            p.parentNode.removeChild(p)
        }
    };

    function create_popup_item_(name, dom, id) {
        var sk = this.skin_;
        var si = sk.icons;
        var sp = sk.popup;
        if (!si || !sp) return null;
        var rtl = this.rtl_;
        var fs = sk.font_size || 12;
        var pa = sp.item_spacing || 0;
        var d = $$('div');
        d.id = id + name;
        d.style.position = 'relative';
        d.style.cursor = 'pointer';
        d.style.direction = rtl ? 'rtl' : 'ltr';
        d.style.whiteSpace = 'nowrap';
        d.style.textOverflow = 'ellipsis';
        d.style.backgroundColor = sp.background_color || '#FFFFFF';
        d.style.color = sp.text_color || '#000000';
        d.style.padding = pa + 'px';
        d.style.fontSize = fs + 'px';
        d.style.lineHeight = Math.max(fs, si.h) + 'px';
        d.style[rtl ? 'paddingRight' : 'paddingLeft'] = pa + (sp.icon_spacing || 0) + (si.w || 0) + 'px';
        if (rtl && BROWSER.IE7) d.style.width = '100%';
        var img = sp.icons && sp.icons[name] && sp.icons[name].image || si[name] && si[name].image || null;
        if (!img) return null;
        var i = create_icon_(name, img, id + name + '#i');
        i.style[rtl ? 'right' : 'left'] = pa + 'px';
        i.style.top = pa + 'px';
        i.style.width = (si.w || 0) + 'px';
        i.style.height = (si.h || 0) + 'px';
        d.appendChild(i);
        var h = MANAGER.handler.Get(this.hdl_id_);
        var t = h.Trans(si[name].text || '');
        d.appendChild($$2(t));
        dom.appendChild(d);
        return d
    };
    return {
        Destructor: function() {
            close_.call(this);
            delete DropDown.STORE[this.uid_];
            this.cb_fun_ = null;
            this.cb_scp_ = null;
            this.options_ = null;
            var i = this.dom_id_;
            var d = $(i + '#b');
            if (d) d.parentNode.removeChild(d);
            d = $(i);
            if (d) {
                rem_handler_(d);
                d.parentNode.removeChild(d)
            }
        },
        SetCallback: function(fun, scope) {
            this.cb_fun_ = fun;
            this.cb_scp_ = scope
        },
        SetOptions: function(opt) {
            this.options_ = opt
        },
        SetDefault: function(def) {
            this.current_ = def
        },
        SetXY: function(x, y) {
            var d = $(this.dom_id_);
            if (d) {
                d.style[this.rtl_ ? 'right' : 'left'] = x + 'px';
                d.style.top = y + 'px'
            }
        },
        Select: function(value) {
            var idx = Math.max(0, this.options_.indexOf(value));
            select_.call(this, idx)
        },
        Create: function(dom) {
            var s = this.skin_;
            var i = s[this.rtl_ ? 'image_rtl' : 'image'] || s.image;
            if (!i || !s.icons) return false;
            var bg = $$('div');
            bg.id = this.dom_id_;
            bg.style.backgroundImage = 'url(' + (i.id || '') + ')';
            bg.style.backgroundPosition = (i.x || 0) + 'px ' + (i.y || 0) + 'px';
            bg.style.backgroundRepeat = 'no-repeat';
            bg.style.position = 'absolute';
            bg.style.fontSize = '1px';
            bg.style.cursor = 'pointer';
            bg.style.top = '0px';
            bg.style.width = (s.w || 0) + 'px';
            bg.style.height = (s.h || 0) + 'px';
            this.style_.bg = i.id || '';
            if (!set_option_.call(this, bg)) return false;
            set_handler_.call(this, bg);
            dom.appendChild(bg);
            return true
        }
    }
})();
(function() {
    function watch_zoom_() {
        MANAGER.zoom_current_ = screen.deviceXDPI;
        MANAGER.zoom_watcher_ = WCT.SetInterval(on_watch_zoom_, 500)
    };

    function unwatch_zoom_() {
        if (MANAGER.zoom_watcher_) {
            WCT.ClearInterval(MANAGER.zoom_watcher_);
            MANAGER.zoom_watcher_ = null
        }
    };

    function on_watch_zoom_() {
        if (MANAGER.zoom_current_ != screen.deviceXDPI) {
            MANAGER.zoom_current_ = screen.deviceXDPI;
            MANAGER.OnResize()
        }
    };

    function remove_mailto_(id) {
        var i = $(id);
        if (i) i.parentNode.removeChild(i)
    };

    function exec_mailto_(url) {
        var u = WCT.uid.Generate(8);
        var i = this.uid_ + '#i' + u;
        var f = WCT.iframe.Create(url);
        f.id = i;
        f.style.width = '10px';
        f.style.height = '10px';
        document.body.appendChild(f);
        WCT.SetTimeout(remove_mailto_, 10, this, [i])
    };

    function ie_close_window_() {
        window.opener = window;
        window.open('', '_parent');
        window.close()
    };

    function show_error_page_(cfg) {
        MANAGER.Cleanup();
        var b = document.body;
        var cn = b.childNodes;
        for (var i = cn.length - 2; i > 1; i--) {
            b.removeChild(cn[i])
        }
        b.className = 'error';
        if (cfg.msg || cfg.opt) {
            var m = $('error_msg');
            var o = $('error_opt');
            m.innerHTML = '';
            o.innerHTML = '';
            m.appendChild($$2(cfg.msg || ''));
            o.appendChild($$2(cfg.opt ? cfg.opt.replace(/\\r\\n/g, '<br />').replace(/\\n/g, '<br />') : ''))
        }
        if (cfg.redirect && DEBUG) Log('MANAGER.RedirectErrorPage has been called!', true)
    };

    function open_window_(url, win_cfg) {
        var url_search = arguments[2] || '';
        var url_hash = arguments[3] || '';
        win_cfg.features || (win_cfg.features = {});
        if (win_cfg.features.fullscreen) {
            if (BROWSER.EDGE) {
                win_cfg.features = {
                    fullscreen: true,
                    left: 0,
                    top: 0,
                    width: screen.availWidth,
                    height: screen.availHeight
                }
            } else {
                win_cfg.features = {
                    fullscreen: true
                }
            }
        } else {
            delete win_cfg.features.fullscreen
        }
        var pos = get_wnd_pos_(win_cfg);
        if (pos.w != null) win_cfg.features.width = pos.w;
        if (pos.h != null) win_cfg.features.height = pos.h;
        if (pos.x != null) win_cfg.features.left = pos.x;
        if (pos.y != null) win_cfg.features.top = pos.y;
        var feat = [];
        for (var f in win_cfg.features) {
            if (typeof win_cfg.features[f] == 'boolean') {
                feat.push(f + '=' + (win_cfg.features[f] ? 1 : 0))
            } else {
                feat.push(f + '=' + win_cfg.features[f])
            }
        }
        feat = feat.join(',');
        url += url_search + url_hash;
        var name = win_cfg.name || 'wpb';
        if (!win_cfg.reuse) name += '_' + (new Date).getTime();
        var win = null;
        try {
            win = self.open(url, name, feat)
        } catch (e) {}
        if (!win && win_cfg.show_error) {
            var cap = MANAGER.Trans('ERROR_1');
            var txt = MANAGER.Trans('ERROR_1.h');
            MANAGER.RedirectErrorPage(cap, txt);
            return null
        }
        return win
    };

    function get_wnd_ori_pos_(ori, w, h) {
        var wnd_w;
        var wnd_h;
        var x = 0;
        var y = 0;
        if (BROWSER.IE) {
            wnd_w = screen.availWidth;
            wnd_h = screen.availHeight
        } else {
            wnd_w = screen.width;
            wnd_h = screen.height
        }
        if (w < 0) w = wnd_w;
        if (h < 0) h = wnd_h;
        if (ori.indexOf('E') >= 0) {
            x = wnd_w - w
        } else if (ori.indexOf('W') == -1) {
            x = Math.round((wnd_w - w) / 2)
        }
        if (ori.indexOf('S') >= 0) {
            y = wnd_h - h
        } else if (ori.indexOf('N') == -1) {
            y = Math.round((wnd_h - h) / 2)
        }
        return {
            x: x,
            y: y
        }
    };

    function get_wnd_pos_(win_cfg) {
        var r = {};
        var w = typeof win_cfg.width == 'number' ? win_cfg.width : -1;
        var h = typeof win_cfg.height == 'number' ? win_cfg.height : -1;
        if (win_cfg.win_autosize) {
            w = Math.max(MANAGER.MIN_WIN_W, w);
            h = Math.max(MANAGER.MIN_WIN_H, h)
        }
        if (w >= 0) r.w = w;
        if (h >= 0) r.h = h;
        var ori = typeof win_cfg.orientation == 'string' ? win_cfg.orientation.toUpperCase() : null;
        if (ori) {
            var pos = get_wnd_ori_pos_(ori, w, h);
            if (typeof win_cfg.left == 'number') pos.x += win_cfg.left;
            if (typeof win_cfg.top == 'number') pos.y += win_cfg.top;
            r.x = pos.x;
            r.y = pos.y
        } else {
            if (typeof win_cfg.left == 'number') r.x = win_cfg.left;
            if (typeof win_cfg.top == 'number') r.y = win_cfg.top
        }
        return r
    };

    function set_wnd_ori_(ori) {
        var pos = arguments[1] || {};
        var w = MANAGER.MIN_WIN_W;
        var h = MANAGER.MIN_WIN_H;
        if (typeof window.outerWidth == 'number') {
            w = window.outerWidth;
            h = window.outerHeight
        } else if (pos.w || pos.h) {
            w = pos.w || WCT.dom.GetWindowWidth();
            h = pos.h || WCT.dom.GetWindowHeight()
        } else {
            w = WCT.dom.GetWindowWidth();
            h = WCT.dom.GetWindowHeight()
        }
        var xy = get_wnd_ori_pos_(ori, w, h);
        if (typeof pos.x == 'number') xy.x += pos.x;
        if (typeof pos.y == 'number') xy.y += pos.y;
        try {
            moveTo(xy.x, xy.y)
        } catch (e) {}
    };

    function set_wnd_pos_(win_cfg) {
        var pos = get_wnd_pos_(win_cfg);
        var ww = WCT.dom.GetWindowWidth();
        var wh = WCT.dom.GetWindowHeight();
        if (typeof pos.w != 'number' || pos.w < 0) pos.w = ww;
        if (typeof pos.h != 'number' || pos.h < 0) pos.h = wh;
        var dw = pos.w - ww;
        var dh = pos.h - wh;
        if (dw != 0 || dh != 0) {
            try {
                resizeBy(dw, dh)
            } catch (e) {}
        }
        var ori = typeof win_cfg.orientation == 'string' ? win_cfg.orientation.toUpperCase() : null;
        if (ori) {
            pos.w = ww;
            pos.h = wh;
            set_wnd_ori_(ori, pos)
        }
    };

    function do_FF_fullscreen_() {
        try {
            netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect')
        } catch (e_) {}
        try {
            var cid = '@mozilla.org/appshell/window-mediator;1';
            var med = Components.interfaces.nsIWindowMediator;
            var wman = Components.classes[cid].getService(med);
            var mw = wman.getMostRecentWindow('navigator:browser');
            mw.fullScreen = true;
            mw.toolbar.visible = false;
            mw.statusbar.visible = false;
            mw.menubar.visible = false;
            mw.locationbar.visible = false;
            mw.personalbar.visible = false;
            mw.directories.visible = false;
            if (!MOZ19) mw.BrowserFullScreen()
        } catch (e) {
            self.moveTo(0, 0);
            self.resizeTo(screen.availWidth, screen.availHeight);
            return false
        }
        return true
    };

    function get_mngr_window_() {
        var cur = 0;
        var max = 20;
        var wnd = window;
        try {
            do {
                var mgr = wnd.MANAGER;
                if (mgr && mgr.WND_EVT_ID && wnd[mgr.WND_EVT_ID]) {
                    return wnd
                }
                wnd = wnd.parent
            } while (wnd && ++cur <= max)
        } catch (e) {
            Log(e)
        }
        return null
    };

    function handle_event_(evt) {
        var wnd = get_mngr_window_();
        if (!wnd) return true;
        var ev = wnd.WCT.event.Standardize(evt);
        var e = wnd.MANAGER.events_[ev.type];
        if (!e) return true;
        var ec = [];
        for (var i = 0, o = null; o = e[i]; i++) {
            ec.push(o)
        }
        var wid = wnd.MANAGER.WND_EVT_ID;
        for (var i = 0, o = null; o = ec[i]; i++) {
            if (o.id && o.wid == this[wid]) {
                o.f && o.f.call(o.s, ev, this);
                if (ev.stop_immediately_) {
                    return wnd.WCT.event.Cancel(evt)
                }
            }
        }
        if (ev.stop_propagation_) {
            return wnd.WCT.event.Cancel(evt)
        }
        return true
    };

    function init_() {
        WCT.event.hotkey.Start(window);
        if (TRACKING.central.GetBackendType() || TRACKING.backend.collaborator.Available()) {
            PRODUCER.DisableHttpTracking()
        }
        var so = DATA.GetStartObject();
        var cf = DATA.GetConfig(so.tclass) || {};
        var vd = cf.video_debug;
        if (vd) {
            WCT.event.hotkey.Observe(vd, 'up', PRODUCER.VideoExport.Tick, PRODUCER.VideoExport);
            NOTIFICATION.SetSkin({
                font_size: 10
            }, '<br />');
            PRODUCER.VideoExport.Debug('VideoExport - continue with: ' + vd)
        }
        var tm = this.topmost_;
        var hdl = this.handler.Init(so);
        if (tm) {
            hdl.ConnectTopmost(tm);
            if (!tm.Show()) hdl.ConnectTopmost(null);
            this.topmost_ = null
        }
    };

    function correct_meta_viewport_() {
        var h = window.innerHeight;
        if (!h) return;
        var m = document.getElementsByTagName('meta');
        for (var i = 0, c = null; c = m[i++];) {
            if (c.name == 'viewport') {
                var p = c.parentNode;
                var n = $$('meta');
                n.name = 'viewport';
                n.content = c.content.replace(/device-height/i, h);
                p.appendChild(n);
                p.removeChild(c);
                return
            }
        }
    };

    function ff_reboot_() {
        var u = DATA.context.GetBase() + '/' + DATA.INDEX_HTML;
        var s = DATA.GetUrlSearch();
        var h = DATA.GetUrlHash();
        if (s) u += s;
        if (h) u += h;
        location.href = u
    };

    function boot_reopen_(cfg) {
        var c = DATA.ExtractWindowConfig(cfg) || {};
        c.show_error = true;
        c.reuse = false;
        this.just_an_opener_ = true;
        window.COLL_REFRESH = TRACKING.GetCollRefresh();
        if (this.standalone) {
            try {
                window.moveTo(0, screen.availHeight + 5000)
            } catch (e) {}
        }
        var u = DATA.context.GetBase() + '/' + DATA.INDEX_HTML;
        open_window_(u, c, DATA.GetUrlSearch(), DATA.GetUrlHash())
    };

    function execute_in_new_win_(object, win_cfg) {
        var search = DATA.GetUrlSearch(true).search;
        search = search ? search.substr(1).split('&').toMap({
            delimiter: '='
        }) : {};
        var map = ['left', 'top', 'width', 'height', 'orientation'];
        var mkey = null;
        while (mkey = map.shift()) {
            if (win_cfg[mkey]) search['window_cfg_' + mkey] = win_cfg[mkey]
        }
        if (object.lib_searchstring) {
            delete search.show;
            search.lib_searchstring = object.lib_searchstring
        } else {
            var ext = object.mode || object.filename || '';
            var addr = object.tclass + '!' + object.uid;
            if (object.tourstop) addr += ':tourstop!' + object.tourstop;
            addr += ext ? ':' + ext : '';
            if (object.bookmark) addr += '#slide!' + object.bookmark;
            search.show = addr;
            delete win_cfg.force;
            win_cfg.reuse = false;
            if (BROWSER.IE && object.type == HANDLER.MODE.lesson && object.mode == 'praxis') {
                delete win_cfg.features
            }
        }
        search = '?' + WCT.ObjectToArray(search, '=').join('&');
        var url = DATA.context.GetBase() + '/' + DATA.INDEX_HTML;
        if (!open_window_(url, win_cfg, search)) {
            var c = DATA.GetConfig();
            var n = c ? c.navigator || c.help4 : false;
            if (!n) {
                var msg = MANAGER.Trans('ERROR_1.h');
                NOTIFICATION.ShowMessage(msg)
            }
        }
    };
    window.MANAGER = {
        T2_BUILDNUMBER: '10.0.0',
        MIN_WIN_W: 104,
        MIN_WIN_H: 102,
        MAX_DEBUG_MSGS: 50,
        WND_EVT_ID: 'T2_WND_EVT_ID',
        UID_LEN: 18,
        UID_PREF_MAN: 'M_',
        UID_PREF_HDL: 'H_',
        UID_PREF_SEARCH: 'S_',
        HDL_ALIGN_STACK: 'stack',
        HDL_ALIGN_HOR: 'hor',
        HDL_ALIGN_VERT: 'vert',
        HDL_ALIGN_TILE: 'tile',
        standalone: true,
        uid_: null,
        just_an_opener_: false,
        forbid_close_: false,
        loaded_macrosets_: {},
        central_tracker_: null,
        events_: {},
        resize_to_: null,
        zoom_current_: null,
        zoom_watcher_: null,
        topmost_: null,
        _lockTitle: false,
        Init: function() {
            if (PLATFORM.IOS) correct_meta_viewport_();
            document.body.className = '';
            this.uid_ = WCT.uid.Generate(this.UID_LEN, this.UID_PREF_MAN);
            window[MANAGER.WND_EVT_ID] = this.uid_;
            window.onresize = MANAGER.OnResize;
            window.onhelp = function() {
                return false
            };
            document.onhelp = function() {
                return false
            };
            if (BROWSER.MOBILE && !PLATFORM.ANDROID) window.onorientationchange = MANAGER.OnOrientation;
            MANAGER.HandleFocus();
            BOOKMARK.Start();
            if (BROWSER.IE) watch_zoom_();
            try {
                this.standalone = parent.MANAGER && parent.MANAGER.GetUid() == this.uid_
            } catch (e) {}
            var cfg = DATA.InitLight();
            if (cfg.selftest) return;
            cfg = DATA.InitFull();
            if (cfg.tracking_scorm_simulation) SCORM_API.Enable(true);
            var topmost = null;
            switch (cfg.boot_status_) {
                case DATA.BOOT_FF_REBOOT:
                    ff_reboot_();
                    return;
                    break;
                case DATA.BOOT_ERROR:
                    this.RedirectErrorPage(MANAGER.Trans('ERROR_2'), MANAGER.Trans('ERROR_2.h'), cfg.boot_msg_);
                    return;
                    break;
                case DATA.BOOT_URL:
                    BROADCAST.SendMaster('ClientStop', this.uid_);
                    this.Cleanup();
                    try {
                        location.href = cfg.boot_url_
                    } catch (e) {}
                    return;
                    break;
                case DATA.BOOT_TOPMOST:
                    if (!cfg.navigator && !cfg.help4) {
                        Topmost.WinOut();
                        topmost = new Topmost.praxis(cfg);
                        this.topmost_ = topmost
                    }
                    break;
                case DATA.BOOT_REOPEN:
                    boot_reopen_.call(this, cfg);
                    return;
                    break;
                case DATA.BOOT_ERROR_PAGE:
                    show_error_page_(cfg);
                    return;
                    break
            }
            delete cfg.boot_status_;
            NOTIFICATION.SetSkin();
            if (cfg.boot_msg_) {
                NOTIFICATION.ShowMessage(this.Trans('ERROR_2') + '<br />' + cfg.boot_msg_);
                delete cfg.boot_msg_
            }
            this.SetCtx();
            PRODUCER.Init();
            var win_cfg = DATA.ExtractWindowConfig(cfg) || {};
            var m = DATA.GetActiveManager();
            if (m.active) {
                if (this.standalone && !topmost) {
                    var win_ori = DEFAULTS.Clamp('window_cfg_orientation', win_cfg.orientation, true);
                    if (win_ori) set_wnd_ori_(win_ori)
                }
                this.InitTracking()
            } else {
                if (this.standalone && !topmost) {
                    set_wnd_pos_(win_cfg);
                    if (!BROWSER.IE && win_cfg.features && win_cfg.features.fullscreen) {
                        if (BROWSER.SAFARI || PLATFORM.MAC || BROWSER.EDGE) {
                            self.moveTo(0, 0);
                            self.resizeTo(screen.availWidth, screen.availHeight)
                        } else {
                            do_FF_fullscreen_()
                        }
                    }
                }
                if (m.wnd.COLL_REFRESH) window.COLL_REFRESH = m.wnd.COLL_REFRESH;
                BROADCAST.SendMaster('ClientReady', this.uid_)
            }
        },
        InitTracking: function() {
            var ct = arguments[0];
            if (ct) {
                try {
                    ct.AddAgent(this.uid_)
                } catch (e) {
                    Log(e)
                }
                this.central_tracker_ = ct;
                init_.call(this)
            } else {
                var m = DATA.GetActiveManager();
                if (m.active) {
                    TRACKING.AGENT_UID_PREFIX = this.UID_PREF_MAN;
                    TRACKING.Init(DATA.GetStartObject(), this.uid_, init_, this)
                } else {
                    init_.call(this)
                }
            }
        },
        SetWindowTitle: function(text) {
            if (this._lockTitle && arguments[1] !== false) return;
            this._lockTitle = !!arguments[1];
            try {
                document.title = text || ''
            } catch (e) {}
        },
        SetCentralTracker: function(ct) {
            this.central_tracker_ = ct
        },
        GetCentralTracker: function() {
            return this.central_tracker_
        },
        Unload: function() {
            this.Fini(false)
        },
        Fini: function() {
            var m = DATA.GetActiveManager();
            if (!m.active) {
                BROADCAST.SendMaster('ClientDone', this.uid_, arguments[0])
            } else if (arguments[0] === false) {
                this.Cleanup()
            } else if (!DATA.HasClients() && !this.handler.Exists()) {
                this.CloseWindow()
            }
        },
        Cleanup: function() {
            var m = DATA.GetActiveManager();
            if (m.active && !this.just_an_opener_) {
                BROADCAST.SendClients('ClientClose', true)
            }
            BOOKMARK.Stop();
            if (window.BOOK_SCO_TOC) {
                window.BOOK_SCO_TOC.Destructor();
                window.BOOK_SCO_TOC = null
            }
            WCT.event.hotkey.Stop(window);
            unwatch_zoom_();
            window.COLL_REFRESH = null;
            window.onresize = null;
            window.onorientationchange = null;
            window.onfocus = null;
            window.onblur = null;
            window.onhelp = null;
            document.onhelp = null;
            window.ctx = null;
            this.handler.Cleanup();
            this.event.Cleanup();
            SOCKETS.Cleanup();
            if (this.central_tracker_) {
                try {
                    this.central_tracker_.RemoveAgent(this.uid_)
                } catch (e) {
                    Log(e)
                }
            }
            this.uid_ = null;
            this.CleanupEventHandling();
            Searchfield.Cleanup();
            WCT.Cleanup();
            SKIN.Cleanup();
            VolumeSlider.Cleanup();
            TRACKING.Cleanup();
            HANDLER.library.Search.Cleanup();
            DATA.Cleanup();
            this.central_tracker_ = null
        },
        RedirectErrorPage: function(msg, opt) {
            if (arguments[2]) opt += ' --- ' + arguments[2];
            var loc = location.href;
            var tbu = DATA.context.GetBase();
            if (tbu) loc = loc.split(tbu)[1];
            opt += ' --- ' + loc;
            show_error_page_({
                msg: msg,
                opt: opt,
                redirect: true
            })
        },
        Execute: function(object, win_props) {
            if (object.external) {
                this.ExecuteExternal(object.external, win_props);
                return
            }
            var cfg = HANDLER.base.GetConfig(object, win_props);
            if (!cfg) return;
            var wp = DATA.ExtractWindowConfig(cfg);
            if (BROWSER.IE && wp.features.fullscreen && object.tclass == 'project' && object.mode == 'praxis') {
                wp.features.fullscreen = false
            }
            var req_wnd = BROWSER.MOBILE ? false : DATA.RequiresNewWindow(wp);
            if (req_wnd && !object.lib_embed && (!win_props || !win_props.force_same)) {
                execute_in_new_win_(object, wp)
            } else {
                this.handler.Init(object)
            }
        },
        ExecuteExternal: function(url, win_props) {
            if (!url.indexOf('mailto:')) {
                exec_mailto_.call(this, url);
                return
            }
            var win_cfg = win_props ? DATA.ExtractWindowConfig(win_props) : null;
            if (win_cfg) {
                win_cfg.show_error = false;
                open_window_(url, win_cfg)
            } else {
                try {
                    window.open(url)
                } catch (e) {
                    alert(e.message)
                }
            }
        },
        OpenHelp: function(lang) {
            if (!DATA.HELP_LANGUAGES[lang]) lang = DATA.HELP_DEF_LANG;
            var addr = 'help!' + lang + ':default.htm';
            var url = DATA.context.ToAbsPath(addr);
            if (arguments[1]) url += '?ckey=' + arguments[1];
            this.ExecuteExternal(url)
        },
        GetUid: function() {
            return this.uid_
        },
        GetBase: function() {
            return DATA.context ? DATA.context.GetBase() : ''
        },
        GetActiveManager: function() {
            return DATA.GetActiveManager()
        },
        OpenerRequired: function(r) {
            try {
                if (opener.MANAGER) {
                    opener.MANAGER.ForbidClose()
                }
            } catch (e) {}
        },
        ForbidClose: function() {
            this.forbid_close_ = true
        },
        CloseWindow: function() {
            var c = DATA.GetConfig();
            var n = c ? c.navigator : false;
            var x = c ? c.help4 : false;
            c = c ? c.handler_window_close : true;
            if (!c) return;
            this.Cleanup();
            if (!this.standalone || this.forbid_close_) return;
            if (n) {
                try {
                    window.external.CloseWindow()
                } catch (e) {}
            }
            if (x) {
                try {
                    top.postMessage('closeLightbox', '*');
                    return
                } catch (e) {}
            }
            if (BROWSER.IE || BROWSER.EDGE) {
                WCT.SetTimeout(ie_close_window_, 1)
            } else {
                window.close()
            }
        },
        AddMacroset: function(macroset) {
            if (!this.loaded_macrosets_[macroset]) {
                var url = DATA.context.ToAbsPath('macroset!' + macroset) + '/';
                var len = DATA.MACROSET.length;
                for (var i = 0; i < len; i++) {
                    WCT.ExtendHeadByJS(url + DATA.MACROSET[i], null, window, 'macroset!' + macroset + ':' + DATA.MACROSET[i])
                }
                this.loaded_macrosets_[macroset] = true
            }
            return true
        },
        OnResize: function() {
            var evt = arguments[0];
            if (BROWSER.IE && BROWSER.VERSION < 9) {
                if (MANAGER.resize_to_) WCT.ClearTimeout(MANAGER.resize_to_);
                MANAGER.resize_to_ = WCT.SetTimeout(MANAGER.handler.Align, 10, MANAGER, [evt])
            } else {
                MANAGER.handler.Align(evt);
                if (PLATFORM.ANDROID && evt) MANAGER.OnOrientation(evt)
            }
            NOTIFICATION.Resize(evt)
        },
        OnOrientation: function(evt) {
            MANAGER.handler.SetOrientation(evt)
        },
        ObserveEvent: function(ev, uid, cb, scope) {
            var wnd = arguments[4] || window;
            if (!wnd[MANAGER.WND_EVT_ID]) return;
            WCT.event.Observe(ev, handle_event_, wnd);
            this.events_[ev] || (this.events_[ev] = []);
            this.events_[ev].push({
                id: uid,
                f: cb,
                s: scope,
                w: wnd,
                wid: wnd[MANAGER.WND_EVT_ID]
            })
        },
        StopEventObserving: function(ev, uid) {
            var w = null;
            if (this.events_[ev]) {
                var evts = this.events_[ev];
                for (var i = 0, c = null; c = evts[i]; i++) {
                    if (c.id == uid) {
                        w = c.w;
                        c.f = null;
                        c.s = null;
                        c.w = null;
                        evts.splice(i, 1);
                        break
                    }
                }
                if (!evts.length) {
                    delete this.events_[ev];
                    WCT.event.StopObserving(ev, handle_event_, w)
                }
            }
        },
        CleanupEventHandling: function() {
            for (var ev in this.events_) {
                for (var i = 0, c = null; c = this.events_[ev][i]; i++) {
                    WCT.event.StopObserving(ev, handle_event_, c.w);
                    c.f = null;
                    c.s = null;
                    c.w = null
                }
                delete this.events_[ev]
            }
            this.events_ = {}
        },
        Trans: function(key) {
            return DATA.Trans(key, arguments[1])
        },
        SetCtx: function() {
            window.ctx = {
                cfg_show: function() {
                    var c = MANAGER && MANAGER.handler && MANAGER.handler.GetSlideCtx() || null;
                    if (c) c.cfg_show.apply(c, arguments)
                }
            }
        },
        HandleFocus: function() {
            try {
                window.focus();
                window.onfocus = MANAGER.OnFocus;
                window.onblur = MANAGER.OnFocus
            } catch (e) {}
            var hdl = this.handler.Iterate(true);
            while (hdl) {
                var ifr = hdl.GetSlideRendererIFrame(0);
                var wnd = ifr && ifr.contentWindow || null;
                if (wnd) {
                    wnd.onfocus = MANAGER.OnFocus;
                    wnd.onblur = MANAGER.OnFocus
                }
                hdl = this.handler.Iterate()
            }
        },
        GetUrl: function() {
            var h = this.handler.GetActive();
            return h ? h.GetUrl(arguments[0]) : DATA.context.GetBase() + '/index.html'
        },
        OnFocus: function(evt) {
            var wnd = get_mngr_window_();
            var mgr = wnd ? wnd.MANAGER : null;
            if (!mgr) return;
            evt = wnd.WCT.event.Standardize(evt);
            if (!evt) return;
            if (evt.type == 'focus') {
                var hdl = mgr.handler.GetActive();
                var uid = hdl && hdl.GetUid() || null;
                var ifr = hdl && hdl.GetSlideRendererIFrame(0);
                wnd = ifr && ifr.contentWindow || null;
                if (wnd && wnd.hdl_onfocus) wnd.hdl_onfocus();
                hdl = mgr.handler.Iterate(true);
                while (hdl) {
                    if (hdl.GetUid() != uid) {
                        var ifr = hdl.GetSlideRendererIFrame(0);
                        var wnd = ifr && ifr.contentWindow || null;
                        if (wnd && wnd.hdl_onblur) wnd.hdl_onblur()
                    }
                    hdl = mgr.handler.Iterate()
                }
            } else {
                var hdl = mgr.handler.Iterate(true);
                while (hdl) {
                    var ifr = hdl.GetSlideRendererIFrame(0);
                    var wnd = ifr && ifr.contentWindow || null;
                    if (wnd && wnd.hdl_onblur) wnd.hdl_onblur();
                    hdl = mgr.handler.Iterate()
                }
            }
        }
    }
})();
MANAGER.handler = (function() {
    var handlers_ = {};
    var uids_ = [];
    var orientation_ = null;
    var it_idx_ = 0;

    function get_final_state_(uid) {
        var hdl = handlers_[uid];
        var info = hdl.GetContentInfo();
        var state = hdl.GetCompletionState();
        state.type = 'closehandler';
        state.finished = true;
        state.handler_id = uid;
        state.content_id = info.address;
        return state
    };
    return {
        Cleanup: function() {
            for (var uid in handlers_) {
                var state = get_final_state_(uid);
                handlers_[uid].Destructor(true);
                MANAGER.event.Broadcast(state)
            }
            handlers_ = {};
            uids_ = [];
            orientation_ = null
        },
        Get: function(uid) {
            return handlers_[uid] || null
        },
        Count: function() {
            return uids_.length
        },
        GetActive: function() {
            for (var uid in handlers_) {
                if (handlers_[uid].IsActive()) {
                    return handlers_[uid]
                }
            }
            return null
        },
        Iterate: function() {
            if (arguments[0]) it_idx_ = 0;
            var uid = uids_[it_idx_++];
            return handlers_[uid] || null
        },
        BaseInit: function(obj) {
            var ct = MANAGER.GetCentralTracker();
            var hdl = new HANDLER[obj.type](obj, ct);
            var uid = hdl.GetUid();
            handlers_[uid] = hdl;
            hdl.Init();
            return hdl
        },
        Init: function(obj) {
            var hdl = this.BaseInit(obj);
            var uid = hdl.GetUid();
            uids_.push(uid);
            this.Align();
            MANAGER.OnFocus({
                type: 'focus'
            });
            BOOKMARK.AddHandler(uid);
            return hdl
        },
        Fini: function(uid) {
            var normal = arguments[1];
            var hdl = handlers_[uid];
            if (hdl) {
                var state = get_final_state_(uid);
                if (normal !== false) {
                    var idx = uids_.indexOf(uid);
                    if (idx >= 0) uids_.splice(idx, 1);
                    hdl.Destructor();
                    delete handlers_[uid]
                }
                MANAGER.event.Broadcast(state)
            }
            BOOKMARK.RemoveHandler(uid);
            if (!this.Exists()) {
                if (normal !== false) MANAGER.Fini()
            } else {
                this.Align();
                MANAGER.OnFocus({
                    type: 'focus'
                })
            }
            var ah = MANAGER.handler.GetActive();
            if (!ah) return;
            MANAGER.SetWindowTitle(ah.GetTitle() || 'trainer', false);
            ah.SetTitle()
        },
        GetTopmostConnected: function() {
            for (var uid in handlers_) {
                if (handlers_[uid].HasTopmost()) {
                    return handlers_[uid]
                }
            }
            return null
        },
        CloseTopmostConnected: function() {
            for (var uid in handlers_) {
                if (handlers_[uid].HasTopmost()) {
                    handlers_[uid].ConnectTopmost(null);
                    handlers_[uid].Fini()
                }
            }
        },
        Exists: function() {
            return uids_.length > 0
        },
        GetSlideCtx: function() {
            var idx = 0;
            var hdl = null;
            var c = null;
            do {
                do {
                    hdl = handlers_[uids_[idx++]]
                } while (hdl && !hdl.GetSlideCtx);
                if (!hdl) break
            } while (!(c = hdl.GetSlideCtx(0)));
            return c
        },
        GetOrientation: function() {
            var p = 'portrait';
            var l = 'landscape'
            if (PLATFORM.ANDROID) {
                var odiv = $('oricheck');
                var c = odiv && WCT.dom.GetComputedStyle(odiv, window, 'background-color');
                if (c) return parseInt(c.substr(4, 1)) ? p : l;
                var oi = 'outer';
                if (window[oi + 'Width'] == 0 || window[oi + 'Height'] == 0) oi = 'inner';
                return window[oi + 'Width'] > window[oi + 'Height'] ? l : p
            }
            if (PLATFORM.WINTABLET) return screen.width > screen.height ? l : p;
            return Math.abs(window.orientation) % 180 ? l : p
        },
        SetOrientation: function(evt) {
            var o = this.GetOrientation();
            if (o == orientation_) return;
            orientation_ = o;
            for (var uid in handlers_) {
                handlers_[uid].Orientation(o, evt)
            }
            this.Align(evt);
            window.scrollTo(0, 0)
        },
        Align: function() {
            var evt = arguments[0] || null;
            var w = WCT.dom.GetWindowWidth();
            var h = WCT.dom.GetWindowHeight();
            var c = uids_.length;
            if (!c) {
                return
            } else if (c == 1) {
                var hdl = handlers_[uids_[0]];
                hdl.SetPosition(0, 0, w, h, evt);
                hdl.SetHandlerCount(1);
                hdl.SetActive(true);
                if (!evt) hdl.Resize(null, true)
            } else {
                var lib = null;
                for (var i = 0; i < c; i++) {
                    var hdl = handlers_[uids_[i]];
                    if (hdl.GetType() == HANDLER.MODE.library) {
                        lib = hdl;
                        break
                    }
                }
                for (var i = 0; i < c; i++) {
                    var hdl = handlers_[uids_[i]];
                    if (lib && hdl.IsLibEmbedded()) {
                        var p = lib.GetEmbeddedPos() || {
                            x: 0,
                            y: 0,
                            w: w,
                            h: h
                        };
                        hdl.SetPosition(p.x, p.y, p.w, p.h, evt)
                    } else {
                        hdl.SetPosition(0, 0, w, h, evt)
                    }
                    if (BROWSER.IE && BROWSER.VERSION < 11 && i < (c - 1)) {;
                        hdl.SetHandlerCount(1)
                    } else {
                        hdl.SetHandlerCount(c)
                    }
                    hdl.SetActive(false)
                }
                handlers_[uids_[c - 1]].SetActive(true)
            }
        }
    }
})();
MANAGER.broadcast = {
    ClientInit: function(client_wnd) {
        DATA.AddClient(client_wnd);
        return DATA.Stringify()
    },
    ClientReady: function(client_uid) {
        var client_wnd = DATA.GetClients()[client_uid];
        if (MANAGER.just_an_opener_) {
            BROADCAST.SendClients('NewMaster', client_wnd)
        } else {
            BROADCAST.SendClient(client_wnd, 'ClientInitTracking')
        }
    },
    ClientStop: function(client_uid) {
        DATA.RemoveClient(client_uid);
        if (!DATA.HasClients()) MANAGER.Fini()
    },
    ClientDone: function(client_uid) {
        var client_wnd = DATA.GetClients()[client_uid];
        if (client_wnd) BROADCAST.SendClient(client_wnd, 'ClientClose', null, arguments[1]);
        DATA.RemoveClient(client_uid);
        if (!DATA.HasClients()) MANAGER.Fini()
    },
    ClientClose: function() {
        if (arguments[1] === false) {
            MANAGER.Cleanup()
        } else {
            MANAGER.CloseWindow(arguments[0] || false)
        }
    },
    ClientInitTracking: function() {
        var m = DATA.GetActiveManager();
        var ct = m.wnd && m.wnd.MANAGER && m.wnd.MANAGER.GetCentralTracker() || null;
        MANAGER.InitTracking(ct)
    },
    NewMaster: function(master_wnd) {
        DATA.SetActiveManager(master_wnd)
    },
    NewMasterReady: function() {
        MANAGER.CloseWindow()
    },
    GetActiveManager: function() {
        return DATA.GetActiveManager().wnd
    },
    GetData: function(addr) {
        var c = null;
        if (arguments[2]) {
            c = new WCT.context();
            c.Parse(arguments[2])
        }
        var d = DATA.GetS(addr, arguments[1], c);
        return d ? JSON.stringify(d) : null
    },
    GetDataM: function(addrs) {
        var c = null;
        if (arguments[1]) {
            c = new WCT.context();
            c.Parse(arguments[1])
        }
        var d = DATA.GetSM(JSON.parse(addrs), c);
        return d ? JSON.stringify(d) : null
    },
    BroadcastEvent: function(evt) {
        var am = DATA.GetActiveManager();
        if (am.active) BROADCAST.SendClients('BroadcastEvent', evt);
        MANAGER.event.Handle(evt)
    }
};
(function() {
    var events_ = [];
    MANAGER.event = {
        Cleanup: function() {
            this.UnregisterListener()
        },
        RegisterListener: function(evt) {
            events_.push(evt)
        },
        UnregisterListener: function() {
            var evt = arguments[0] || {};
            var n = [];
            if (evt.control_id) {
                for (var i = 0, c = null; c = events_[i++];) {
                    if (c.handler_id !== evt.handler_id || c.slide_id !== evt.slide_id || c.control_id !== evt.control_id) {
                        n.push(c)
                    }
                }
            } else if (evt.slide_id) {
                for (var i = 0, c = null; c = events_[i++];) {
                    if (c.handler_id !== evt.handler_id || c.slide_id !== evt.slide_id) {
                        n.push(c)
                    }
                }
            } else if (evt.handler_id) {
                for (var i = 0, c = null; c = events_[i++];) {
                    if (c.handler_id !== evt.handler_id) {
                        n.push(c)
                    }
                }
            }
            events_ = n
        },
        Broadcast: function(evt) {
            evt.manager_id = MANAGER.GetUid();
            BROADCAST.SendMaster('BroadcastEvent', JSON.stringify(evt))
        },
        Handle: function(evt) {
            evt = JSON.parse(evt);
            for (var i = 0, c = null; c = events_[i++];) {
                if (c.content_id === evt.content_id) {
                    var h = MANAGER.handler.Get(c.handler_id);
                    if (!h) {
                        this.UnregisterListener({
                            handler_id: c.handler_id
                        });
                        continue
                    }
                    h.BroadcastEvent({
                        content_id: c.content_id,
                        slide_id: c.slide_id,
                        control_id: c.control_id,
                        data: evt
                    })
                }
            }
        }
    }
})();
var PRODUCER = {
    http_: true,
    Init: function() {
        var url = DATA.context.GetBase();
        if (url.search(/127\.0\.0\.1/) < 0 && url.search(/localhost/) < 0) {
            this.http_ = false
        }
    },
    SetMacroUid: function(uid) {
        if (!this.http_) return;
        if (DATA.context.GetProtocol().indexOf('http') != 0) {
            this.http_ = false;
            return
        }
        var url = DATA.context.GetBase() + '/lesson_tracking';
        var dat = {
            current_mac_uid: uid
        };
        if (BROWSER.IE) {
            if (XHR.PostS(url, dat) == null) PRODUCER.http_ = false
        } else {
            XHR.PostA(url, dat, null, function() {}, PRODUCER.DisableHttpTracking)
        }
    },
    DisableHttpTracking: function() {
        if (window.PRODUCER) PRODUCER.http_ = false
    }
};
PRODUCER.VideoExport = (function() {
    var enabled_ = false;

    function send_(fun) {
        var p1 = arguments[1];
        var p2 = arguments[2];
        try {
            if (typeof p1 != 'undefined') {
                if (typeof p2 != 'undefined') {
                    external[fun](p1, p2)
                } else {
                    external[fun](p1)
                }
            } else {
                external[fun]()
            }
        } catch (e) {}
    };
    return {
        Debug: function(msg) {
            var c = DATA.GetConfig() || {};
            if (c.video_debug) NOTIFICATION.ShowMessage(msg)
        },
        Enabled: function() {
            if (typeof arguments[0] == 'boolean') enabled_ = arguments[0];
            return enabled_
        },
        SetFPS: function(fps) {
            this.Debug('SetFPS: ' + fps);
            var h = MANAGER.handler.GetActive();
            h = h ? h.GetSlideHandler() : null;
            if (h) h.SetupVideoMode(fps)
        },
        Progress: function(current, total) {
            if (enabled_) {
                this.Debug('Progress: ' + current + ' / ' + total);
                send_('OnProgress', current, total)
            }
        },
        Resize: function() {
            if (!enabled_) return;
            this.Debug('Resize');
            var w = WCT.dom.GetWindowWidth();
            var h = WCT.dom.GetWindowHeight();
            send_('OnResize', w, h)
        },
        Ready: function() {
            if (!enabled_) return;
            this.Debug('Ready');
            this.Resize();
            send_('OnReady')
        },
        Tick: function() {
            this.Debug('Tick');
            var h = MANAGER.handler.GetActive();
            if (h) h.VideoTick()
        },
        TickDone: function(msg) {
            if (enabled_) {
                this.Debug('TickDone' + (msg ? ' (' + msg + ')' : ''));
                send_('OnFrameReady')
            }
        },
        Audio: function(mode, src) {
            if (enabled_) {
                this.Debug('Audio: ' + mode + ' - ' + src);
                send_(mode == 'start' ? 'OnAudioStart' : 'OnAudioStop', src)
            }
        },
        Fini: function() {
            if (enabled_) {
                this.Debug('Fini');
                send_('OnFinish')
            }
        }
    }
})();

function Popup(config) {
    if (!arguments.length) return;
    this.hdl_id_ = config.hdl_id;
    this.skin_ = config.skin;
    this.callback_ = config.callback;
    this.scope_ = config.scope;
    this.id_ = '';
    this.buttons_ = [];
    this.dnd_ = null;
    this.moved_ = false
};
Popup.OnDnd = function() {
    this.moved_ = true
};
Popup.prototype = {
    Destructor: function() {
        var hdl_id = this.hdl_id_;
        var id = hdl_id + '#' + this.id_;
        if (this.dnd_) {
            this.dnd_.Destructor();
            this.dnd_ = null
        }
        if (this.buttons_) {
            var sctl = SKIN.textcontrol;
            for (var i = 0, b = null; b = this.buttons_[i++];) {
                sctl.Cleanup(id + '#buttons#' + b.id)
            }
            this.buttons_ = null
        }
        var main = $(id);
        if (main) {
            var p = main.parentNode;
            p.scrollTop = 0;
            p.scrollLeft = 0;
            p.style.overflow = 'hidden';
            p.removeChild(main)
        }
        if (PLATFORM.ANDROID) {
            var hdl = MANAGER.handler.Get(hdl_id);
            if (HANDLER.MODE.library === hdl.GetType()) {
                hdl.SetVisibility(true)
            }
        }
        var coverf = $(id + '#cover');
        if (coverf) coverf.parentNode.removeChild(coverf);
        var evtf = $(id + '#evt');
        if (evtf) evtf.parentNode.removeChild(evtf);
        this.skin_ = null;
        this.callback_ = null;
        this.scope_ = null
    },
    Resize: function() {
        var hdl_id = this.hdl_id_;
        var hdl = MANAGER.handler.Get(hdl_id);
        var dim = hdl && hdl.GetHandlerDim();
        var skin = this.skin_;
        if (!dim || !skin) return;
        var ws = WCT.skin;
        var id = hdl_id + '#' + this.id_;
        var coverf = $(id + '#cover');
        if (coverf) ws.ApplyPosition(coverf, dim);
        var evtf = $(id + '#evt');
        if (evtf) ws.ApplyPosition(evtf, dim);
        if (!this.moved_) {
            var x = Math.max(0, (dim.w - (skin.w || 0)) >> 1);
            var y = Math.max(0, (dim.h - (skin.h || 0)) >> 1);
            var frame = $(id);
            if (frame) {
                frame.style.left = x + 'px';
                frame.style.top = y + 'px'
            }
        }
    },
    Show: function(title) {
        var hdl_id = this.hdl_id_;
        var hdl = MANAGER.handler.Get(hdl_id);
        var dom = hdl && hdl.GetDom();
        var skin = this.skin_;
        if (!dom || !skin.frame || !skin.text || !skin.button) return null;
        var id = hdl_id + '#' + this.id_;
        var wskin = WCT.skin;
        var hdim = hdl.GetHandlerDim();
        var coverf = WCT.iframe.Create();
        coverf.id = id + '#cover';
        wskin.ApplyPosition(coverf, hdim);
        if (skin.background_color) {
            if (!(PLATFORM.ANDROID && !BROWSER.CHROME)) coverf.style.backgroundColor = skin.background_color;
            coverf.style.opacity = 0.5;
            coverf.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=50)'
        }
        dom.appendChild(coverf);
        if (PLATFORM.ANDROID && HANDLER.MODE.library === hdl.GetType()) {
            hdl.SetVisibility(false)
        }
        var evtf = $$('div');
        evtf.id = id + '#evt';
        wskin.ApplyPosition(evtf, hdim);
        dom.appendChild(evtf);
        var w = skin.w || 0;
        var h = skin.h || 0;
        var x = Math.max(0, (hdim.w - skin.w) >> 1);
        var y = Math.max(0, (hdim.h - skin.h) >> 1);
        var main = $$('div');
        main.id = id;
        main.style.position = 'absolute';
        main.style.left = x + 'px';
        main.style.top = y + 'px';
        main.style.width = w + 'px';
        main.style.height = h + 'px';
        dom.appendChild(main);
        dom.style.overflow = 'auto';
        var rtl = hdl.GetContentInfo().rtl;
        var st = skin.title;
        id += '#';
        SKIN.popup.CreateFrame(main, skin.frame, {
            id: id,
            w: w,
            h: h
        });
        if (st) {
            var tit = SKIN.popup.CreateTitle(main, st, {
                id: id,
                w: w,
                title: title,
                rtl: rtl
            });
            this.dnd_ = new WCT.dnd(main, tit);
            this.dnd_.SetCallback('onbegin', Popup.OnDnd, this)
        }
        var dim = SKIN.popup.GetDim(skin.frame);
        dim.x = dim.l;
        dim.y = dim.t;
        dim.w = w - dim.w;
        dim.h = h - dim.h;
        var cont = $$('div');
        cont.id = id + 'content';
        if (rtl) cont.style.direction = 'rtl';
        wskin.ApplyPosition(cont, dim);
        wskin.ApplyTextFormats(cont, skin.text);
        main.appendChild(cont);
        var sb = skin.button;
        var boff = (dim.b - (sb.h || 0)) >> 1;
        var b_off_r = sb.outer_spacing_r || 3;
        var bdim = {
            x: -dim.r - b_off_r,
            y: dim.y + dim.h + boff,
            w: dim.w - b_off_r,
            h: Math.max(0, dim.b - boff)
        };
        var butt = $$('div');
        butt.id = id + 'buttons';
        wskin.ApplyPosition(butt, bdim);
        main.appendChild(butt);
        id += 'buttons#';
        var sctl = SKIN.textcontrol;
        var sfloat = 'right';
        var margin = 'marginRight';
        if (rtl) {
            sfloat = 'left';
            margin = 'marginLeft'
        }
        var bu = this.buttons_;
        var bl = bu.length;
        var first = true;
        for (var i = bl, b = null; b = bu[--i];) {
            var ctl = sctl.Add({
                id: id + b.id,
                skin: sb,
                dom: butt,
                onexec: this.on_button_,
                scope: this,
                text: hdl.Trans(b.textkey)
            });
            ctl.style.position = 'relative';
            ctl.style.cssFloat = sfloat;
            ctl.style.styleFloat = sfloat;
            if (!first) ctl.style[margin] = b_off_r + 'px';
            first = false
        }
        return {
            cont: cont,
            dim: dim
        }
    },
    SetZIndex: function(z) {
        var id = this.hdl_id_ + '#' + this.id_;
        var c = $(id + '#cover');
        if (c) c.style.zIndex = z;
        var e = $(id + '#evt');
        if (e) e.style.zIndex = z;
        var m = $(id);
        if (m) m.style.zIndex = z
    },
    enable_button_: function(id, e) {
        id = this.hdl_id_ + '#' + this.id_ + '#buttons#' + id;
        SKIN.textcontrol.Enabled(id, e)
    },
    on_button_: function(id, evt) {}
};
Popup.KeywordSearch = function(config) {
    Popup.call(this, config);
    this.keywords_ = config.keywords;
    this.id_ = 'kwsearch';
    this.buttons_ = [{
        id: 'view',
        textkey: 'VIEW'
    }, {
        id: 'cancel',
        textkey: 'CANCEL'
    }];
    this.sf_ = null;
    this.s1_ = null;
    this.s2_ = null;
    this.st_ = null
};
Popup.KeywordSearch.prototype = new Popup;
Popup.KeywordSearch.STYLE = {
    background_color_a: '#3399FF',
    text_color_a: '#FFFFFF'
};
Popup.KeywordSearch.OnTextbox = function(evt) {
    evt = WCT.event.Standardize(evt);
    var ids = evt.target.id.split('#');
    var len = ids.length;
    var id1 = ids[len - 2];
    if (id1 != 'keywords' && id1 != 'resources') return;
    var hdl = MANAGER.handler.Get(ids[0]);
    var me = hdl && hdl.GetSearch();
    if (!me) return;
    var id2 = ids[len - 1];
    if (id1 == 'keywords') {
        me.select_list1_(id2)
    } else {
        me.select_list2_(id2)
    }
};
WCT.ExtendObject(Popup.KeywordSearch.prototype, {
    Destructor: function() {
        this.keywords_ = null;
        if (this.sf_) {
            this.sf_.Destructor();
            this.sf_ = null
        }
        var id = this.hdl_id_ + '#' + this.id_;
        var kw = $(id + '#keywords');
        var re = $(id + '#resources');
        if (kw) kw.onclick = null;
        if (re) re.onclick = null;
        Popup.prototype.Destructor.call(this)
    },
    Show: function() {
        var s = this.skin_;
        if (!s.search) return false;
        var hdl_id = this.hdl_id_;
        var hdl = MANAGER.handler.Get(hdl_id);
        var r = Popup.prototype.Show.call(this, hdl.Trans('KEYWORD_SEARCH'));
        if (!r) return false;
        this.enable_button_('view', false);
        var pl = s.text.outer_spacing_l || 0;
        var pr = s.text.outer_spacing_r || 0;
        var pm = Math.min(pl, pr);
        var linfo = [{
            id: 'search',
            textkey: 'SEARCH_STRING',
            type: 'search'
        }, {
            id: 'keywords',
            textkey: 'KEYWORDS',
            type: 'box'
        }, {
            id: 'resources',
            textkey: 'RESOURCES',
            type: 'box'
        }];
        var mt = 5;
        var style = HANDLER.library.ModuleSearch.STYLE;
        var lh = Math.max(s.text.line_height, s.text.font_size, 12);
        var h = Math.max(0, r.dim.h - s.search.h - mt * 3 - lh * 3 - style.border_width * 4 - 10) >> 1;
        var id = hdl_id + '#' + this.id_ + '#';
        var rtl = hdl.GetContentInfo().rtl;
        for (var i = 0, c = null; c = linfo[i++];) {
            var cap = $$('div');
            cap.style.marginLeft = pl + 'px';
            cap.style.marginRight = pr + 'px';
            cap.style.marginTop = mt + 'px';
            cap.style.fontWeight = 'bold';
            cap.appendChild($$2(hdl.Trans(c.textkey)));
            r.cont.appendChild(cap);
            if (c.type == 'box') {
                var txt = $$('div');
                txt.id = id + c.id;
                txt.style.height = h + 'px';
                txt.style.borderWidth = style.border_width + 'px';
                txt.style.borderStyle = 'solid';
                txt.style.borderColor = '#999999 #666666 #666666 #999999';
                txt.style.borderRadius = style.border_radius + 'px';
                txt.style.marginLeft = pl + 'px';
                txt.style.marginRight = pr + 'px';
                txt.style.overflowX = 'hidden';
                txt.style.overflowY = 'scroll';
                r.cont.appendChild(txt);
                txt.onclick = Popup.KeywordSearch.OnTextbox
            } else {
                var search_style = HANDLER.library.ModuleSearch.GetStyle(s.search);
                var sf = new Searchfield({
                    hdl_id: hdl_id,
                    id: this.id_ + '#search',
                    skin: search_style,
                    dom: r.cont,
                    onsearch: this.on_search_,
                    scope: this,
                    rtl: rtl
                });
                var w = r.dim.w - pm * 2 + search_style.margin_left + search_style.margin_right;
                sf.SetWH(w, s.search.h);
                sf.SetXY(pm - search_style.margin_left, 0);
                this.sf_ = sf
            }
        }
        this.fill_list1_();
        if (this.sf_) this.sf_.Focus();
        return true
    },
    fill_list1_: function() {
        var id = this.hdl_id_ + '#' + this.id_ + '#keywords';
        var lst = $(id);
        var kw = this.keywords_;
        var wl = arguments[0] || null;
        lst.innerHTML = '';
        this.s1_ = null;
        var first = null;
        for (var key in kw) {
            if (wl && !wl[key]) continue;
            var itm = $$('div');
            itm.id = id + '#' + key;
            itm.style.padding = '0 2px';
            itm.style.cursor = 'pointer';
            itm.appendChild($$2(key));
            lst.appendChild(itm);
            if (!first) first = key
        }
        this.select_list1_(first)
    },
    select_list1_: function(key) {
        var i = this.hdl_id_ + '#' + this.id_ + '#keywords#';
        if (this.s1_) {
            var o = $(i + this.s1_);
            if (o) {
                o.style.backgroundColor = '';
                o.style.color = ''
            }
        }
        var e = $(i + key);
        if (e) {
            var s = Popup.KeywordSearch.STYLE;
            e.style.backgroundColor = s.background_color_a;
            e.style.color = s.text_color_a
        }
        this.s1_ = key;
        this.fill_list2_(key)
    },
    fill_list2_: function(key) {
        var id = this.hdl_id_ + '#' + this.id_ + '#resources';
        var lst = $(id);
        lst.innerHTML = '';
        this.s2_ = null;
        this.enable_button_('view', false);
        var kw = this.keywords_[key];
        if (!kw) return;
        id += '#';
        for (var i = 0, c = null; c = kw[i++];) {
            var itm = $$('div');
            itm.id = id + c.uid;
            itm.style.padding = '0 2px';
            itm.style.cursor = 'pointer';
            itm.appendChild($$2(c.caption));
            lst.appendChild(itm)
        }
    },
    select_list2_: function(key) {
        var id = this.hdl_id_ + '#' + this.id_ + '#resources#';
        if (this.s2_) {
            var o = $(id + this.s2_);
            if (o) {
                o.style.backgroundColor = '';
                o.style.color = ''
            }
        }
        var e = $(id + key);
        if (e) {
            var s = Popup.KeywordSearch.STYLE;
            e.style.backgroundColor = s.background_color_a;
            e.style.color = s.text_color_a
        }
        this.s2_ = key;
        this.enable_button_('view', true);
        if (this.callback_) this.callback_.call(this.scope_, true, key)
    },
    on_button_: function(id, evt) {
        if (this.callback_) {
            var m = id.search(/view$/) >= 0;
            this.callback_.call(this.scope_, m)
        }
    },
    on_search_: function(search) {
        search = search.toLowerCase();
        var p = search.split(' ');
        var l = p.length - 1;
        var k = this.keywords_;
        if (this.st_ == search) return;
        this.st_ = search;
        var h = {};
        for (var key in k) {
            var kl = key.toLowerCase();
            if (kl.indexOf(search) >= 0) {
                h[key] = 1
            } else {
                for (var i = l; i >= 0; i--) {
                    if (kl.indexOf(p[i]) >= 0) {
                        h[key] = 1;
                        break
                    }
                }
            }
        }
        this.fill_list1_(h)
    }
});
Popup.ManagerFeedback = function(config) {
    Popup.call(this, config);
    this.id_ = 'feedback';
    this.buttons_ = [{
        id: 'submit',
        textkey: 'FEEDBACK_SEND'
    }, {
        id: 'cancel',
        textkey: 'CANCEL'
    }];
    this.submit_id_ = null;
    this.cancel_id_ = null
};
Popup.ManagerFeedback.prototype = new Popup;
Popup.ManagerFeedback.CheckResponse = function(hdl_id) {
    var hdl = MANAGER.handler.Get(hdl_id);
    var me = hdl && hdl.GetFeedback();
    if (!me) return;
    var recf = $(hdl_id + '#' + me.id_ + '#rec');
    if (recf && recf.contentWindow) {
        var bdy = 'error';
        try {
            var doc = recf.contentWindow.document;
            bdy = doc && doc.body;
            bdy = bdy && bdy.innerHTML.replace(/\n|\r/g, '')
        } catch (e) {
            bdy = 'error'
        }
        if (bdy.indexOf('{"response":{}}') >= 0) {
            me.callback_.call(me.scope_);
            return
        } else if (bdy != '') {
            me.enable_button_('submit', true);
            me.enable_button_('cancel', true);
            return
        }
        WCT.SetTimeout(Popup.ManagerFeedback.CheckResponse, 50, Popup.ManagerFeedback, [hdl_id])
    }
};
WCT.ExtendObject(Popup.ManagerFeedback.prototype, {
    Destructor: function() {
        var id = this.hdl_id_ + '#' + this.id_;
        var recf = $(id + '#rec');
        if (recf) recf.parentNode.removeChild(recf);
        WCT.event.hotkey.Suspend(id, false);
        Popup.prototype.Destructor.call(this)
    },
    Show: function() {
        var hdl_id = this.hdl_id_;
        var hdl = MANAGER.handler.Get(hdl_id);
        var r = Popup.prototype.Show.call(this, hdl.Trans('FEEDBACK_TITLE'));
        if (!r) return false;
        var recf = WCT.iframe.Create(DATA.context.ToAbsPath('trainer:about_blank.html'), null, hdl_id + '#feedback#rec');
        recf.style.display = 'none';
        document.body.appendChild(recf);
        var content = hdl.GetContentInfo();
        var entity = DATA.GetS(content.tclass + '!' + content.uid + ':entity.txt');
        var slide = hdl.GetCurrentSlide ? hdl.GetCurrentSlide() : null;
        var ts = hdl.GetCurrentTourstop ? hdl.GetCurrentTourstop() : null;
        var mac = hdl.GetCurrentMacro ? hdl.GetCurrentMacro() : null;
        var libstart = content.selection || '';
        var libstartd = libstart ? DATA.GetS(libstart + ':entity.txt') : null;
        var data = {
            type: hdl.GetType(),
            uid: content.tclass + '!' + content.uid,
            mode: content.mode || '',
            title: entity.caption || '',
            tsidx: ts && ts.orig_index_ != null ? (ts.orig_index_ + 1) : '',
            tsuid: ts && ts.uid,
            tstitle: ts && ts.title,
            macuid: mac && mac.uid || '',
            slideuid: slide && slide.uid || '',
            slidetitle: slide && slide.caption || '',
            startentity: libstart,
            startentitytitle: libstartd && libstartd.caption || ''
        };
        var id = hdl_id + '#' + this.id_ + '#';
        var form = $$('form');
        form.id = id + 'form';
        form.enctype = 'multipart/form-data';
        form.encoding = 'multipart/form-data';
        form.method = 'post';
        form.target = id + 'rec';
        form.action = DATA.context.GetBase() + '/' + content.tclass + '/' + content.uid + '/.comment';
        r.cont.appendChild(form);
        for (var key in data) {
            var ip = WCT.dom.CreateInputElement('hidden', key);
            ip.value = data[key];
            form.appendChild(ip)
        }
        var skin = this.skin_;
        var sir = skin.inputradio || {};
        var key = 'outer_spacing_';
        var def = {
            t: 3,
            r: 3,
            b: 0,
            l: 5
        };
        for (var a in def) {
            sir[key + a] = (typeof sir[key + a] != 'undefined' ? sir[key + a] : def[a])
        }
        var pl = skin.text.outer_spacing_l || 0;
        var pr = skin.text.outer_spacing_r || 0;
        var irh = sir[key + 't'] + sir[key + 'b'] + (sir.h || 13);
        data = [{
            txt: 'FEEDBACK_QUESTION'
        }, {
            id: 'mist',
            txt: 'FEEDBACK_MISTAKE',
            radio: 'radiobutton',
            val: 1
        }, {
            id: 'comm',
            txt: 'FEEDBACK_COMMENTS',
            radio: 'radiobutton',
            val: 2
        }, {
            txt: 'DESCRIPTION'
        }, {
            area: 'description'
        }];
        for (var i = 0, l = data.length; i < l; i++) {
            var cur = data[i];
            var outer = $$('div');
            outer.style.marginLeft = pl + 'px';
            outer.style.marginRight = pr + 'px';
            outer.style.whiteSpace = 'nowrap';
            outer.style.overflow = 'hidden';
            form.appendChild(outer);
            if (cur.radio) {
                var ip = WCT.dom.CreateInputElement('radio', cur.radio);
                ip.id = id + cur.id;
                ip.value = cur.val;
                ip.style.marginTop = sir.outer_spacing_t + 'px';
                ip.style.marginRight = sir.outer_spacing_r + 'px';
                ip.style.marginBottom = sir.outer_spacing_b + 'px';
                ip.style.marginLeft = sir.outer_spacing_l + 'px';
                if (sir.w) ip.style.width = sir.w + 'px';
                if (sir.h) ip.style.height = sir.h + 'px';
                ip.style.verticalAlign = 'middle';
                outer.appendChild(ip);
                var la = $$('label');
                la.appendChild($$2(hdl.Trans(cur.txt)));
                la.setAttribute('for', id + cur.id);
                outer.appendChild(la)
            } else if (cur.area) {
                var ip = $$('textarea');
                ip.name = cur.area;
                ip.style.width = r.dim.w - pl - pr - 4 + 'px';
                var th = pr;
                var lh = skin.text ? skin.text.line_height || 0 : 0;
                th += lh * 2 + (Math.max(irh, lh) * 2) + lh / 3;
                ip.style.height = r.dim.h - th + 'px';
                if (skin.input) WCT.skin.ApplyTextFormats(ip, skin.input);
                outer.appendChild(ip)
            } else {
                outer.appendChild($$2(hdl.Trans(cur.txt)))
            }
        }
        WCT.event.hotkey.Suspend(hdl_id + '#' + this.id_, true);
        return true
    },
    on_button_: function(id, evt) {
        var cb = true;
        if (id.search(/submit$/) >= 0) {
            var form = $(this.hdl_id_ + '#' + this.id_ + '#form');
            if (form) {
                if (this.callback_) {
                    WCT.SetTimeout(Popup.ManagerFeedback.CheckResponse, 50, Popup.ManagerFeedback, [this.hdl_id_]);
                    this.enable_button_('submit', false);
                    this.enable_button_('cancel', false)
                }
                cb = false;
                form.submit()
            }
        }
        if (cb && this.callback_) {
            this.callback_.call(this.scope_)
        }
    }
});

function Panel(hdl_id, callback, scope) {
    this.hdl_id_ = hdl_id;
    this.callback_ = callback;
    this.scope_ = scope;
    var hdl = MANAGER.handler.Get(hdl_id);
    var skin = hdl.GetSkin('panel') || {};
    this.hor_ = skin.hor ? new Panel.standard(hdl_id, 'hor', skin, Panel.prototype.on_panel_, this) : null;
    this.vert_ = skin.vert ? new Panel.standard(hdl_id, 'vert', skin, Panel.prototype.on_panel_, this) : null;
    this.data_ = {};
    this.shown_ = false;
    this.ori_ = null;
    this.lesson_pause_ = false
};
Panel.ORI_MAP = {
    left: 'vert',
    right: 'vert',
    top: 'hor',
    bottom: 'hor'
};
Panel.prototype = (function() {
    function get_pnl_() {
        var ori = Panel.ORI_MAP[this.ori_] || '';
        return this[ori + '_'] || null
    };

    function exec_(cmd) {
        var d = this.data_;
        if (arguments.length == 3) {
            if (!d[cmd]) d[cmd] = {};
            d[cmd][arguments[1]] = WCT.DeepCopy(arguments[2])
        } else {
            d[cmd] = WCT.DeepCopy(arguments[1])
        }
        var p = get_pnl_.call(this);
        if (p) p.Exec(cmd, arguments[1], arguments[2])
    };

    function update_(pnl_id) {
        var p = this[pnl_id];
        if (!p) return;
        var d = this.data_;
        for (var cmd in d) {
            var v = d[cmd];
            var t = typeof v;
            if (t == 'object') {
                if (v == null || v.isArray) {
                    p.Exec(cmd, v)
                } else {
                    for (var s in v) {
                        p.Exec(cmd, s, v[s])
                    }
                }
            } else {
                p.Exec(cmd, v)
            }
        }
    };
    return {
        Destructor: function() {
            this.callback_ = null;
            this.scope_ = null;
            if (this.hor_) {
                this.hor_.Destructor();
                this.hor_ = null
            }
            if (this.vert_) {
                this.vert_.Destructor();
                this.vert_ = null
            }
            WCT.CleanupObject(this.data_);
            this.data_ = null
        },
        Resize: function(w, h) {
            if (!this.shown_) return null;
            var hdl = MANAGER.handler.Get(this.hdl_id_);
            var s = hdl.GetSkin('panel');
            var r = {
                x: 0,
                y: 0,
                w: w,
                h: h
            };
            switch (this.ori_) {
                case 'top':
                    r.h = s.hor.h;
                    break;
                case 'left':
                    r.w = s.vert.w;
                    break;
                case 'bottom':
                    r.y = h - s.hor.h;
                    r.h = s.hor.h;
                    break;
                case 'right':
                    r.x = w - s.vert.w;
                    r.w = s.vert.w;
                    break
            }
            var p = get_pnl_.call(this);
            var m = p ? p.Resize(w, h) : {
                w: 0,
                h: 0
            };
            r.w = Math.max(r.w, m.w);
            r.h = Math.max(r.h, m.h);
            return r
        },
        RefreshIE: function() {
            var p = get_pnl_.call(this);
            if (p) p.RefreshIE()
        },
        HandleOri: function(ev) {
            if (!ev.cmd || ev.cmd.search('orientation_toggle_') == -1) return;
            var o = ev.cmd.substr(19);
            var m = {
                top: 'bottom',
                bottom: 'top'
            };
            this.Show(m[o]);
            this.VisibleCommand('orientation_toggle_' + o, false);
            this.VisibleCommand('orientation_toggle_' + m[o], true)
        },
        Show: function(o) {
            var ori = Panel.ORI_MAP[o] + '_';
            if (!this[ori]) {
                if (this.hor_) {
                    o = 'top';
                    ori = 'hor_'
                } else if (this.vert_) {
                    o = 'left';
                    ori = 'vert_'
                } else {
                    return
                }
            }
            var d = this.data_;
            var p;
            if (this.ori_ == o) {
                return
            } else if (this.ori_ == null) {
                p = this[ori];
                this.ori_ = o;
                update_.call(this, ori);
                d.Move = o;
                p.Move(o);
                p.Show();
                var v = this.vert_ != null;
                var h = this.hor_ != null;
                exec_.call(this, 'EnableOrientation', 'left', v);
                exec_.call(this, 'EnableOrientation', 'right', v);
                exec_.call(this, 'EnableOrientation', 'top', h);
                exec_.call(this, 'EnableOrientation', 'bottom', h);
                exec_.call(this, 'EnableOrientation', 'float', false);
                this.shown_ = true
            } else {
                var act = this.ori_ + '_' + o;
                switch (act) {
                    case 'left_right':
                    case 'right_left':
                    case 'top_bottom':
                    case 'bottom_top':
                        p = get_pnl_.call(this);
                        exec_.call(this, 'Move', o);
                        break;
                    case 'left_top':
                    case 'left_bottom':
                    case 'right_top':
                    case 'right_bottom':
                    case 'top_left':
                    case 'top_right':
                    case 'bottom_left':
                    case 'bottom_right':
                        p = get_pnl_.call(this);
                        if (p) p.Hide();
                        p = this[ori];
                        update_.call(this, ori);
                        exec_.call(this, 'Move', o);
                        p.Show();
                        break
                }
                this.ori_ = o
            }
            exec_.call(this, 'ActiveOrientation', o);
            this.VisibleCommand('orientation_toggle_top', false);
            this.VisibleCommand('orientation_toggle_bottom', false)
        },
        Visible: function(v) {
            var p = get_pnl_.call(this);
            if (p) p[v ? 'Show' : 'Hide']()
        },
        Steps: function(s) {
            exec_.call(this, 'Steps', s)
        },
        EnableToc: function(e) {
            exec_.call(this, 'EnableToc', e)
        },
        VisibleToc: function(v) {
            exec_.call(this, 'VisibleToc', v)
        },
        VisibleProgress: function(v) {
            exec_.call(this, 'VisibleProgress', v)
        },
        EnableCommand: function(cmd, e) {
            exec_.call(this, 'EnableCommand', cmd, e)
        },
        ActiveCommand: function(cmd, a) {
            exec_.call(this, 'ActiveCommand', cmd, a)
        },
        VisibleCommand: function(cmd, vis) {
            exec_.call(this, 'VisibleCommand', cmd, vis)
        },
        SetBookStep: function(s) {
            var h = MANAGER.handler.Get(this.hdl_id_);
            var t = h.GetToc();
            var p = t.GetSlideOrderIdx('prev', s) != null;
            var n = t.GetSlideOrderIdx('next', s) != null;
            exec_.call(this, 'Step', s);
            exec_.call(this, 'EnableCommand', 'prev_chapter', p);
            exec_.call(this, 'EnableCommand', 'prev', s > 0);
            exec_.call(this, 'EnableCommand', 'next', s >= 0 && s + 1 < this.data_.Steps);
            exec_.call(this, 'EnableCommand', 'next_chapter', n)
        },
        PreventNavigation: function(val) {
            var h = MANAGER.handler.Get(this.hdl_id_);
            var t = h.GetToc && h.GetToc();
            if (!t) return;
            var c = h.GetCurrentSlide();
            var s = t.GetSlideOrderIdx('cur', c.uid);
            var p = t.GetSlideOrderIdx('prev', s) != null;
            var n = t.GetSlideOrderIdx('next', s) != null;
            exec_.call(this, 'EnableCommand', 'prev_chapter', !val && p);
            exec_.call(this, 'EnableCommand', 'prev', !val && s > 0);
            exec_.call(this, 'EnableCommand', 'next', !val && s >= 0 && s + 1 < this.data_.Steps);
            exec_.call(this, 'EnableCommand', 'next_chapter', !val && n);
            exec_.call(this, 'EnableToc', !val)
        },
        SetLessonStep: function(s, m) {
            exec_.call(this, 'Step', s);
            var hdl = MANAGER.handler.Get(this.hdl_id_);
            var dis = hdl && hdl.GetConfig('panel_nav_disabled') || false;
            if (dis) {
                exec_.call(this, 'VisibleCommand', 'prev', false);
                exec_.call(this, 'VisibleCommand', 'next', false);
                exec_.call(this, 'VisibleCommand', 'pause', false);
                exec_.call(this, 'VisibleCommand', 'play', false)
            } else {
                var d = m == 'demo' || m == 'pres' || m == 'guided';
                exec_.call(this, 'EnableCommand', 'prev', s > 0);
                exec_.call(this, 'EnableCommand', 'next', s >= 0 && s + 1 < this.data_.Steps);
                exec_.call(this, 'VisibleCommand', 'pause', d && !this.lesson_pause_);
                exec_.call(this, 'VisibleCommand', 'play', d && this.lesson_pause_)
            }
        },
        SetLessonPause: function(pause, m) {
            this.lesson_pause_ = pause;
            this.SetLessonStep(this.data_.Step, m)
        },
        VisibleTimeline: function(v) {
            exec_.call(this, 'VisibleTimeline', v)
        },
        VisibleTimelineText: function(v) {
            exec_.call(this, 'VisibleTimelineText', v)
        },
        SetTimelinePreloaded: function(s) {
            exec_.call(this, 'SetTimelinePreloaded', s)
        },
        SetTimelineText: function(t) {
            exec_.call(this, 'SetTimelineText', t)
        },
        SetTimelineTitles: function(t) {
            exec_.call(this, 'SetTimelineTitles', t)
        },
        SetTimelineVisibles: function(v) {
            exec_.call(this, 'SetTimelineVisibles', v)
        },
        SetTimelineJumpables: function(j) {
            exec_.call(this, 'SetTimelineJumpables', j)
        },
        SetAudioControls: function(muted, paused, stopped) {
            var m = BROWSER.MOBILE;
            exec_.call(this, 'VisibleCommand', 'audio_mute', m ? false : !muted);
            exec_.call(this, 'VisibleCommand', 'audio_unmute', m ? false : muted);
            exec_.call(this, 'VisibleCommand', 'audio_play', paused || stopped);
            exec_.call(this, 'VisibleCommand', 'audio_pause', !paused && !stopped)
        },
        SetHandlerCount: function(c) {
            exec_.call(this, 'SetHandlerCount', c)
        },
        LogoClickable: function(c) {
            exec_.call(this, 'LogoClickable', c)
        },
        LogoVisible: function(c) {
            exec_.call(this, 'LogoVisible', c)
        },
        SetStatusText: function(t) {
            exec_.call(this, 'SetStatusText', t)
        },
        GetControl: function(type) {
            var p = get_pnl_.call(this);
            return p ? p.GetControl(type, arguments[1]) : null
        },
        GetPanel: function() {
            return this.hor_ ? this.hor_ : (this.vert_ ? this.vert_ : null)
        },
        on_panel_: function(ev) {
            if (ev.ori) this.Show(ev.ori);
            this.HandleOri(ev);
            this.callback_.call(this.scope_, ev)
        }
    }
})();
Panel.standard = function(hdl_id, ori, skin, callback, scope) {
    this.hdl_id_ = hdl_id;
    this.ori_ = ori;
    this.skin_ = skin;
    this.callback_ = callback;
    this.scope_ = scope;
    this.dom_ = null;
    this.to_ = null;
    this.w_ = null;
    this.h_ = null;
    this.orig_w_ = null;
    this.orig_h_ = null;
    this.res_to_ = null;
    this.res_dc_ = null;
    var s = skin[ori] && skin[ori].groups || [];
    var c = [];
    var m = {
        prev_chapter: {
            id: -1,
            target: 'next_chapter'
        },
        next_chapter: {
            id: -1,
            target: 'prev_chapter'
        }
    };
    var hdl = MANAGER.handler.Get(this.hdl_id_);
    if (hdl.GetType() !== HANDLER.MODE.library) {
        m.prev = {
            id: -1,
            target: 'next'
        };
        m.next = {
            id: -1,
            target: 'prev'
        }
    }
    for (var i = 0, g = null, cnt = 0; g = s[i]; i++) {
        for (var j = 0, e = null; e = g.elements[j++];) {
            if (!Panel.controls[e.type]) continue;
            var id = e.type + (e.subtype ? '#' + e.subtype : '');
            var ctl = new Panel.controls[e.type](hdl_id, ori, e, id, Panel.standard.prototype.on_control_, this);
            ctl.ctl_type = e.type;
            ctl.ctl_subtype = e.subtype || null;
            ctl.ctl_count = cnt++;
            c.push(ctl);
            if (m[ctl.ctl_subtype]) m[ctl.ctl_subtype].id = c.length - 1
        }
    }
    if (hdl.GetContentInfo().rtl) {
        for (var k in m) {
            if (m[k].id >= 0 && m[m[k].target].id >= 0) {
                var el1 = c[m[k].id];
                var el2 = c[m[m[k].target].id];
                var tmp = WCT.DeepCopy(el1.skin_);
                el1.skin_ = WCT.DeepCopy(el2.skin_);
                el2.skin_ = WCT.DeepCopy(tmp);
                m[k].id = -1
            }
        }
    }
    this.controls_ = c;
    this.lm_ = new LayoutManager();
    this.lm_.FromPanelSkin(s, ori)
};
Panel.standard.DelayedResize = function(hdl_id) {
    var hdl = MANAGER.handler.Get(hdl_id);
    if (!hdl) return;
    hdl.Resize(null, true);
    var me = hdl.GetPanel();
    me = me && me.GetPanel() || null;
    if (!me || !me.res_dc_) return;
    for (var i = 0, c = null; c = me.res_dc_[i++];) {
        c.ctl.Visible(c.val, true)
    }
};
Panel.standard.prototype = (function() {
    function show_() {
        var s = this.skin_[this.ori_];
        if (!s) return;
        var p = {
            x: 0,
            y: 0,
            w: '100%',
            h: '100%'
        };
        if (this.ori_ == 'hor') {
            if (this.to_ == 'bottom') p.y = '-0';
            p.h = (s.h || 0)
        } else {
            if (this.to_ == 'right') p.x = '-0';
            p.w = (s.w || 0)
        }
        var div = $$('div');
        div.id = this.hdl_id_ + '#panel.' + this.ori_;
        WCT.skin.ApplyPosition(div, p);
        if (s.image) {
            var simg = WCT.DeepCopy(s.image);
            simg.repeat = this.ori_ == 'hor' ? 'x' : 'y';
            WCT.skin.ApplyBgImage(div, simg)
        }
        this.dom_ = div;
        var h = MANAGER.handler.Get(this.hdl_id_);
        var dom = h.GetDom();
        dom.appendChild(div);
        var ctls = this.controls_;
        for (var i = 0, c = null; c = ctls[i++];) {
            c.Show(div)
        }
    };

    function exec_(type, cmd) {
        var ctls = this.controls_;
        var vis = cmd == 'Visible';
        var res = false;
        var al = arguments.length;
        var a1 = arguments[2];
        var a2 = arguments[3];
        var lm = this.lm_;
        var dc = this.res_dc_ || [];
        for (var i = 0, c = null; c = ctls[i++];) {
            if (type && c.ctl_type != type || !c[cmd]) continue;
            var p = a2;
            if (al == 3) {
                p = a1
            } else if (a1 && c.ctl_subtype != a1) {
                continue
            }
            if (vis) {
                if (!c.Autosize()) lm.Visible(c.ctl_count, p);
                dc.push({
                    ctl: c,
                    val: p
                });
                c[cmd](p, false);
                res = true
            } else {
                c[cmd](p)
            }
        }
        if (res) {
            this.res_dc_ = dc;
            if (this.res_to_) WCT.ClearTimeout(this.res_to_);
            this.res_to_ = WCT.SetTimeout(Panel.standard.DelayedResize, 15, Panel.standard, [this.hdl_id_])
        }
    };

    function reset_ie_h_(h) {
        var d = this.dom_;
        if (d) d.style.height = h + 'px'
    };
    return {
        Destructor: function() {
            if (this.res_to_) {
                WCT.ClearTimeout(this.res_to_);
                this.res_to_ = null
            }
            this.res_dc_ = null;
            this.callback_ = null;
            this.scope_ = null;
            this.skin_ = null;
            if (this.dom_) {
                this.dom_.parentNode.removeChild(this.dom_);
                this.dom_ = null
            }
            if (this.lm_) {
                this.lm_.Destructor();
                this.lm_ = null
            }
            if (this.controls_) {
                var ctls = this.controls_;
                for (var i = ctls.length - 1; i >= 0; i--) {
                    ctls[i].Destructor();
                    ctls[i] = null
                }
                this.controls_ = null
            }
        },
        Resize: function() {
            var ret = null;
            var min = this.lm_.GetMinDim();
            var skn = this.skin_[this.ori_];
            min.w = !isNaN(skn.w) ? Math.min(skn.w, min.w) : min.w;
            min.h = !isNaN(skn.h) ? Math.min(skn.h, min.h) : min.h;
            if (arguments.length == 2) {
                this.orig_w_ = arguments[0];
                this.orig_h_ = arguments[1]
            }
            this.w_ = Math.max(this.orig_w_, min.w);
            this.h_ = Math.max(this.orig_h_, min.h);
            if (this.ori_ == 'hor') {
                this.dom_.style.width = this.w_ + 'px';
                ret = {
                    w: this.w_,
                    h: min.h
                }
            } else {
                this.dom_.style.height = this.h_ + 'px';
                ret = {
                    w: min.w,
                    h: this.h_
                }
            }
            if (this.w_ == null || this.h_ == null) return;
            var pos = this.lm_.Apply(this.w_, this.h_);
            var ctls = this.controls_;
            for (var i = 0, p = null; p = pos[i]; i++) {
                var idx = ctls.indexOfAtt(i, 'ctl_count')
                if (idx >= 0) ctls[idx].MoveTo(p.x, p.y, p.w, p.h)
            }
            return ret
        },
        RefreshIE: function() {
            var d = this.dom_;
            var h = parseInt(d.style.height);
            d.style.height = h + 1 + 'px';
            WCT.SetTimeout(reset_ie_h_, 1, this, [h])
        },
        Show: function() {
            if (!this.dom_) show_.call(this);
            if (this.dom_) this.dom_.style.display = 'block'
        },
        Hide: function() {
            if (this.dom_) this.dom_.style.display = 'none'
        },
        Exec: function(cmd) {
            var a1 = arguments[1];
            var a2 = arguments[2];
            switch (cmd) {
                case 'EnableOrientation':
                    exec_.call(this, 'orientation', 'Enabled', a1);
                    break;
                case 'ActiveOrientation':
                    exec_.call(this, 'orientation', 'Active', null, false);
                    exec_.call(this, 'orientation', 'Active', a1, true);
                    break;
                case 'Steps':
                    exec_.call(this, null, 'Steps', a1);
                    break;
                case 'Step':
                    exec_.call(this, null, 'Step', a1);
                    break;
                case 'Move':
                    this.Move(a1);
                    break;
                case 'EnableToc':
                    exec_.call(this, 'toc', 'Enabled', a1);
                    break;
                case 'VisibleToc':
                    exec_.call(this, 'toc', 'Visible', a1);
                    break;
                case 'VisibleProgress':
                    exec_.call(this, 'progress', 'Visible', a1);
                    break;
                case 'SetStatusText':
                    exec_.call(this, 'status', 'SetText', a1);
                    break;
                case 'EnableCommand':
                    exec_.call(this, 'control', 'Enabled', a1, a2);
                    break;
                case 'ActiveCommand':
                    exec_.call(this, 'control', 'Active', a1, a2);
                    break;
                case 'VisibleCommand':
                    exec_.call(this, 'control', 'Visible', a1, a2);
                    break;
                case 'SetHandlerCount':
                    exec_.call(this, 'control', 'SetHandlerCount', a1);
                    break;
                case 'LogoClickable':
                    exec_.call(this, 'logo', 'Enabled', a1);
                    break;
                case 'LogoVisible':
                    exec_.call(this, 'logo', 'Visible', a1);
                    break;
                case 'SetTimelineTitles':
                    exec_.call(this, 'timeline', 'SetTitles', a1);
                    break;
                case 'SetTimelineVisibles':
                    exec_.call(this, 'timeline', 'SetVisibles', a1);
                    break;
                case 'SetTimelineJumpables':
                    exec_.call(this, 'timeline', 'SetJumpables', a1);
                    break;
                case 'SetTimelinePreloaded':
                    exec_.call(this, 'timeline', 'SetPreloaded', a1);
                    break;
                case 'SetTimelineText':
                    exec_.call(this, 'timeline', 'SetText', a1);
                    break;
                case 'VisibleTimeline':
                    exec_.call(this, 'timeline', 'Visible', a1);
                    break;
                case 'VisibleTimelineText':
                    exec_.call(this, 'timeline', 'VisibleText', a1);
                    break;
                default:
                    throw new Error('Panel.standard.Exec - unknown cmd: ' + cmd);
                    break
            }
        },
        Move: function(pos) {
            var d = this.dom_;
            var cmd1 = null;
            var cmd2 = null;
            if (this.ori_ == 'hor' && (pos == 'top' || pos == 'bottom')) {
                cmd1 = 'top';
                cmd2 = 'bottom'
            } else if (this.ori_ == 'vert' && (pos == 'left' || pos == 'right')) {
                cmd1 = 'left';
                cmd2 = 'right'
            }
            if (cmd1) {
                this.to_ = pos;
                if (d) {
                    d.style[cmd1] = '';
                    d.style[cmd2] = '';
                    d.style[pos] = '0px'
                }
                exec_.call(this, null, 'Move', pos)
            }
        },
        GetControl: function(type) {
            var subtype = arguments[1] || '';
            var ctls = this.controls_;
            for (var i = 0, c = null; c = ctls[i++];) {
                if (c.ctl_type == type && (!subtype || c.ctl_subtype == subtype)) return c
            }
            return null
        },
        on_control_: function(ev) {
            this.callback_.call(this.scope_, ev)
        }
    }
})();
Panel.controls = function(hdl_id, ori, skin, id, callback, scope) {
    if (!arguments.length) return;
    this.hdl_id_ = hdl_id;
    this.ori_ = ori;
    this.skin_ = skin;
    this.id_ = id;
    this.callback_ = callback;
    this.scope_ = scope;
    this.state_ = {
        v: true,
        e: true,
        a: false
    };
    this.x_ = null;
    this.y_ = null;
    this.w_ = null;
    this.h_ = null;
    this.dom_id_ = hdl_id + '#panel.' + ori + '#' + id
};
Panel.controls.prototype = {
    Destructor: function() {
        var d = $(this.dom_id_);
        if (d) d.parentNode.removeChild(d);
        this.skin_ = null;
        this.callback_ = null;
        this.scope_ = null;
        this.state_ = null
    },
    GetDom: function() {
        return $(this.dom_id_)
    },
    Autosize: function() {
        return this.skin_ && this.skin_.autosize || false
    },
    Visible: function() {
        var v = arguments[0];
        var s = this.state_;
        if (typeof v == 'boolean' && (s.v != v || arguments[1])) {
            if (arguments[1] !== false) {
                var d = $(this.dom_id_);
                if (d) d.style.display = v ? 'block' : 'none'
            }
            s.v = v
        }
        return s.v
    },
    MoveTo: function(x, y, w, h) {
        if (!this.state_.v || this.x_ == x && this.y_ == y && this.w_ == w && this.h_ == h) return;
        var min_w = arguments[4] || 0;
        var min_h = arguments[5] || 0;
        this.x_ = x;
        this.y_ = y;
        this.w_ = w;
        this.h_ = h;
        this.move_to_(min_w, min_h)
    },
    move_to_: function(min_w, min_h) {
        var d = $(this.dom_id_);
        if (!d) return;
        var x = this.x_;
        var w = this.w_;
        var h = this.h_;
        if (w <= min_w || h <= min_h) {
            d.style.display = 'none';
            return
        }
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var rtl = hdl ? hdl.GetContentInfo().rtl : false;
        var left = 'left';
        var right = 'right';
        if (rtl) {
            left = 'right';
            right = 'left'
        }
        if (x < 0) {
            d.style[right] = -x + 'px';
            d.style[left] = ''
        } else {
            d.style[left] = x + 'px';
            d.style[right] = ''
        }
        d.style.top = this.y_ + 'px';
        d.style.width = w + 'px';
        d.style.height = h + 'px';
        d.style.display = 'block'
    }
};
Panel.controls.control = function() {
    Panel.controls.apply(this, arguments);
    this.cb_key_ = 'cmd'
};
Panel.controls.control.prototype = new Panel.controls;
WCT.ExtendObject(Panel.controls.control.prototype, {
    Destructor: function() {
        SKIN.control.Cleanup(this.dom_id_);
        Panel.controls.prototype.Destructor.call(this)
    },
    Show: function(dom) {
        var s = this.skin_;
        var i = this.dom_id_;
        var t = this.state_;
        var h = MANAGER.handler.Get(this.hdl_id_);
        var tt = null;
        if (s.tooltip) {
            tt = h.Trans(s.tooltip)
        }
        SKIN.control.Add({
            id: i,
            skin: s,
            dom: dom,
            onexec: this.on_exec_,
            scope: this,
            title: tt,
            visible: t.v,
            enabled: t.e,
            active: t.a,
            rtl: h.GetContentInfo().rtl
        });
        if (t.hcount != null) this.SetHandlerCount(t.hcount)
    },
    Visible: function() {
        var v = arguments[0];
        var t = this.state_;
        if (typeof v == 'boolean' && (t.v != v || arguments[1])) {
            if (arguments[1] !== false) SKIN.control.Visible(this.dom_id_, v);
            t.v = v
        }
        return t.v
    },
    Enabled: function() {
        var e = arguments[0];
        var t = this.state_;
        if (typeof e == 'boolean' && t.e != e) {
            SKIN.control.Enabled(this.dom_id_, e);
            t.e = e
        }
        return t.e
    },
    Active: function() {
        var a = arguments[0];
        var t = this.state_;
        if (typeof a == 'boolean' && t.a != a) {
            SKIN.control.Active(this.dom_id_, a);
            t.a = a
        }
        return t.a
    },
    SetHandlerCount: function(count) {
        if (this.id_ != 'control#exit') return;
        var d = $(this.dom_id_ + '#count');
        this.state_.hcount = count;
        if (count < 2) {
            if (d) d.parentNode.removeChild(d)
        } else if (d) {
            d.firstChild.nodeValue = count
        } else {
            var s = this.skin_;
            var c = SKIN.control.GetDom(this.dom_id_);
            if (s && s.badge && c) {
                var sb = WCT.DeepCopy(s.badge);
                sb.x = '-0';
                sb.y = 1;
                sb.border_style = 'solid';
                sb.border_width = 1;
                sb.padding_left = 2;
                sb.padding_right = 2;
                if (sb.font_size) sb.line_height = sb.font_size;
                d = $$('div');
                d.id = this.dom_id_ + '#count';
                WCT.skin.ApplyPosition(d, sb);
                WCT.skin.ApplyTextFormats(d, sb);
                WCT.skin.ApplyBorder(d, sb);
                WCT.skin.ApplyPadding(d, sb);
                d.appendChild($$2(count));
                c.appendChild(d)
            }
        }
    },
    MoveTo: function() {
        Panel.controls.prototype.MoveTo.apply(this, arguments);
        if (this.id_ == 'control#exit' && this.state_.hcount > 1) {
            var d = $(this.dom_id_ + '#count');
            if (!d) return;
            var h = MANAGER.handler.Get(this.hdl_id_);
            var r = h.GetContentInfo().rtl;
            var s = this.skin_.badge;
            var x = -(s.w >> 1);
            d.style[r ? 'left' : 'right'] = x + 'px';
            var y = -(s.h >> 1) + 1;
            y = Math.max(y, 1 - this.y_);
            d.style.top = y + 'px'
        }
    },
    move_to_: function(min_w, min_h) {
        var id = this.dom_id_;
        if (this.w_ <= min_w || this.h_ <= min_h) {
            SKIN.control.Visible(id, false)
        } else {
            SKIN.control.MoveTo(id, this.x_, this.y_);
            SKIN.control.Visible(id, true)
        }
    },
    on_exec_: function() {
        if (this.state_.d) return;
        var d = {};
        d[this.cb_key_] = this.id_.split('#').top();
        this.callback_.call(this.scope_, d)
    }
});
Panel.controls.logo = function() {
    Panel.controls.apply(this, arguments)
};
Panel.controls.logo.prototype = new Panel.controls;
(function() {
    function onclick_() {
        var d = {
            logo: 1
        };
        this.callback_.call(this.scope_, d)
    };
    WCT.ExtendObject(Panel.controls.logo.prototype, {
        Destructor: function() {
            var d = $(this.dom_id_);
            if (d) {
                d.onclick = null;
                d.parentNode.removeChild(d)
            }
            Panel.controls.prototype.Destructor.call(this)
        },
        Show: function(dom) {
            var d = $$('div');
            d.id = this.dom_id_;
            d.style.position = 'absolute';
            if (this.skin_.image) WCT.skin.ApplyBgImage(d, this.skin_.image);
            dom.appendChild(d)
        },
        Enabled: function(e) {
            var d = $(this.dom_id_);
            if (e) {
                d.style.cursor = 'pointer';
                d.onclick = onclick_.bind(this)
            } else {
                d.onclick = null;
                d.style.cursor = 'default'
            }
        }
    })
})();
Panel.controls.orientation = function() {
    Panel.controls.control.apply(this, arguments);
    this.cb_key_ = 'ori'
};
Panel.controls.orientation.prototype = new Panel.controls.control;
Panel.controls.orientation.prototype.Show = function(dom) {
    var h = MANAGER.handler.Get(this.hdl_id_);
    var f = h.GetConfig('panel_fixed');
    if (f) return;
    Panel.controls.control.prototype.Show.call(this, dom)
};
Panel.controls.progress = function() {
    Panel.controls.apply(this, arguments);
    this.step_ = null;
    this.steps_ = null
};
Panel.controls.progress.prototype = new Panel.controls;
WCT.ExtendObject(Panel.controls.progress.prototype, {
    Destructor: function() {
        SKIN.bar.Cleanup(this.dom_id_ + '#bar');
        Panel.controls.prototype.Destructor.call(this)
    },
    Show: function(dom) {
        var s = this.skin_;
        var i = this.dom_id_;
        var h = MANAGER.handler.Get(this.hdl_id_);
        var rtl = h.GetContentInfo().rtl;
        var d = $$('div');
        d.id = i;
        d.style.position = 'absolute';
        dom.appendChild(d);
        SKIN.bar.Add({
            id: i + '#bar',
            skin: s,
            dom: d,
            rtl: rtl
        });
        var t = $$('div');
        WCT.skin.ApplyTextFormats(t, s);
        t.style.position = 'absolute';
        t.style.top = s.bar_h + 2 + 'px';
        t.style.width = '100%';
        t.style.textAlign = 'center';
        if (rtl) t.style.direction = 'rtl';
        d.appendChild(t);
        if (!this.state_.v) d.style.display = 'none'
    },
    Step: function(s) {
        this.step_ = s;
        var steps = this.steps_;
        s = Math.min(s + 1, steps);
        var h = MANAGER.handler.Get(this.hdl_id_);
        var toc = h.GetToc();
        var th = toc.GetHidden();
        var thl = th.length;
        steps -= thl;
        var rCnt = 0;
        for (var i = 0; i < thl; i++) {
            if (th[i] < s) rCnt++
        }
        if (thl && th.indexOf(s) !== -1) s = '';
        if (s) SKIN.bar.Progress(this.dom_id_ + '#bar', steps > 0 ? s / steps : 0);
        if (s) s -= rCnt;
        var d = $(this.dom_id_);
        if (d) {
            var txt = (s || '-') + ' / ' + steps;
            WCT.SetNodeText(d.lastChild, txt);
            d.setAttribute('title', txt)
        }
    },
    Steps: function(s) {
        this.steps_ = s
    }
});
Panel.controls.status = function() {
    Panel.controls.apply(this, arguments)
};
Panel.controls.status.prototype = new Panel.controls;
WCT.ExtendObject(Panel.controls.status.prototype, {
    Show: function(dom) {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var rtl = hdl.GetContentInfo().rtl;
        var d = $$('div');
        d.id = this.dom_id_;
        WCT.skin.ApplyTextFormats(d, this.skin_);
        d.style.position = 'absolute';
        d.style.overflow = 'hidden';
        d.style.textOverflow = 'ellipsis';
        d.style.whiteSpace = 'nowrap';
        if (rtl) d.style.direction = 'rtl';
        WCT.dom.NotSelectable(d);
        dom.appendChild(d)
    },
    SetText: function(txt) {
        var d = $(this.dom_id_);
        if (d) {
            WCT.SetNodeText(d, txt);
            d.setAttribute('title', txt)
        }
    }
});
Panel.controls.timeline = function() {
    Panel.controls.apply(this, arguments);
    this.step_ = null;
    this.steps_ = null
};
Panel.controls.timeline.prototype = new Panel.controls;
Panel.controls.timeline.MIN_W = 49;
WCT.ExtendObject(Panel.controls.timeline.prototype, {
    Destructor: function() {
        SKIN.timeline.Cleanup(this.dom_id_);
        Panel.controls.prototype.Destructor.call(this)
    },
    Show: function(dom) {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var rtl = hdl.GetContentInfo().rtl;
        var d = SKIN.timeline.Add({
            id: this.dom_id_,
            skin: this.skin_,
            dom: dom,
            ori: this.ori_,
            steps: this.steps_,
            onexec: this.on_exec_,
            scope: this,
            rtl: rtl
        });
        d.style.display = 'none'
    },
    Step: function(step) {
        this.step_ = step;
        SKIN.timeline.Step(this.dom_id_, step + 1, arguments[1])
    },
    Steps: function(s) {
        this.steps_ = s
    },
    SetPreloaded: function(step) {
        SKIN.timeline.Preloaded(this.dom_id_, step + 1)
    },
    VisibleText: function(v) {
        this.state_.vt = v
    },
    SetText: function(txt) {
        if (this.state_.vt !== false) SKIN.timeline.SetText(this.dom_id_, txt)
    },
    SetTitles: function(tit) {
        SKIN.timeline.SetTitles(this.dom_id_, tit)
    },
    SetVisibles: function(vis) {
        SKIN.timeline.SetVisibles(this.dom_id_, vis)
    },
    SetJumpables: function(jmp) {
        SKIN.timeline.SetJumpables(this.dom_id_, jmp)
    },
    MoveTo: function(x, y, w, h) {
        Panel.controls.prototype.MoveTo.call(this, x, y, w, h, Panel.controls.timeline.MIN_W)
    },
    move_to_: function(min_w, min_h) {
        var id = this.dom_id_;
        if (this.w_ <= min_w || this.h_ <= min_h) {
            SKIN.timeline.Visible(id, false)
        } else {
            SKIN.timeline.MoveTo(id, this.x_, this.y_);
            SKIN.timeline.Resize(id, this.w_);
            SKIN.timeline.Visible(id, true)
        }
    },
    on_exec_: function(ctl_id) {
        id = Number(ctl_id.split('#').top());
        if (!isNaN(id)) this.callback_.call(this.scope_, {
            timeline: id - 1
        })
    }
});
Panel.controls.toc = function() {
    Panel.controls.apply(this, arguments);
    this.iframe_ = null;
    this.main_ = null;
    this.enabled_ = true;
    this.visible_ = true;
    this.step_ = null;
    this.pos_ = null;
    var my = Panel.controls.toc;
    var s = WCT.DeepCopy(this.skin_);
    s.h = my.H;
    s.border_width = 1;
    s.border_style = 'solid';
    s.border_color = '#999999';
    if (!s.font_size) s.font_size = my.FONT_SIZE;
    this.skin_ = s
};
Panel.controls.toc.prototype = new Panel.controls;
Panel.controls.toc.CELL_PADDING = 3;
Panel.controls.toc.FONT_SIZE = 12;
Panel.controls.toc.H = 16;
Panel.controls.toc.OPEN_MARGIN = 10;
Panel.controls.toc.MIN_W = 100;
WCT.ExtendObject(Panel.controls.toc.prototype, (function() {
    function on_catched_(evt, wnd) {
        var m = this.main_;
        if (!m || !m.open_) return;
        var t = evt.target;
        while (t && t.id && t.id.search(/toc$/) < 0) t = t.parentNode;
        if (!t || !t.id) {
            m.Colorize(false);
            m.Close(evt);
            m.Step(m.step_, true, false)
        }
    };
    return {
        Destructor: function() {
            MANAGER.StopEventObserving('mousedown', this.dom_id_ + '_1');
            MANAGER.StopEventObserving('mousedown', this.dom_id_ + '_2');
            if (this.iframe_) {
                this.iframe_.Destructor();
                this.iframe_ = null
            }
            if (this.main_) {
                this.main_.Destructor();
                this.main_ = null
            }
            Panel.controls.prototype.Destructor.call(this)
        },
        Show: function(dom) {
            if (this.ori_ != 'hor') return;
            var my = Panel.controls.toc;
            var s = this.skin_;
            var i = this.dom_id_;
            var f = new my.iframe(this.hdl_id_, this.dom_id_ + '#iframe', s);
            f.Create(dom);
            this.iframe_ = f;
            var m = new my.main(this, this.hdl_id_, this.dom_id_, s, this.pos_);
            m.Create(dom);
            this.main_ = m;
            var h = MANAGER.handler.Get(this.hdl_id_);
            var f = h.GetSlideRendererIFrame(0) || null;
            var w = f && f.contentWindow || null;
            MANAGER.ObserveEvent('mousedown', i + '_1', on_catched_, this);
            if (w) MANAGER.ObserveEvent('mousedown', i + '_2', on_catched_, this, w)
        },
        Visible: function() {
            if (typeof arguments[0] == 'boolean') this.visible_ = arguments[0];
            var v = this.visible_ && typeof this.w_ == 'number' && this.w_ >= Panel.controls.toc.MIN_W;
            var s = this.state_;
            if (v != s.v) {
                s.v = v;
                if (this.main_) this.main_.SetVisible(v);
                if (this.iframe_) this.iframe_.SetVisible(v)
            }
            return v
        },
        Enabled: function() {
            var e = arguments[0];
            if (typeof e == 'boolean') {
                this.enabled_ = e;
                if (this.main_) this.main_.SetEnabled(e)
            }
            return this.enabled_
        },
        MoveTo: function(x, y, w, h) {
            if (this.x_ == x && this.y_ == y && this.w_ == w && this.h_ == h) return;
            this.x_ = x;
            this.y_ = y;
            this.w_ = w;
            this.h_ = h;
            var f = this.iframe_;
            var d = this.main_;
            if (!f || !d) return;
            if (!this.Visible()) return;
            d.MoveTo(x, y, w, h);
            f.MoveTo(x, y, w, h)
        },
        Move: function(ori) {
            this.pos_ = ori;
            if (this.main_) this.main_.Move(ori)
        },
        Step: function(sidx) {
            WCT.dom.IOSOpacitySwitch(this.main_.GetDom());
            var m = this.main_;
            if (!m || sidx == null) return;
            var h = MANAGER.handler.Get(this.hdl_id_);
            var t = h.GetToc();
            var idx = t.GetSlideListIdx(sidx);
            this.step_ = sidx;
            if (idx == null) return;
            m.UpdateVisited();
            m.Step(idx)
        },
        GetDom: function() {
            return null
        },
        GetMain: function() {
            return this.main_
        },
        GetIFrame: function() {
            return this.iframe_
        }
    }
})());
Panel.controls.toc.main = function(par, hdl_id, dom_id, skin, pos) {
    this.par_ = par;
    this.hdl_id_ = hdl_id;
    this.dom_id_ = dom_id;
    this.skin_ = skin;
    this.pos_ = pos;
    this.rows_ = null;
    this.rmap_ = null;
    this.open_ = false;
    this.enabled_ = true;
    this.open_h_ = 0;
    this.cell_h_ = 0;
    this.top_ = 0;
    this.height_ = 0;
    this.step_ = null;
    this.hover_ = null;
    this.to_anim_ = null;
    this.toc_opacity_ = null
};
Panel.controls.toc.main.ANIM_INT = 50;
Panel.controls.toc.main.ANIM_SPEED = 200;
Panel.controls.toc.main.Animate = function(hdl_id, dom_id, cur, end, d) {
    var dom = $(dom_id + '#m');
    if (!dom) return;
    var now = Math[d > 0 ? 'min' : 'max'](cur + d, end);
    dom.style.top = now + 'px';
    if (now != end) {
        var hdl = MANAGER.handler.Get(hdl_id);
        var pnl = hdl && hdl.GetPanel() || null;
        var toc = pnl && pnl.GetControl('toc') || null;
        var me = toc.GetMain();
        if (me) {
            cur += d;
            var tocmain = Panel.controls.toc.main;
            me.to_anim_ = WCT.SetTimeout(tocmain.Animate, tocmain.ANIM_INT, tocmain, [hdl_id, dom_id, cur, end, d])
        }
    }
};
Panel.controls.toc.main.prototype = (function() {
    function convert_(s, fn) {
        var f = WCT[fn] || null;
        if (f) {
            var r = [];
            var c = null;
            s = s.split('.');
            while (c = s.shift()) {
                var n = Number(c);
                r.push(f(n))
            }
            return r.join('.')
        }
        return s
    };

    function generate_order_(chap, nbring) {
        switch (nbring) {
            case 'none':
                return '';
                break;
            case '1.':
                return chap.join('.') + '.';
                break;
            case 'I.':
                return convert_(chap.join('.'), 'ArabicToRoman') + '.';
                break;
            case 'i.':
                return convert_(chap.join('.'), 'ArabicToRoman').toLowerCase() + '.';
                break;
            case 'A.':
                return convert_(chap.join('.'), 'ArabicToLetters') + '.';
                break;
            case 'a.':
                return convert_(chap.join('.'), 'ArabicToLetters').toLowerCase() + '.';
                break;
            default:
                Log('Panel.toc.generate_order_ - unsupported numbering: ' + nbring)
        }
        return ''
    };

    function create_content_(dom) {
        var id = this.dom_id_ + '#m#';
        var s = this.skin_;
        var h = MANAGER.handler.Get(this.hdl_id_);
        var t = h.GetToc();
        var l = t.GetList();
        var rclass = Panel.controls.toc.row;
        var rows = [];
        var map = {};
        var rlen = 0;
        var num = 1;
        var nbr = h.GetConfig('panel_toc_numbering');
        var cd = h.GetConfig('book_show_cdoc');
        var pj = h.GetConfig('book_show_project');
        var bg = h.GetConfig('book_show_book_group');
        var chap = [0];
        var lvl = [];
        for (var i = 0, c = null; c = l[i]; i++) {
            if (!bg && c.level == 0) continue;
            var is_c = false;
            if (c.tclass != 'slide') {
                var n = l[i + 1];
                is_c = n && n.level > c.level;
                if (c.tclass == 'cdoc') {
                    if (!cd) is_c = true
                } else if (c.tclass != 'project' && !bg) {
                    is_c = true
                }
            }
            while (lvl.length && lvl.top() >= c.level) {
                lvl.pop();
                chap.pop()
            }
            chap[chap.length - 1]++;
            var ord = generate_order_(chap, nbr);
            var tit = ord + ' ' + c.caption;
            var vis = t.IsVisited(c.tclass, c.uid);
            var r = new rclass(dom, id + i, s, tit, [ord, c.caption, '', num], vis, is_c, c.hidden_in_toc, i);
            rows.push(r);
            map[i] = rlen++;
            if (c.tclass == 'slide') {
                if (!c.hidden_in_toc) num++
            } else {
                if (!lvl.length || lvl.top() < c.level) {
                    lvl.push(c.level);
                    chap.push(0)
                }
                if (cd && c.tclass == 'cdoc' || pj && c.tclass == 'project' || bg && (c.tclass == 'book' || c.tclass == 'group')) {
                    num++
                }
            }
        }
        this.rows_ = rows;
        this.rmap_ = map
    };

    function process_evt_(evt) {
        evt = WCT.event.Standardize(evt);
        var d = evt.target;
        while (d && d.id && d.id.search(/toc$/) < 0) d = d.parentNode;
        if (!d || !d.id) return null;
        var hdl_id = d.id.split('#')[0];
        var hdl = MANAGER.handler.Get(hdl_id);
        var pnl = hdl && hdl.GetPanel() || null;
        var toc = pnl && pnl.GetControl('toc') || null;
        var me = toc && toc.GetMain() || null;
        return me ? {
            id: evt.target.id,
            me: me,
            toc: hdl.GetToc()
        } : null
    };

    function on_click_(evt) {
        var d = process_evt_(evt);
        if (!d || !d.me.enabled_) return;
        if (d.me.open_) {
            d.me.Colorize(false);
            d.me.Close();
            d.me.Step(d.me.step_, true, false);
            var id = d.id.split('#');
            if (id.length > 1 && d.toc) {
                id = Number(id[id.length - 2]);
                if (!isNaN(id)) {
                    var idx = d.toc.GetSlideOrderIdx('cur', id, 'list_idx');
                    var par = d.me.par_;
                    if (idx != null) par.callback_.call(par.scope_, {
                        toc: idx
                    })
                }
            }
        } else {
            d.me.Open();
            d.me.Colorize(true)
        }
    };

    function on_mouseover_(evt) {
        var d = process_evt_(evt);
        if (!d || !d.me.open_) return;
        var id = d.id.split('#');
        if (id.length > 1) {
            id = Number(id[id.length - 2]);
            if (!isNaN(id)) d.me.Colorize(true, id)
        }
    };

    function on_mouseout_(evt) {
        var d = process_evt_(evt);
        if (!d || !d.me.open_) return;
        d.me.Colorize(true)
    };

    function scrollbars_(show) {
        for (var i = 0, r = null; r = this.rows_[i]; i++) {
            r.Prepare4Scrollbar(show)
        }
        var d = $(this.dom_id_);
        if (d) d.style.overflowY = show ? 'scroll' : 'hidden'
    };
    return {
        Destructor: function() {
            if (this.to_anim_) {
                WCT.ClearTimeout(this.to_anim_);
                this.to_anim_ = null
            }
            this.par_ = null;
            this.skin_ = null;
            WCT.CleanupObject(this.rmap_);
            this.rmap_ = null;
            if (this.rows_) {
                for (var i = this.rows_.length - 1; i >= 0; i--) {
                    this.rows_[i].Destructor();
                    this.rows_[i] = null
                }
                this.rows_ = null
            }
            var d = $(this.dom_id_);
            if (d) {
                d.onclick = null;
                d.onmouseover = null;
                d.onmouseout = null;
                d.parentNode.removeChild(d)
            }
        },
        Create: function(dom) {
            var s = this.skin_;
            var d = $$('div');
            d.id = this.dom_id_;
            WCT.skin.ApplyBorder(d, s);
            WCT.skin.ApplyTextFormats(d, s);
            d.style.position = 'absolute';
            d.style.cursor = 'pointer';
            d.style.overflow = 'hidden';
            d.onclick = on_click_;
            d.onmouseover = on_mouseover_;
            d.onmouseout = on_mouseout_;
            dom.appendChild(d);
            var m = $$('div');
            m.id = this.dom_id_ + '#m';
            WCT.skin.ApplyTextFormats(m, s);
            m.style.position = 'absolute';
            m.style.left = '0px';
            m.style.top = '0px';
            d.appendChild(m);
            create_content_.call(this, m)
        },
        MoveTo: function(x, y, w, h) {
            this.Close();
            var hdl = MANAGER.handler.Get(this.hdl_id_);
            var rtl = hdl ? hdl.GetContentInfo().rtl : false;
            var left = 'left';
            var right = 'right';
            if (rtl) {
                left = 'right';
                right = 'left'
            }
            var s = this.skin_;
            if (s.border_width) {
                w -= s.border_width * 2
            }
            var d = $(this.dom_id_);
            if (d) {
                if (x < 0) {
                    d.style[right] = -x + 'px';
                    d.style[left] = ''
                } else {
                    d.style[left] = x + 'px';
                    d.style[right] = ''
                }
                d.style.top = y + 'px';
                d.style.width = w + 'px';
                d.style.height = h + 'px'
            }
            this.top_ = y;
            this.height_ = h;
            var r = this.rows_;
            if (!r) return;
            var cw = [
                [],
                [],
                [],
                []
            ];
            var rl = 0;
            for (var c = null; c = r[rl]; rl++) {
                var crw = c.GetCellWidths();
                cw[0].push(crw[0]);
                cw[1].push(crw[1]);
                cw[2].push(crw[2]);
                cw[3].push(crw[3])
            }
            var cp = Panel.controls.toc.CELL_PADDING * 2;
            cw[0] = Math.max(cw[0].max() - cp, 0);
            cw[2] = Math.max(cw[2].max() - cp, 0);
            cw[3] = Math.max(cw[3].max() - cp, 0);
            cw[1] = Math.max(w - cw[0] - cw[2] - cw[3] - cp * 4, 0);
            var hm = Math.max(s.font_size, h);
            var fh = hm * rl;
            this.cell_h_ = hm;
            this.open_h_ = fh;
            d = $(this.dom_id_ + '#m');
            d.style.width = w + 'px';
            d.style.height = fh + 'px';
            for (var i = 0, c = null; c = r[i]; i++) {
                c.SetCellWidths(cw);
                c.SetCellHeights(hm)
            }
        },
        SetVisible: function(v) {
            var d = $(this.dom_id_);
            if (d) d.style.display = v ? 'block' : 'none'
        },
        SetEnabled: function(e) {
            this.enabled_ = e
        },
        GetDom: function() {
            return $(this.dom_id_)
        },
        UpdateVisited: function() {
            var h = MANAGER.handler.Get(this.hdl_id_);
            var t = h.GetToc();
            var r = this.rows_;
            var m = this.rmap_;
            var v = t.GetVisited();
            for (var i = 0, c = null; c = v[i]; i++) {
                var itm = t.GetListItems(c.tclass, c.uid);
                for (var j = 0, it = null; it = itm[j]; j++) {
                    var p = m[it.list_idx];
                    if (p != null && r[p]) r[p].SetVisited()
                }
            }
        },
        Step: function(s) {
            if (this.to_anim_) {
                WCT.ClearTimeout(this.to_anim_);
                this.to_anim_ = null
            }
            if (this.step_ != s || arguments[1]) {
                var c = this.step_ != null ? this.rmap_[this.step_] : 0;
                var n = this.rmap_[s];
                this.step_ = s;
                var h = MANAGER.handler.Get(this.hdl_id_);
                var a = h.GetConfig('panel_toc_animation');
                var pt = 0;
                var ph = 0;
                var sme = this.skin_.menu_entry;
                if (sme) {
                    ph = WCT.skin.GetPaddingHeight(sme);
                    pt = sme.padding_top || 0
                }
                var nh = (-this.cell_h_ - ph) * n - pt;
                if (arguments[2] === false || !a) {
                    var d = $(this.dom_id_ + '#m');
                    if (d) d.style.top = nh + 'px'
                } else {
                    var oh = -this.cell_h_ * c;
                    var d = (nh - oh) / Panel.controls.toc.main.ANIM_SPEED * Panel.controls.toc.main.ANIM_INT;
                    var tocmain = Panel.controls.toc.main;
                    this.to_anim_ = WCT.SetTimeout(tocmain.Animate, tocmain.ANIM_INT, tocmain, [this.hdl_id_, this.dom_id_, oh, nh, d])
                }
            }
        },
        Move: function(ori) {
            this.pos_ = ori
        },
        Open: function() {
            if (this.open_) return;
            this.open_ = true;
            var d = $(this.dom_id_);
            if (!d) return;
            var y = this.top_;
            var h = this.open_h_;
            var rows = this.rows_;
            var hidCnt = 0;
            for (var i = 0, l = rows.length; i < l; i++) {
                var rw = rows[i];
                var rh = rw.GetNumber() !== this.step_ ? rw.GetHidden() : false;
                rw.SetHidden(rh);
                if (rh) hidCnt++
            }
            h -= hidCnt * this.height_;
            var t = WCT.dom.GetPosition(d).top || 0;
            var scroll = false;
            var mar = Panel.controls.toc.OPEN_MARGIN;
            if (this.pos_ == 'top') {
                var wh = WCT.dom.GetWindowHeight();
                if (t + h + mar > wh) {
                    h = wh - t - mar;
                    scroll = true
                }
            } else {
                if (t + this.height_ - mar < h) {
                    h = t + this.height_ - mar;
                    scroll = true
                }
                y += this.height_ - h;
                d.style.top = y + 'px'
            }
            d.style.height = h + 'px';
            d.firstChild.style.top = '0px';
            if (PLATFORM.IOS) d.firstChild.style.height = h + 'px';
            if (scroll) {
                scrollbars_.call(this, true);
                var r = $(this.dom_id_ + '#m#' + this.step_);
                if (r) r.scrollIntoView(true)
            }
            var fr = this.par_.GetIFrame();
            fr.MoveTo(null, y, null, h);
            WCT.dom.IOSOpacitySwitch(d)
        },
        Close: function() {
            if (!this.open_) return;
            this.open_ = false;
            var rows = this.rows_;
            for (var i = 0, l = rows.length; i < l; i++) {
                rows[i].SetHidden(false)
            }
            var d = $(this.dom_id_);
            if (!d) return;
            d.style.height = this.height_ + 'px';
            d.scrollTop = '0px';
            if (PLATFORM.IOS) d.firstChild.style.height = this.height_ + 'px';
            if (this.pos_ == 'bottom') {
                d.style.top = this.top_ + 'px'
            }
            scrollbars_.call(this, false);
            var s = this.skin_;
            var bw2 = s.border_width ? s.border_width * 2 : 0;
            var fr = this.par_.GetIFrame();
            fr.MoveTo(null, this.top_, null, s.h + bw2)
        },
        Colorize: function(c) {
            var h = arguments[1];
            if (this.hover_ != null) {
                if (typeof h != 'number' || this.hover_ != h) {
                    var i = this.rmap_[this.hover_];
                    var r = this.rows_[i];
                    if (r) r.SetHover(false)
                }
                this.hover_ = null
            }
            if (typeof h == 'number') {
                var i = this.rmap_[h];
                var r = this.rows_[i];
                if (r) r.SetHover(true);
                this.hover_ = h
            }
            if (this.step_ != null) {
                var i = this.rmap_[this.step_];
                var r = this.rows_[i];
                if (r) r.SetActive(c)
            }
        }
    }
})();
Panel.controls.toc.iframe = function(hdl_id, dom_id, skin) {
    this.hdl_id_ = hdl_id;
    this.dom_id_ = dom_id;
    this.skin_ = skin
};
Panel.controls.toc.iframe.prototype = {
    Destructor: function() {
        var f = $(this.dom_id_);
        if (f) f.parentNode.removeChild(f);
        this.skin_ = null
    },
    Create: function(dom) {
        var s = this.skin_;
        var f = WCT.iframe.Create();
        f.id = this.dom_id_;
        WCT.skin.ApplyBorder(f, s);
        f.style.height = (s.h || 0) + 'px';
        f.style.width = (s.w || 0) + 'px';
        f.style.borderColor = 'transparent';
        f.style.backgroundColor = '#FFFFFF';
        f.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=10)';
        f.style.opacity = '0.1';
        dom.appendChild(f)
    },
    MoveTo: function(x, y, w, h) {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var rtl = hdl ? hdl.GetContentInfo().rtl : false;
        var left = 'left';
        var right = 'right';
        if (rtl) {
            left = 'right';
            right = 'left'
        }
        var d = $(this.dom_id_);
        if (d) {
            if (x != null) {
                if (x < 0) {
                    d.style[right] = -x + 'px';
                    d.style[left] = ''
                } else {
                    d.style[left] = x + 'px';
                    d.style[right] = ''
                }
            }
            if (y != null) d.style.top = y + 'px';
            if (w != null) d.style.width = w + 'px';
            if (h != null) d.style.height = h + 'px';
            WCT.dom.IOSOpacitySwitch(d)
        }
    },
    SetVisible: function(v) {
        var d = $(this.dom_id_);
        if (d) d.style.display = v ? 'block' : 'none'
    }
};
Panel.controls.toc.row = function(dom, id, skin, tit, cells, vis, is_c) {
    var hidden = arguments[7] || false;
    var row = $$('div');
    row.id = id;
    if (is_c) row.style.fontWeight = 'bold';
    row.onclick = function() {};
    row.setAttribute('title', tit);
    row.style.clear = 'both';
    row.style.overflow = 'hidden';
    dom.appendChild(row);
    id += '#';
    var bcell = $$('div');
    bcell.setAttribute('title', tit);
    bcell.style.styleFloat = 'left';
    bcell.style.cssFloat = 'left';
    bcell.style.overflow = 'hidden';
    bcell.style.padding = '0px ' + Panel.controls.toc.CELL_PADDING + 'px';
    var cell = bcell.cloneNode(0);
    cell.id = id + 0;
    if (!hidden) cell.appendChild($$2(cells[0]));
    row.appendChild(cell);
    cell = bcell.cloneNode(0);
    cell.id = id + 1;
    cell.style.textOverflow = 'ellipsis';
    cell.style.whiteSpace = 'nowrap';
    cell.appendChild($$2(cells[1]));
    row.appendChild(cell);
    var w = (skin.image_v && skin.image_v.w || 0) + 'px';
    cell = bcell.cloneNode(0);
    cell.id = id + 2;
    cell.style.width = w;
    vis && WCT.skin.ApplyBgImage(cell, skin.image_v);
    cell.appendChild($$2(cells[2]));
    row.appendChild(cell);
    cell = bcell.cloneNode(0);
    cell.id = id + 3;
    cell.style.textAlign = 'right';
    if (!hidden) cell.appendChild($$2(cells[3]));
    row.appendChild(cell);
    this.skin_ = skin;
    this.dom_ = row;
    this.w1_ = null;
    this._number = arguments[8];
    this._hidden_in_toc = hidden
};
Panel.controls.toc.row.prototype = (function() {
    function set_prop_(val, suff) {
        var d = this.dom_;
        if (!d) return;
        var s = this.skin_;
        var tc = s.text_color || '#000000';
        var bc = s.background_color || '#FFFFFF';
        if (val) {
            if (s['text_color_' + suff]) tc = s['text_color_' + suff];
            if (s['background_color_' + suff]) bc = s['background_color_' + suff]
        }
        d.style.color = tc;
        d.style.backgroundColor = bc
    };
    return {
        Destructor: function() {
            this.skin_ = null;
            this.dom_ = null
        },
        SetVisited: function(v) {
            var d = this.dom_ && this.dom_.childNodes || null;
            if (d) WCT.skin.ApplyBgImage(d[2], this.skin_.image_v)
        },
        SetActive: function(a) {
            set_prop_.call(this, a, 'a')
        },
        SetHover: function(h) {
            set_prop_.call(this, h, 'h')
        },
        SetHidden: function(val) {
            var d = this.dom_;
            if (d) d.style.display = val ? 'none' : ''
        },
        GetHidden: function() {
            return this._hidden_in_toc
        },
        GetNumber: function() {
            return this._number
        },
        Prepare4Scrollbar: function(b) {
            var d = this.dom_ && this.dom_.childNodes || null;
            if (d) {
                var w = this.w1_;
                if (b) w -= WCT.dom.GetScrollbarWidth();
                d[1].style.width = w + 'px'
            }
        },
        SetCellWidths: function(w) {
            var d = this.dom_ && this.dom_.childNodes || null;
            if (d) {
                this.w1_ = w[1];
                d[0].style.width = w[0] + 'px';
                d[1].style.width = w[1] + 'px';
                d[2].style.width = w[2] + 'px';
                d[3].style.width = w[3] + 'px'
            }
        },
        SetCellHeights: function(h) {
            var d = this.dom_;
            if (!d) return;
            h += 'px';
            d.style.height = h;
            d = d.childNodes;
            if (d) {
                d[0].style.height = h;
                d[1].style.height = h;
                d[2].style.height = h;
                d[3].style.height = h;
                d[0].style.lineHeight = h;
                d[1].style.lineHeight = h;
                d[3].style.lineHeight = h
            }
        },
        GetCellWidths: function() {
            var d = this.dom_ && this.dom_.childNodes || null;
            return d ? [d[0].offsetWidth, d[1].offsetWidth, d[2].offsetWidth, d[3].offsetWidth] : [0, 0, 0, 0]
        }
    }
})();

function Profile(hdl_uid, cb) {
    var hdl = MANAGER.handler.Get(hdl_uid);
    this.hdl_uid_ = hdl_uid;
    this.cb_ = cb;
    this.uid_ = hdl_uid + '#profile';
    this.skin_ = hdl.GetSkin('profile');
    this.fader_ = null;
    this.tabs_ = {};
    this.tab_active_ = null;
    this.dnd_ = null
};
Profile.STYLES = {
    header_padding_l: 5,
    header_padding_r: 5,
    tabs_margin_t: 10,
    tabs_margin_b: 30,
    tabs_padding_l: 5,
    tabs_padding_r: 5,
    content_margin_l: 5,
    content_margin_r: 5,
    content_margin_t: 5,
    content_margin_b: 5,
    tab_margin_l: 1,
    tab_margin_r: 1,
    tab_margin_t: 0,
    tab_margin_b: 2,
    tab_padding_l: 5,
    tab_padding_r: 5,
    tab_border_l: 1,
    tab_border_r: 1
};
Profile.prototype = (function() {
    function on_close_() {
        if (this.cb_) {
            var hdl = MANAGER.handler.Get(this.hdl_uid_);
            if (hdl) this.cb_.call(hdl, 'close')
        }
    };

    function on_event_(evt) {
        evt = WCT.event.Standardize(evt);
        var hdl_id = evt.target.id.substr(0, evt.target.id.indexOf('#'));
        var hdl = MANAGER.handler.Get(hdl_id);
        var me = hdl && hdl.GetProfile() || null;
        if (!me) return;
        if (evt.targetName == 'a' && evt.target.id.indexOf(me.uid_ + '#tabs#') >= 0) {
            handle_tab_event_.call(me, evt)
        }
    };

    function handle_tab_event_(evt) {
        var id = evt.target.id.split('#').top();
        if (id != this.tab_active_) {
            if (evt.type == 'click') {
                select_.call(this, id)
            } else {
                var s = this.skin_.tab;
                var m = evt.type == 'mouseover' ? '_h' : '';
                WCT.skin.ApplyBgImage(evt.target, s['image' + m] || s.image);
                if (s['text_color' + m] && s.text_color) evt.target.style.color = s['text_color' + m]
            }
        }
    };

    function select_(tab) {
        var u = this.uid_;
        var t = $(u + '#tabs#' + tab);
        var c = $(u + '#content');
        if (!t || !c || !this.tabs_[tab]) return;
        var s = this.skin_.tab;
        if (this.tab_active_) {
            var a = $(u + '#tabs#' + this.tab_active_);
            if (a) {
                WCT.skin.ApplyBgImage(a, s.image);
                if (s.text_color) a.style.color = s.text_color
            }
            if (this.tabs_[this.tab_active_]) this.tabs_[this.tab_active_].RemoveContent()
        }
        this.tab_active_ = tab;
        WCT.skin.ApplyBgImage(t, s.image_a || s.image);
        if (s.text_color_a && s.text_color) t.style.color = s.text_color_a;
        this.tabs_[tab].ShowContent(c)
    };

    function on_tab_(tab, data) {
        if (this.cb_) {
            var hdl = MANAGER.handler.Get(this.hdl_uid_);
            if (hdl) this.cb_.call(hdl, tab, data)
        }
    };
    return {
        Destructor: function() {
            if (this.dnd_) {
                this.dnd_.Destructor();
                this.dnd_ = null
            }
            SKIN.control.Cleanup(this.uid_ + '#header#exit');
            if (this.tabs_) {
                for (var id in this.tabs_) {
                    this.tabs_[id].Destructor();
                    delete this.tabs_[id]
                }
                this.tabs_ = null
            }
            var m = $(this.uid_);
            if (m) {
                m.onmouseover = null;
                m.onmouseout = null;
                m.onclick = null;
                m.parentNode.style.overflow = 'hidden';
                m.parentNode.removeChild(m)
            }
            if (this.fader_) {
                this.fader_.Destructor();
                this.fader_ = null
            }
            this.hdl_uid_ = null;
            this.cb_ = null;
            this.skin_ = null
        },
        GetConfig: function(cfg) {
            return MANAGER.handler.Get(this.hdl_uid_).GetConfig(cfg)
        },
        Trans: function(key) {
            return MANAGER.handler.Get(this.hdl_uid_).Trans(key)
        },
        Enable: function() {
            var tid = this.uid_ + '#tabs#';
            var cid = this.uid_ + '#content#';
            var hdl = MANAGER.handler.Get(this.hdl_uid_);
            var rtl = hdl.GetContentInfo().rtl;
            for (var i = 0, l = arguments.length; i < l; i++) {
                if (Profile[arguments[i]]) {
                    this.tabs_[arguments[i]] = new Profile[arguments[i]](this, tid, cid, on_tab_, rtl)
                }
            }
        },
        GetTab: function(tab) {
            return this.tabs_[tab]
        },
        GetSkin: function() {
            return this.skin_
        },
        GetContentH: function() {
            var s = this.skin_;
            var p = Profile.STYLES;
            var h = (s.header.h || 0) + (s.tab.h || 0) + p.tabs_margin_t + p.tabs_margin_b + p.content_margin_t + p.content_margin_b;
            return Math.max((s.h || 0) - h, 0)
        },
        Configure: function(tab, conf) {
            if (this.tabs_[tab]) this.tabs_[tab].Configure(conf)
        },
        Show: function(cur_tab, dom) {
            var s = this.skin_;
            if (!s || !s.header || !s.exit || !s.content || !s.tab) return;
            var f = new WCT.Fader(this.uid_ + '#fader');
            f.Create(dom);
            this.fader_ = f;
            var m = $$('div');
            m.id = this.uid_;
            WCT.skin.ApplyPosition(m, s);
            WCT.skin.ApplyTextFormats(m, s);
            WCT.skin.ApplyBorder(m, s);
            m.style.overflow = 'hidden';
            m.style.zIndex = '1';
            dom.appendChild(m);
            dom.style.overflow = 'auto';
            m.onmouseover = on_event_;
            m.onmouseout = on_event_;
            m.onclick = on_event_;
            var fd = f.GetDim();
            var fw = fd.w;
            var fh = fd.h;
            var mw = s.w || m.offsetWidth;
            var mh = s.h || m.offsetHeight;
            m.style.left = Math.max(0, (fw - mw) >> 1) + 'px';
            m.style.top = Math.max(0, (fh - mh) >> 2) + 'px';
            var profs = Profile.STYLES;
            var h = $$('div');
            h.id = this.uid_ + '#header';
            WCT.skin.ApplyTextFormats(h, s.header);
            WCT.skin.ApplyBorder(h, s.header);
            h.style.overflow = 'hidden';
            h.style.textOverflow = 'ellipsis';
            h.style.whiteSpace = 'nowrap';
            h.style.paddingLeft = profs.header_padding_l + 'px';
            h.style.paddingRight = profs.header_padding_r + 'px';
            if (s.header.h) {
                h.style.height = s.header.h + 'px';
                h.style.lineHeight = s.header.h + 'px'
            }
            m.appendChild(h);
            var hdl = MANAGER.handler.Get(this.hdl_uid_);
            var rtl = hdl.GetContentInfo().rtl;
            var sexit = WCT.DeepCopy(s.exit);
            sexit.x = rtl ? 2 : -2;
            sexit.y = 2;
            SKIN.control.Add({
                id: this.uid_ + '#header#exit',
                skin: sexit,
                dom: h,
                onexec: on_close_,
                scope: this,
                title: this.Trans(sexit.tooltip)
            });
            var t = $$('div');
            t.id = this.uid_ + '#tabs';
            t.style.marginTop = profs.tabs_margin_t + 'px';
            t.style.marginBottom = profs.tabs_margin_b + 'px';
            t.style.paddingLeft = profs.tabs_padding_l + 'px';
            t.style.paddingRight = profs.tabs_padding_r + 'px';
            t.style.clear = 'both';
            t.style.overflow = 'hidden';
            WCT.dom.NotSelectable(t);
            m.appendChild(t);
            var c = $$('div');
            c.id = this.uid_ + '#content';
            WCT.skin.ApplyBorder(c, s.content);
            WCT.skin.ApplyTextFormats(c, s.content);
            c.style.marginLeft = profs.content_margin_l + 'px';
            c.style.marginRight = profs.content_margin_r + 'px';
            c.style.marginTop = profs.content_margin_t + 'px';
            c.style.marginBottom = profs.content_margin_b + 'px';
            c.style.overflow = 'auto';
            WCT.dom.NotSelectable(c);
            m.appendChild(c);
            var count = 0;
            for (var i in this.tabs_) count++;
            var tapw = profs.tabs_padding_l + profs.tabs_padding_r;
            var tbl = s.tab.border_left ? Number(s.tab.border_left.split('px')[0]) : profs.tab_border_l;
            var tbr = s.tab.border_right ? Number(s.tab.border_right.split('px')[0]) : profs.tab_border_r;
            var tpw = (profs.tab_padding_l + profs.tab_padding_r) * count;
            var tbw = (tbl + tbr) * count;
            var tmw = (profs.tab_margin_l + profs.tab_margin_r) * count;
            var tw = Math.floor((mw - tapw - tmw - tpw - tbw) / count);
            for (var i in this.tabs_) {
                var tab = this.tabs_[i];
                var tab_t = tab.GetTabDom();
                WCT.skin.ApplyTextFormats(tab_t, s.tab);
                if (s.tab.image) WCT.skin.ApplyBgImage(tab_t, s.tab.image);
                tab_t.style.overflow = 'hidden';
                tab_t.style.textOverflow = 'ellipsis';
                tab_t.style.whiteSpace = 'nowrap';
                tab_t.style.cssFloat = 'left';
                tab_t.style.styleFloat = 'left';
                tab_t.style.borderLeft = s.tab.border_left || (profs.tab_border_l + 'px solid ' + (s.tab.border_left_color || '#999999'));
                tab_t.style.borderRight = s.tab.border_right || (profs.tab_border_r + 'px solid ' + (s.tab.border_right_color || '#999999'));
                tab_t.style.marginLeft = profs.tab_margin_l + 'px';
                tab_t.style.marginRight = profs.tab_margin_r + 'px';
                tab_t.style.marginTop = profs.tab_margin_t + 'px';
                tab_t.style.marginBottom = profs.tab_margin_b + 'px';
                tab_t.style.paddingLeft = profs.tab_padding_l + 'px';
                tab_t.style.paddingRight = profs.tab_padding_r + 'px';
                tab_t.style.borderRadius = (s.tab.border_radius || 0) + 'px';
                tab_t.style.boxShadow = s.tab.box_shadow || '0px 0px 0px 0px #000000';
                tab_t.style.height = s.tab.h + 'px';
                tab_t.style.lineHeight = s.tab.h + 'px';
                tab_t.style.width = tw + 'px';
                t.appendChild(tab_t)
            }
            if (!BROWSER.IE6) this.dnd_ = new WCT.dnd(m, h);
            select_.call(this, cur_tab)
        }
    }
})();
Profile.tab = function(hdl, tid, cid, cb, rtl) {
    if (!arguments.length) return;
    this.hdl_ = hdl;
    this.name_ = this.name_ || 'tab';
    this.caption_ = this.caption_ || '';
    this.tid_ = tid + this.name_;
    this.cid_ = cid + this.name_;
    this.dom_ = null;
    this.callback_ = cb;
    this.settings_ = [];
    this.rtl_ = rtl
};
Profile.tab.GetScope = function(id) {
    var ids = id.split('#');
    var hdl = MANAGER.handler.Get(ids[0]);
    var prf = hdl && hdl.GetProfile() || null;
    var me_id = ids[ids.length - 2];
    return prf && prf.GetTab(me_id) || null
};
Profile.tab.prototype = (function() {
    function on_boolean_(evt) {
        evt = WCT.event.Standardize(evt);
        var ip = evt.target;
        if (evt.targetName == 'div') {
            ip = this.firstChild;
            ip.checked = !ip.checked
        }
        var me = Profile.tab.GetScope(ip.id);
        if (!me) return;
        var ids = ip.id.split('#');
        var id = ids.top();
        var idx = me.settings_.indexOfAtt(id, 'id');
        if (idx >= 0) me.settings_[idx].val = ip.checked;
        if (me.callback_) {
            me.callback_.call(me.hdl_ || null, me.name_, {
                id: id,
                value: ip.checked
            })
        }
    };
    return {
        Destructor: function() {
            this.RemoveContent();
            this.hdl_ = null;
            this.callback_ = null;
            this.settings_ = null
        },
        GetTabDom: function() {
            var t = this.hdl_.Trans(this.caption_);
            var d = $$('a');
            d.id = this.tid_;
            d.href = 'javascript:void(0);';
            d.style.textDecoration = 'none';
            d.style.color = '#000000';
            d.style.display = 'block';
            d.setAttribute('title', t);
            d.appendChild($$2(t));
            return d
        },
        RemoveContent: function() {
            if (this.dom_) {
                var cn = this.dom_.childNodes;
                for (var i = 0, n = null; n = cn[i++];) {
                    n.onclick = null;
                    n.onmouseover = null;
                    n.onmouseout = null
                }
                var cbs = this.dom_.getElementsByTagName('input');
                for (var i = 0, cb = null; cb = cbs[i++];) {
                    cb.onchange = null;
                    cb.onclick = null;
                    cb.onkeyup = null
                }
                this.dom_.parentNode.removeChild(this.dom_);
                this.dom_ = null
            }
        },
        Configure: function(conf) {
            var s = this.settings_;
            for (var i = 0, c = null; c = s[i++];) {
                if (typeof conf[c.id] == 'boolean') c.val = conf[c.id]
            }
        },
        ShowContent: function(dom) {
            var d = $$('div');
            d.id = this.cid_;
            this.dom_ = d;
            dom.appendChild(d);
            if (this.rtl_) d.style.direction = 'rtl';
            var hdl = this.hdl_;
            var skin = hdl.GetSkin();
            var id = this.cid_ + '#';
            var s = this.settings_;
            skin = skin.content[this.name_] || null;
            for (var i = 0, c = null, le = s.length - 1; c = s[i]; i++) {
                var l = $$('div');
                l.style.display = 'block';
                l.style.cursor = 'pointer';
                if (skin) {
                    WCT.skin.ApplyTextFormats(l, skin);
                    WCT.skin.ApplyPadding(l, skin);
                    if (skin.border_spacer && i < le) l.style.borderBottom = skin.border_spacer
                }
                d.appendChild(l);
                if (c.type == 'boolean') {
                    l.onclick = on_boolean_;
                    var cb = WCT.dom.CreateInputElement('checkbox');
                    cb.id = id + c.id;
                    cb.onchange = on_boolean_;
                    cb.onclick = on_boolean_;
                    cb.onkeyup = on_boolean_;
                    l.appendChild(cb);
                    l.appendChild($$2(c.loc !== false ? hdl.Trans(c.txt) : c.txt));
                    if (c.val) cb.setAttribute('checked', 'checked');
                    if (skin) {
                        if (skin.cb_margin_right) {
                            if (this.rtl_) {
                                cb.style.marginLeft = skin.cb_margin_right + 'px'
                            } else {
                                cb.style.marginRight = skin.cb_margin_right + 'px'
                            }
                        }
                        if (skin.cb_vertical_align) cb.style.verticalAlign = skin.cb_vertical_align
                    }
                } else if (c.type == 'help') {
                    l.id = id + c.id;
                    l.appendChild($$2(hdl.Trans(c.txt)));
                    l.onclick = Profile.Help.OnEvent;
                    if (!BROWSER.MOBILE) {
                        l.onmouseover = Profile.Help.OnEvent;
                        l.onmouseout = Profile.Help.OnEvent
                    }
                }
            }
            return d
        }
    }
})();
Profile.LibSearch = function() {
    this.name_ = this.name_ || 'LibSearch';
    this.caption_ = 'SEARCH';
    Profile.tab.apply(this, arguments);
    this.settings_ = [{
        id: 'caption',
        txt: 'LIBFLAG_TITLE',
        type: 'boolean',
        val: false
    }, {
        id: 'shortdesc',
        txt: 'LIBFLAG_SHORTDESC',
        type: 'boolean',
        val: false
    }, {
        id: 'description',
        txt: 'LIBFLAG_DESC',
        type: 'boolean',
        val: false
    }, {
        id: 'keywords',
        txt: 'LIBFLAG_KEYW',
        type: 'boolean',
        val: false
    }, {
        id: 'slides',
        txt: 'LIBFLAG_SLIDES',
        type: 'boolean',
        val: false
    }]
};
Profile.LibSearch.prototype = new Profile.tab;
Profile.LibSearch.prototype.ShowContent = function(dom) {
    var lss = this.hdl_.GetConfig('lib_search_slides');
    if (!lss) {
        var s = this.settings_;
        var i = s.indexOfAtt('slides', 'id');
        if (i >= 0) s.splice(i, 1)
    }
    Profile.tab.prototype.ShowContent.apply(this, arguments)
};
Profile.LibSettings = function() {
    this.name_ = 'LibSettings';
    this.caption_ = 'SETTINGS';
    Profile.tab.apply(this, arguments);
    this.settings_ = [{
        id: 'use_new_window',
        txt: 'LIBFLAG_NEWWIN',
        type: 'boolean',
        val: false
    }]
};
Profile.LibSettings.prototype = new Profile.tab;
Profile.Help = function() {
    this.name_ = this.name_ || 'Help';
    this.caption_ = 'HELP';
    Profile.tab.apply(this, arguments);
    this.settings_ = [{
        id: 'library',
        txt: 'HELP_LIBRARY',
        type: 'help',
        val: DATA.HELP_LIBRARY_KEY
    }, {
        id: 'trainer',
        txt: 'HELP_TRAINER',
        type: 'help',
        val: DATA.HELP_LESSON_KEY
    }, {
        id: 'book',
        txt: 'HELP_BOOK',
        type: 'help',
        val: DATA.HELP_BOOK_KEY
    }]
};
Profile.Help.prototype = new Profile.tab;
Profile.Help.OnEvent = function(evt) {
    evt = WCT.event.Standardize(evt);
    var me = Profile.tab.GetScope(this.id);
    if (!me) return;
    var ids = this.id.split('#');
    var idx = me.settings_.indexOfAtt(ids.top(), 'id');
    var set = idx >= 0 ? me.settings_[idx] : null;
    if (set) {
        switch (evt.type) {
            case 'click':
                var hdl = MANAGER.handler.Get(ids[0]);
                MANAGER.OpenHelp(hdl.content_language_, set.val);
                break;
            case 'mouseover':
                this.style.textDecoration = 'underline';
                break;
            case 'mouseout':
                this.style.textDecoration = 'none';
                break
        }
    }
};
Profile.QrCode = function() {
    this.name_ = this.name_ || 'QrCode';
    this.caption_ = 'QRCODE';
    Profile.tab.apply(this, arguments)
};
Profile.QrCode.prototype = new Profile.tab;
Profile.QrCode.prototype.ShowContent = function(dom) {
    var s = this.hdl_.skin_;
    var p = Profile.STYLES;
    var h = s.h - (s.header ? s.header.h : 0) - (s.tab ? s.tab.h : 0);
    if (p.content_margin_t) h -= p.content_margin_t;
    if (p.content_margin_b) h -= p.content_margin_b;
    if (p.tabs_margin_t) h -= p.tabs_margin_t;
    if (p.tabs_margin_b) h -= p.tabs_margin_b;
    var hdl = MANAGER.handler.Get(this.hdl_.hdl_uid_);
    var msg = hdl ? hdl.Trans('QR_URL_TOO_BIG') : MANAGER.Trans('QR_URL_TOO_BIG');
    var u = MANAGER.GetUrl();
    var d = Profile.tab.prototype.ShowContent.apply(this, arguments);
    var c = WCT.QrCode.GenerateHtml(u, h, {
        margin: '5px auto'
    }) || msg;
    d.style.textAlign = 'center';
    d.innerHTML = c
};
Profile.ContextRoles = function() {
    this.name_ = 'ContextRoles';
    this.caption_ = 'CONTEXT_ROLES';
    Profile.tab.apply(this, arguments);
    this.settings_ = []
};
Profile.ContextRoles.prototype = new Profile.tab;
WCT.ExtendObject(Profile.ContextRoles.prototype, {
    Configure: function(roles) {
        var s = [];
        this.settings_ = s;
        s.push({
            id: 'no_roles_',
            txt: 'CONTEXT_ROLES_NOROLES',
            type: 'boolean',
            loc: true,
            val: roles.no_roles_
        });
        for (var r in roles) {
            if (r == 'no_roles_') continue;
            s.push({
                id: r,
                txt: r,
                type: 'boolean',
                loc: false,
                val: roles[r]
            })
        }
    },
    ShowContent: function(dom) {
        var set = this.settings_;
        var fst = set.shift();
        set.sort(function(a, b) {
            var ac = a.txt.toLowerCase();
            var bc = b.txt.toLowerCase();
            return ac < bc ? -1 : (ac > bc ? 1 : 0)
        });
        set.unshift(fst);
        var d = Profile.tab.prototype.ShowContent.apply(this, arguments);
        var l1_mt = 2;
        var l1_mb = 5;
        var l2_mt = 2;
        var l2_mb = 2;
        var mo = 2;
        var l1_m = [l1_mt, mo, l1_mb, mo].join('px ') + 'px';
        var l2_m = [l2_mt, mo, l2_mb, mo].join('px ') + 'px';
        var h = this.hdl_;
        var p = Profile.STYLES;
        var s = h.GetSkin();
        var h = h.GetContentH();
        var c = s.content[this.name_];
        if (c) {
            h -= (c.line_height || 0) + (c.padding_top || 0) + (c.padding_bottom || 0)
        }
        h -= l1_mt + l1_mb + l2_mt + l2_mb;
        var l1 = $$('div');
        WCT.skin.ApplyBorder(l1, s.content);
        l1.style.margin = l1_m;
        if (d.firstChild) {
            d.firstChild.style.border = '0px none';
            l1.appendChild(d.firstChild)
        }
        var l2 = $$('div');
        WCT.skin.ApplyBorder(l2, s.content);
        l2.style.margin = l2_m;
        l2.style.overflowY = 'auto';
        l2.style.height = Math.max(h, 0) + 'px';
        while (d.firstChild) {
            l2.appendChild(d.firstChild)
        }
        if (c.border_spacer && l2.lastChild) l2.lastChild.style.borderBottom = c.border_spacer;
        d.appendChild(l1);
        d.appendChild(l2);
        return d
    }
});
var HANDLER = {
    MODE: {
        lesson: 'lesson',
        book: 'book',
        slide: 'slide',
        library: 'library',
        file: 'file',
        cdoc: 'cdoc'
    }
};
HANDLER.base = function(content, central_tracker) {
    this.uid_ = WCT.uid.Generate(MANAGER.UID_LEN, MANAGER.UID_PREF_HDL);
    this.type_ = 'base';
    this.active_ = false;
    if (!content) return;
    this.content_tclass_ = content.tclass;
    this.content_uid_ = content.uid;
    this.content_mode_ = content.mode;
    this.content_filename_ = content.filename;
    this.content_language_ = DATA.DEFAULT_LANGUAGE;
    this.content_lib_embedded_ = content.lib_embed;
    this.central_tracker_ = central_tracker;
    this.local_trackers_ = {};
    this.tracking_id_ = null;
    this.skin_ = null;
    this.config_ = null;
    this.panel_ = null;
    this.topmost_ = null;
    this.profile_ = null;
    this.feedback_ = null;
    this.feedback_resume_ = false;
    this.panel_ori_ = null;
    this.panel_vis_ = true;
    this.state_ = null;
    this.steps_ = 0;
    this.step_ = -1;
    this.audio_ = {
        muted: false,
        paused: false,
        stopped: false,
        volumes: {},
        mutes: {},
        disabled_: false
    };
    this.vol_slider_ = null;
    this.ctx_ = {};
    this.ctx_[content.tclass] = content.uid;
    this.ctx_config_ = {};
    this.dom_ = null;
    this.main_ = null;
    this.x_ = -1;
    this.y_ = -1;
    this.w_ = -1;
    this.h_ = -1;
    this.res_x_ = -1;
    this.res_y_ = -1;
    this.res_w_ = -1;
    this.res_h_ = -1;
    this.cont_dim_ = null;
    this.needs_slide_renderer_ = 0;
    this.slide_iframe_ = null;
    this.slide_hdl_ = null;
    this.slide_ctx_ = null;
    this.slide_sink_ = null;
    this.taskinfo_ = null;
    this.taskinfo_vr_ = null;
    this.socket_ = new SocketHandler(this.onsocket_, this);
    this.resize_prefer_main_ = false;
    this.generic_key_events_ = false;
    this.observe_touches_ = false;
    this.touch_ids_ = [];
    this.hcount_ = 1;
    this.rtl_ = false
};
WCT.ExtendObject(HANDLER.base, {
    STATE_INIT: 'init',
    STATE_STARTPAGE: 'startpage',
    STATE_STOPPAGE: 'stoppage',
    STATE_ENDPAGE: 'endpage',
    STATE_STARTING: 'starting',
    STATE_PLAYING: 'play',
    STATE_PAUSED: 'pause',
    STATE_IDLE: 'idle',
    STATE_FINISHED: 'finish',
    STATE_TERMINATED: 'terminated',
    STATE_MAP: {
        init: 'START',
        starting: 'START',
        play: 'PLAYING',
        pause: 'PAUSED',
        idle: 'IDLE'
    },
    ACTION_COMMAND_MAP: {
        exit: 'exit',
        help: 'help',
        feedback: 'feedback',
        glossref: 'glossref',
        share: 'mailto',
        book_all_sound_stop: 'audio_pause',
        book_all_sound_mute: 'audio_mute',
        book_all_sound_unmute: 'audio_unmute',
        book_sound_on: 'book_sound_on',
        book_sound_off: 'book_sound_off',
        book_toggle_sound: 'book_toggle_sound'
    },
    GetConfig: function(hdl) {
        var props = arguments[1] || {};
        var modes = HANDLER.MODE;
        var type = hdl.type_ || hdl.type;
        var tclass = hdl.content_tclass_ || hdl.tclass;
        var uid = hdl.content_uid_ || hdl.uid;
        var mode = hdl.content_mode_ || hdl.mode;
        var cfg = null;
        if (type == modes.lesson) {
            if (mode == 'praxis' && BROWSER.IE && BROWSER.VERSION < 11) props.window_cfg_force = true;
            cfg = DATA.GetConfig('project', uid, mode, props)
        } else if (type == modes.file) {
            cfg = DATA.GetConfig('group', null, null, props)
        } else {
            cfg = DATA.GetConfig(tclass, uid, null, props)
        }
        return cfg
    }
});
HANDLER.base.prototype = (function() {
    function handle_glossref_link_(gloss_id, ev) {
        var d = DATA.GetS(gloss_id + ':entity.txt');
        if (!d) return;
        var c = this.GetContext();
        c.Set(d.tclass, d.uid);
        c.SetScope(d.tclass);
        var desc = d.description || ' ';
        desc = c.ExpandHtmlString(desc);
        this.SetTaskInfo({
            uid: 'taskinfo_' + gloss_id,
            title: d.caption,
            text: desc,
            bgcolor: '#FFFFFF',
            orientation: 'C',
            macro_uid: '',
            mini: false,
            close_msg: false,
            modal: true,
            w: this.config_.glossary_width,
            h: 0
        }, true);
        this.TaskInfoVisible(true)
    };

    function set_audio_defaults_() {
        var a = this.audio_;
        var c = this.config_;
        var s = this.GetSlideHandler(0);
        var k = DATA.CFG_VOLUME;
        for (var i = k.length - 1; i >= 0; i--) {
            if (k[i].substr(0, 4) != 'vol_') continue;
            var m = k[i].substr(4).toFirstUpperCase();
            if (a.volumes[m] == null) {
                a.volumes[m] = c[k[i]];
                if (s) s.MediaVolume(m, c[k[i]])
            }
        }
    };

    function slide_ready_() {
        this.slide_iframe_ = [];
        this.slide_hdl_ = [];
        this.slide_ctx_ = [];
        var uid = this.uid_;
        var cfg = this.config_;
        var sfr = this.slide_iframe_;
        var shl = this.slide_hdl_;
        var scx = this.slide_ctx_;
        var nsr = this.needs_slide_renderer_;
        var sid = uid + '#slide#';
        var snk = new HANDLER.slide.Sink(uid);
        this.slide_sink_ = snk;
        for (var i = 1; i <= nsr; i++) {
            var fr = $(sid + i);
            var wnd = fr && fr.contentWindow || null;
            var pge = wnd && wnd.Page || null;
            if (!pge) continue;
            var hdl = new HANDLER.slide.Handler(uid, fr);
            var ctx = new HANDLER.slide.Ctx(this.uid_, i - 1);
            wnd[MANAGER.WND_EVT_ID] = uid;
            wnd.T2 = true;
            pge.SetSink(snk);
            wnd.ctx = ctx;
            sfr.push(fr);
            shl.push(hdl);
            scx.push(ctx)
        }
        if (sfr.length == nsr) {
            if (cfg.video_mode) shl[0].SetupVideoMode(cfg.video_fps);
            if (this.topmost_) window.topmost_ctx = scx[0];
            if (nsr == 1) {
                this.slide_hdl_ = shl[0];
                this.slide_iframe_ = sfr[0];
                this.slide_ctx_ = scx[0]
            }
            this.Start()
        } else {
            this.Fini(false, 'Unable to load SlideRenderer')
        }
    };
    return {
        Destructor: function() {
            this.state_ = HANDLER.base.STATE_TERMINATED;
            MANAGER.event.UnregisterListener({
                handler_id: this.uid_
            });
            if (this.touch_ids_) {
                for (var i = this.touch_ids_.length - 1; i >= 0; i--) {
                    WCT.event.touches.UnregisterCallback(this.touch_ids_[i])
                }
                this.touch_ids_ = null
            }
            this.RemoveTaskInfo();
            if (this.profile_) {
                this.profile_.Destructor();
                this.profile_ = null
            }
            if (this.feedback_) {
                this.feedback_.Destructor();
                this.feedback_ = null
            }
            if (this.topmost_) {
                this.topmost_.Destructor();
                this.topmost_ = null
            }
            window.topmost_ctx = null;
            if (this.vol_slider_) {
                this.vol_slider_.Destructor();
                this.vol_slider_ = null
            }
            if (this.socket_) {
                this.socket_.Destructor();
                this.socket_ = null
            }
            this.uid_ = null;
            this.central_tracker_ = null;
            this.main_ = null;
            if (this.local_trackers_) {
                var lts = this.local_trackers_;
                for (var id in lts) {
                    lts[id].Destructor();
                    lts[id] = null
                }
                this.local_trackers_ = null
            }
            this.tracking_id_ = null;
            var shl = this.slide_hdl_;
            if (shl) {
                if (shl.isArray) {
                    for (var i = 0, c = null; c = shl[i++];) {
                        c.Clear();
                        c.Destructor()
                    }
                } else {
                    shl.Clear();
                    shl.Destructor()
                }
                this.slide_hdl_ = null
            }
            var sfr = this.slide_iframe_;
            if (sfr) {
                if (sfr.isArray) {
                    for (var i = 0, c = null; c = sfr[i++];) {
                        try {
                            var wnd = c.contentWindow;
                            if (wnd) {
                                wnd.onfocus = null;
                                wnd.onblur = null;
                                wnd.ctx = null;
                                wnd.on_unload()
                            }
                        } catch (e) {}
                        c.parentNode.removeChild(c)
                    }
                } else {
                    try {
                        var wnd = sfr.contentWindow;
                        if (wnd) {
                            wnd.onfocus = null;
                            wnd.onblur = null;
                            wnd.ctx = null;
                            wnd.on_unload()
                        }
                    } catch (e) {}
                    sfr.parentNode.removeChild(sfr)
                }
                this.slide_iframe_ = null
            }
            var scx = this.slide_ctx_;
            if (scx) {
                for (var i = 0, c = null; c = scx[i++];) {
                    c.Destructor()
                }
                this.slide_ctx_ = null
            }
            if (this.panel_) {
                this.panel_.Destructor();
                this.panel_ = null
            }
            if (this.dom_) {
                this.dom_.parentNode.removeChild(this.dom_);
                this.dom_ = null
            }
            this.slide_sink_ = null;
            this.cont_dim_ = null;
            this.skin_ = null;
            this.config_ = null;
            WCT.CleanupObject(this.ctx_);
            WCT.CleanupObject(this.audio_);
            WCT.CleanupObject(this.ctx_config_);
            this.ctx_ = null;
            this.audio_ = null;
            this.ctx_config_ = null
        },
        GetUid: function() {
            return this.uid_
        },
        GetProfile: function() {
            return this.profile_
        },
        GetType: function() {
            return this.type_
        },
        GetPanel: function() {
            return this.panel_
        },
        GetFeedback: function() {
            return this.feedback_
        },
        GetPanelOrientation: function() {
            return this.panel_ori_
        },
        GetDom: function() {
            return this.dom_
        },
        GetSlideRendererIFrame: function() {
            var idx = arguments[0];
            var sfr = this.slide_iframe_;
            return sfr && sfr.isArray ? (typeof idx == 'number' ? sfr[idx] : sfr) : (!idx ? sfr : null)
        },
        GetSlideHandler: function() {
            var idx = arguments[0];
            var shl = this.slide_hdl_;
            return shl && shl.isArray ? (typeof idx == 'number' ? shl[idx] : shl) : (!idx ? shl : null)
        },
        GetSlideCtx: function() {
            var idx = arguments[0];
            var scx = this.slide_ctx_;
            return scx && scx.isArray ? (typeof idx == 'number' ? scx[idx] : scx) : (!idx ? scx : null)
        },
        GetHandlerDim: function() {
            var t = this;
            return {
                x: t.res_x_,
                y: t.res_y_,
                w: t.res_w_,
                h: t.res_h_
            }
        },
        GetConfig: function(key) {
            var c = this.config_;
            if (typeof c[key] != 'undefined') {
                return c[key]
            }
            this.Fini(false, 'invalid config call');
            return null
        },
        GetSkin: function() {
            var k = arguments[0] || null;
            var t = this.topmost_;
            if (k == 'start_stop_page' && t) {
                var ts = t.GetSkin();
                if (ts && ts[k]) {
                    var wh = t.GetWH();
                    ts = WCT.DeepCopy(ts[k]);
                    ts.w = Math.floor(wh.w * 2 / 3);
                    ts.h = Math.floor(wh.h * 2 / 3);
                    return ts
                }
            }
            var s = this.skin_;
            return (s && k ? s[k] : s) || null
        },
        GetContext: function() {
            var context = new WCT.context(DATA.context);
            for (var i in this.ctx_) {
                context.Set(i, this.ctx_[i])
            }
            context.SetScope(this.content_tclass_);
            return context
        },
        GetContentInfo: function() {
            var t = this.content_tclass_;
            var u = this.content_uid_;
            var d = DATA.GetS(t + '!' + u + ':entity.txt') || {};
            var mode = this.content_mode_;
            var file = this.content_filename_;
            var addr = t + '!' + u;
            if (mode) {
                addr += ':' + mode
            } else if (file) {
                addr += ':' + file
            }
            return {
                tclass: t,
                uid: u,
                mode: mode,
                filename: file,
                address: addr,
                language: this.content_language_,
                lib_embed: this.content_lib_embedded_,
                rtl: this.rtl_,
                caption: d.caption || '',
                shortdesc: d.shortdesc || '',
                description: d.description || ''
            }
        },
        CreatePanel: function() {
            if (this.panel_) {
                this.panel_.Destructor();
                this.panel_ = null
            }
            var s = this.GetSkin('panel');
            if (!s) return null;
            var c = this.config_;
            var o = c.panel_orientation;
            if (this.type_ == HANDLER.MODE.library) {
                o = 'top'
            } else {
                if (c.hide_panel) return null;
                var uo = c.panel_fixed ? null : WCT.store.Get(WCT.store.KEYS.panel_ori[this.type_]);
                if (uo != null) o = uo
            }
            this.panel_ori_ = o;
            var p = new Panel(this.uid_, this.onpanel_, this);
            var a = this.audio_;
            p.Steps(this.steps_);
            p.SetAudioControls(a.muted, a.paused, a.stopped);
            p.Show(o);
            p.SetHandlerCount(this.hcount_);
            p.LogoClickable(false);
            p.LogoVisible(c.panel_show_logo);
            p.VisibleCommand('fullscreen', c.panel_fullscreen && WCT.fullscreen.Supported(document.body));
            p.VisibleCommand('feedback', c.feedback_enabled);
            p.VisibleCommand('socket_connecting', false);
            p.VisibleCommand('socket_connected', false);
            p.VisibleCommand('socket_synched', false);
            p.VisibleCommand('socket_disconnected', false);
            p.VisibleCommand('taskinfo_toggle', false);
            p.VisibleCommand('mailto', c.panel_send_content);
            p.VisibleCommand('help', c.panel_show_help);
            p.VisibleCommand('exit', c.panel_show_exit);
            if (!c.panel_fixed) p.VisibleCommand('orientation_toggle_' + o, true);
            p.Visible(this.panel_vis_);
            this.panel_ = p;
            var free = this.Resize(null, true);
            if (BROWSER.MOBILE) {
                p.VisibleCommand('audio_mute', false);
                p.VisibleCommand('audio_unmute', false);
                p.VisibleCommand('audio_volume', false);
                if (free) {
                    var sf = this.GetSlideRendererIFrame(0);
                    var wnd = sf && sf.contentWindow;
                    if (wnd && wnd.hdl_onresize) wnd.hdl_onresize(null, free.w, free.h)
                }
            }
            return p
        },
        RemovePanel: function() {
            if (this.vol_slider_) {
                this.vol_slider_.Destructor();
                this.vol_slider_ = null
            }
            if (this.panel_) {
                this.panel_ = this.panel_.Destructor();
                this.Resize()
            }
        },
        ExecCommand: function(cmd) {
            var param = arguments[1];
            var a = this.audio_;
            var s = this.GetSlideHandler(0);
            var p = this.panel_;
            switch (cmd) {
                case 'mailto':
                    this.open_share_dlg_();
                    break;
                case 'glossref':
                    handle_glossref_link_.call(this, param, arguments[2]);
                    break;
                case 'taskinfo_toggle':
                    this.TaskInfoVisible(!this.TaskInfoVisible(), 'toggle');
                    break;
                case 'taskinfo_close':
                    this.TaskInfoVisible(false, 'close');
                    break;
                case 'socket_disconnected':
                    this.socket_.Init();
                    break;
                case 'socket_connected':
                    this.socket_.Sync();
                    break;
                case 'fullscreen':
                    WCT.fullscreen[WCT.fullscreen.Active() ? 'Disable' : 'Enable']($(this.uid_));
                    return true;
                    break;
                case 'exit':
                    if ((BROWSER.IPHONE || BROWSER.IPAD) && window.navigator.standalone) {
                        alert('Sorry, exit not allowed in fullscreen mode.');
                        return
                    }
                    this.Fini();
                    break;
                case 'audio_mute':
                case 'audio_unmute':
                    if (a.disabled_) break;
                    var mute = cmd == 'audio_mute';
                    a.muted = mute;
                    a.mutes.Master = mute;
                    if (s) s.MediaMute('Master', mute);
                    if (p) p.SetAudioControls(a.muted, a.paused, a.stopped);
                    break;
                case 'audio_play':
                case 'audio_resume':
                    if (a.disabled_) break;
                    a.paused = false;
                    a.stopped = false;
                    if (s) {
                        if (cmd == 'audio_play') {
                            s.MediaPlay(true)
                        } else {
                            s.MediaPlay(true, null, true)
                        }
                    }
                    if (p) p.SetAudioControls(a.muted, a.paused, a.stopped);
                    break;
                case 'audio_pause':
                    if (a.disabled_) break;
                    a.paused = true;
                    if (s) s.MediaPlay(false);
                    if (p) p.SetAudioControls(a.muted, a.paused, a.stopped);
                    break;
                case 'audio_stop':
                    if (a.disabled_) break;
                    a.paused = false;
                    a.stopped = true;
                    if (s) s.MediaStop();
                    if (p) p.SetAudioControls(a.muted, a.paused, a.stopped);
                    break;
                case 'audio_toggle':
                    if (a.disabled_) break;
                    this.ExecCommand(a.paused ? 'audio_play' : 'audio_pause');
                    break;
                case 'audio_volume':
                    if (a.disabled_) break;
                    a.volumes[param.channel] = param.volume;
                    if (s) s.MediaVolume(param.channel, param.volume);
                    break;
                case 'audio_c_mute':
                    if (a.disabled_) break;
                    a.mutes[param.channel] = param.muted;
                    if (param.channel == 'Master') {
                        this.ExecCommand(param.muted ? 'audio_mute' : 'audio_unmute')
                    } else if (s) {
                        s.MediaMute(param.channel, param.muted)
                    }
                    break;
                case 'audio_c_play':
                    if (a.disabled_) break;
                    if (param.channel == 'Master') {
                        this.ExecCommand('audio_play')
                    } else if (s) {
                        s.MediaPlay(true, param.channel)
                    }
                    break;
                case 'audio_c_pause':
                    if (a.disabled_) break;
                    if (param.channel == 'Master') {
                        this.ExecCommand('audio_pause')
                    } else if (s) {
                        s.MediaPlay(false, param.channel)
                    }
                    break;
                case 'feedback':
                    var fb = this.feedback_;
                    if (!fb && this.config_.feedback_enabled) {
                        if (this.type_ == HANDLER.MODE.lesson && this.state_ == HANDLER.base.STATE_PLAYING) {
                            this.feedback_resume_ = true;
                            this.ExecCommand('pause')
                        }
                        var furl = this.config_.feedback_external_url;
                        if (furl) {
                            var fstat = this.GetContentInfo();
                            var facc = {
                                tclass: 1,
                                uid: 1,
                                mode: 1,
                                macro: 1,
                                filename: 1,
                                slide: 1,
                                selection: 1
                            };
                            var fdat = [];
                            for (var k in fstat) {
                                if (facc[k] != null && fstat[k] != null) fdat.push(k + '=' + escape(fstat[k]))
                            }
                            furl += (furl.indexOf('?') >= 0 ? '&' : '?') + fdat.join('&');
                            MANAGER.ExecuteExternal(furl)
                        } else {
                            fb = new Popup.ManagerFeedback({
                                hdl_id: this.uid_,
                                skin: this.skin_.feedback,
                                callback: this.onfeedback_,
                                scope: this
                            });
                            fb.Show();
                            this.feedback_ = fb
                        }
                    }
                    break;
                case 'book_sound_on':
                    if (s) s.MediaPlayPagesound();
                    break;
                case 'book_sound_off':
                    if (s) s.MediaStopPagesound();
                    break;
                case 'book_toggle_sound':
                    if (!s) break;
                    var playing = s.MediaPlaying('Pagesound');
                    s.MediaStopPagesound();
                    if (!playing) s.MediaPlayPagesound();
                    break
            }
        },
        ExecAction: function(act) {
            var gm = HANDLER.base.ACTION_COMMAND_MAP || {};
            var sm = HANDLER[this.type_].ACTION_COMMAND_MAP || {};
            var cmd = sm[act] || gm[act];
            if (cmd) this.ExecCommand(cmd, arguments[1], arguments[2])
        },
        Track: function(info) {
            var lt = this.tracking_id_ && this.local_trackers_[this.tracking_id_] || null;
            if (lt) lt.Track(info)
        },
        TrackCompletion: function() {
            var lt = this.tracking_id_ && this.local_trackers_[this.tracking_id_] || null;
            if (lt) {
                var qs = lt.GetQuizScore();
                lt.Commit();
                lt.Completed(qs.cur >= qs.pass, true)
            }
        },
        StartExecutable: function(info) {
            var win_props = arguments[1];
            if (this.topmost_) {
                if (!win_props) win_props = {};
                win_props.window_cfg_force = 1
            }
            MANAGER.Execute(info, win_props)
        },
        StartFile: function(info) {
            if (!info.filename) return;
            if (HANDLER.file.IsAcceptedExt(info.filename)) {
                info.type = 'file';
                this.StartExecutable(info, arguments[1])
            } else {
                var c = this.GetContext();
                var a = info.tclass && info.uid ? info.tclass + '!' + info.uid + ':' + info.filename : info.filename;
                var u = c.ToAbsPath(a);
                if (PLATFORM.WINCE) {
                    location.href = u
                } else {
                    try {
                        window.open(u)
                    } catch (e) {}
                }
            }
        },
        SetHandlerCount: function(c) {
            this.hcount_ = c;
            this.panel_ && this.panel_.SetHandlerCount(this.hcount_)
        },
        SetPosition: function(x, y, w, h) {
            if (typeof x == 'number' && this.x_ != x || typeof y == 'number' && this.y_ != y || typeof w == 'number' && this.w_ != w || typeof h == 'number' && this.h_ != h) {
                if (typeof x == 'number') this.x_ = x;
                if (typeof y == 'number') this.y_ = y;
                if (typeof w == 'number') this.w_ = w;
                if (typeof h == 'number') this.h_ = h;
                this.Resize(arguments[4])
            } else if (arguments[4]) {
                var sf = this.GetSlideRendererIFrame(0);
                var wnd = sf && sf.contentWindow || null;
                if (wnd && wnd.hdl_onresize) {
                    if (BROWSER.MOBILE) {
                        var d = this.cont_dim_;
                        wnd.hdl_onresize(arguments[0], d.w, d.h)
                    } else {
                        wnd.hdl_onresize(arguments[0])
                    }
                }
            }
        },
        ConnectTopmost: function(t) {
            this.topmost_ = t
        },
        HasTopmost: function() {
            return this.topmost_ != null
        },
        Orientation: function() {},
        Resize: function() {
            var evt = WCT.event.Standardize(arguments[0]);
            PRODUCER.VideoExport.Resize();
            if (this.w_ < 0 && this.h_ < 0 || !arguments[1] && this.x_ == this.res_x_ && this.y_ == this.res_y_ && this.w_ == this.res_w_ && this.h_ == this.res_h_) {
                return {
                    abort: true
                }
            }
            this.res_x_ = this.x_;
            this.res_y_ = this.y_;
            this.res_w_ = this.w_;
            this.res_h_ = this.h_;
            var d = this.dom_;
            if (d) {
                d.style.left = this.x_ + 'px';
                d.style.top = this.y_ + 'px';
                d.style.width = this.w_ + 'px';
                d.style.height = this.h_ + 'px';
                if (!this.w_ && !this.h_) return {
                    abort: true
                }
            }
            var res = null;
            var max = {
                w: this.w_,
                h: this.h_
            };
            if (this.panel_ && this.panel_vis_) {
                res = this.panel_.Resize(this.w_, this.h_);
                d.style.overflow = this.config_.view_mode === 'fit' && this.w_ < res.w ? 'scroll' : 'hidden';
                max.w = Math.max(max.w, res.w);
                max.h = Math.max(max.h, res.h)
            }
            var sfr = this.GetSlideRendererIFrame(0);
            var c = this.resize_prefer_main_ ? this.main_ || sfr : sfr || this.main_;
            if (c) {
                var free = {
                    x: 0,
                    y: 0,
                    w: max.w,
                    h: max.h
                };
                if (res) {
                    free = WCT.geometry.ExciseRects(free, [res]);
                    free = WCT.geometry.GetBiggestRect(free)
                }
                if (!free) {
                    free = {
                        x: 0,
                        y: 0,
                        w: 200,
                        h: 200
                    }
                }
                c.style.left = free.x + 'px';
                c.style.top = free.y + 'px';
                c.style.width = free.w + 'px';
                c.style.height = free.h + 'px';
                WCT.dom.AndroidOpacitySwitch(c);
                this.cont_dim_ = free;
                if (c.id.search(/#slide#\d+$/) > 0 && evt) {
                    var wnd = c.contentWindow;
                    if (wnd && wnd.hdl_onresize) wnd.hdl_onresize(evt, free.w, free.h)
                }
                if (this.feedback_) this.feedback_.Resize();
                if (this.taskinfo_) this.taskinfo_.Resize(free);
                return free
            }
            return null
        },
        ScrollToPOI: function(poi, focus_type, anim_time, orig) {
            if (this.topmost_) {
                if (this.topmost_.ScrollToPOI) {
                    this.topmost_.ScrollToPOI(poi, focus_type, anim_time, orig)
                }
                return
            }
            var sl = this.dom_.scrollLeft;
            var st = this.dom_.scrollTop;
            var my = {
                x: sl,
                y: st,
                w: this.w_,
                h: this.h_
            };
            var cd = this.cont_dim_ || {
                x: 0,
                y: 0,
                w: 0,
                h: 0
            };
            var n = WCT.POI.Focus[focus_type](poi, my);
            if (n.x != null) n.x = Math.min(Math.max(0, n.x), cd.w + cd.x - this.w_);
            if (n.y != null) n.y = Math.min(Math.max(0, n.y), cd.h + cd.y - this.h_);
            var end = {
                x: n.x != null ? n.x : sl,
                y: n.y != null ? n.y : st
            };
            WCT.POI.Animate(this.dom_, {
                x: sl,
                y: st
            }, end, 'SineInOut', anim_time, 10)
        },
        Init: function() {
            this.state_ = HANDLER.base.STATE_INIT;
            if (PLATFORM.IOS && PLATFORM.VERSION == 7) document.body.style.position = 'fixed';
            var cfg = HANDLER.base.GetConfig(this);
            if (!cfg) {
                this.Fini(false, 'No handler config available!');
                return
            } else if (cfg.language) {
                this.content_language_ = cfg.language
            } else if (cfg.contentlanguage) {
                this.content_language_ = cfg.contentlanguage
            }
            this.rtl_ = WCT.IsLanguageRTL(this.content_language_);
            if (cfg.feedback_enabled && !TRACKING.backend.collaborator.Available() && !cfg.feedback_external_url) {
                cfg.feedback_enabled = false
            }
            if (cfg.navigator) cfg.show_focus_layer = false;
            this.config_ = cfg;
            var addr = DATA.SKIN_PREFIX + cfg.skin;
            this.ctx_.skin = addr;
            var ctx = this.GetContext();
            var skin = WCT.DeepCopy(DATA.GetS('skin:' + this.type_ + '.txt', 'JSON', ctx));
            var surl = ctx.ToAbsPath('skin:') + '/';
            if (!skin) {
                this.Fini(false, 'Unable to load skin: ' + this.type_ + '.txt');
                return
            }
            if (this.type_ == HANDLER.MODE.library) {
                var cti = false;
                if (WCT.ClampBoolean(skin.tree_icons)) {
                    var ticons = WCT.DeepCopy(DATA.GetS('skin:tree_icons.txt', 'JSON', ctx));
                    if (ticons && ticons.id) {
                        WCT.skin.ExtendUrls(ticons, surl);
                        WCT.TREE_ICONS = ticons;
                        cti = true
                    }
                }
                if (!cti) {
                    var turl = ctx.ToAbsPath('trainer:') + '/';
                    WCT.skin.ExtendUrls(WCT.TREE_ICONS, turl)
                }
            }
            if (cfg.feedback_enabled || cfg.panel_send_content) {
                var feedback = DATA.GetS('skin:feedback.txt', 'JSON', ctx);
                if (feedback) {
                    skin.feedback = WCT.DeepCopy(feedback)
                } else {
                    cfg.feedback_enabled = false
                }
            }
            var mouse = DATA.GetS('skin:mouse.txt', 'JSON', ctx);
            if (mouse) skin.mouse = WCT.DeepCopy(mouse);
            WCT.skin.ExtendUrls(skin, surl);
            this.skin_ = skin;
            var div = $$('div');
            div.id = this.uid_;
            div.style.position = 'absolute';
            div.style.overflow = 'hidden';
            document.body.appendChild(div);
            this.dom_ = div;
            var hdlp = HANDLER[this.type_].prototype;
            var k = DATA.CFG_KEYS[this.type_] || [];
            if (cfg.feedback_enabled) {
                k = k.concat(['keys_feedback'])
            }
            for (var i = k.length - 1; i >= 0; i--) {
                var hk = cfg[k[i]];
                if (hk && typeof hk == 'string') {
                    var hks = hk.split(',');
                    for (var j = hks.length - 1; j >= 0; j--) {
                        var chk = hks[j].trim();
                        WCT.event.hotkey.Observe(chk, 'down', hdlp.onkeydown_, this);
                        WCT.event.hotkey.Observe(chk, 'up', hdlp.onkeyup_, this)
                    }
                }
            }
            if (this.observe_touches_) {
                var et = WCT.event.touches;
                var ti = this.touch_ids_;
                ti.push(et.RegisterCallback('swipeleft', hdlp.onswipeleft_, this));
                ti.push(et.RegisterCallback('swiperight', hdlp.onswiperight_, this));
                ti.push(et.RegisterCallback('swipeup', hdlp.onswipeup_, this));
                ti.push(et.RegisterCallback('swipedown', hdlp.onswipedown_, this))
            }
            PRODUCER.VideoExport.Enabled(cfg.video_mode);
            var nsr = this.needs_slide_renderer_;
            if (nsr) {
                HANDLER.slide.InitSlide(this.uid_ + '#slide', this.dom_, nsr, slide_ready_, this)
            } else {
                this.Start()
            }
        },
        SetActive: function(a) {
            if (this.active_ == a) return;
            this.active_ = a;
            this.SetTitle()
        },
        SetTitle: function() {
            if (this.config_.title) MANAGER.SetWindowTitle(this.config_.title, true)
        },
        SetVisibility: function(v) {
            this.dom_.style.display = v ? '' : 'none'
        },
        IsActive: function() {
            return this.active_
        },
        Start: function() {
            this.state_ = HANDLER.base.STATE_STARTING;
            set_audio_defaults_.call(this);
            if (this.needs_slide_renderer_) {
                var cfg = this.config_;
                var shdl = this.GetSlideHandler(0);
                var skin = this.GetSkin('mouse');
                if (skin) {
                    skin = skin[cfg.big_mouse ? 'big' : 'standard'] || skin.standard || null;
                    if (skin) shdl.SetMouseSkin(skin)
                }
                shdl.SetConfig('view_mode', cfg.view_mode);
                shdl.SetConfig('show_tts_subtitle', cfg.show_tts_subtitle);
                shdl.SetConfig('subtitle_style', {
                    font_family: cfg.sub_font_family,
                    font_size: cfg.sub_font_size,
                    text_color: cfg.sub_text_color,
                    align: cfg.sub_align,
                    background_color: cfg.sub_background_color
                });
                if (BROWSER.MOBILE) {
                    shdl.SetConfig('mobile_view_mode', cfg.mobile_view_mode);
                    shdl.SetConfig('allow_mobile_pinch_zoom', cfg.allow_mobile_pinch_zoom)
                }
                MANAGER.HandleFocus()
            }
        },
        GetCompletionState: function() {
            return {
                completed: null,
                passed: null,
                score: {
                    cur: null,
                    max: null
                },
                progress: {
                    cur: null,
                    max: null
                }
            }
        },
        Fini: function() {
            if (this.state_ == HANDLER.base.STATE_TERMINATED) return;
            this.state_ = HANDLER.base.STATE_FINISHED;
            var normal = arguments[0];
            if (normal === false) {
                var msg = [this.Trans('ERROR_GENERAL'), this.Trans('ERROR_2'), arguments[1]].join('<br/>');
                NOTIFICATION.ShowMessage(msg)
            }
            PRODUCER.VideoExport.Fini();
            MANAGER.handler.Fini(this.uid_, normal)
        },
        BroadcastEvent: function(evt) {
            var shl = this.slide_hdl_;
            shl = (shl.isArray ? shl : [shl])[evt.slide_id];
            if (shl) {
                evt.data.control_id = evt.control_id;
                evt = evt.data;
                delete evt.manager_id;
                delete evt.handler_id;
                shl.BroadcastEvent(evt)
            }
        },
        GetTaskInfo: function() {
            return this.taskinfo_
        },
        GetTitle: function() {
            return this.config_.caption
        },
        SetTaskInfo: function(info) {
            var cm = this.content_mode_;
            if (cm == 'test' && info.in_test || cm == 'uebung' && info.in_practice || arguments[1]) {
                this.RemoveTaskInfo();
                this.taskinfo_ = new TaskInfo(this.uid_, info);
                this.taskinfo_.Show(this.dom_);
                if (this.panel_) {
                    var tit = this.GetConfig('panel_taskinfo_toggle');
                    if (tit) this.panel_.VisibleCommand('taskinfo_toggle', true)
                }
                if (this.renderer_ctx_) {
                    this.renderer_ctx_.SetTaskInfoOrientation(info.orientation)
                }
            }
        },
        TaskInfoVisible: function() {
            var t = this.taskinfo_;
            if (t) {
                var v = arguments[0];
                var w = arguments[1];
                if (t.IsModal() && v === false) {
                    this.RemoveTaskInfo();
                    return false
                }
                if (v) {
                    var c = t.Visible();
                    var r = this.taskinfo_vr_;
                    if (!c && w == 'macroset' && (r == 'toggle' || r == 'close')) {
                        return false
                    }
                } else {
                    this.taskinfo_vr_ = w
                }
                return t.Visible(v)
            }
            return false
        },
        RemoveTaskInfo: function() {
            if (this.taskinfo_) {
                this.taskinfo_.Destructor();
                this.taskinfo_ = null
            }
        },
        Trans: function(key) {
            return MANAGER.Trans(key, this.content_language_)
        },
        SetConfig: function(cfg, val) {
            this.ctx_config_[cfg] = val
        },
        ShowPanel: function(show) {
            if (this.panel_vis_ != show) {
                this.panel_vis_ = show;
                if (this.panel_) {
                    this.panel_.Visible(show);
                    this.Resize(null, true)
                }
            }
        },
        VideoTick: function() {
            var shl = this.GetSlideHandler(0);
            if (shl) shl.VideoTick()
        },
        OnVideoAudio: function(mode, src) {
            PRODUCER.VideoExport.Audio(mode, src)
        },
        OnSlideState: function(evt, total, system, audio, video) {
            if (evt == 'ticker_tick') {
                PRODUCER.VideoExport.TickDone('OnSlideState: ' + [total, system, audio, video].join(' '))
            }
        },
        IsLibEmbedded: function() {
            return this.content_lib_embedded_
        },
        GetUrl: function() {
            var url = DATA.context.GetBase() + '/' + DATA.INDEX_HTML + '?';
            var s = this.config_.style;
            if (s !== DEFAULTS.style.d) url += 'style=' + s + '&';
            return url + 'show=' + this.content_tclass_ + '!' + this.content_uid_
        },
        onkeyup_: function(key, type, evt) {
            var cmd = HANDLER.base.prototype.onkeydown_.apply(this, arguments);
            if (this.generic_key_events_ && cmd) {
                var c = {
                    stop: 'exit',
                    next: 'next',
                    back: 'prev'
                }[cmd[0]];
                if (c) WCT.SetTimeout(this.ExecCommand, 1, this, [c])
            }
            return cmd
        },
        onkeydown_: function(key, type, evt) {
            var keys = DATA.CFG_KEYS[this.type_] || [];
            var cfg = this.config_;
            if (!cfg || !this.active_ || this.feedback_) return null;
            if (cfg.feedback_enabled) {
                keys = keys.concat(['keys_feedback'])
            }
            var cmds = [];
            for (var i = keys.length - 1; i >= 0; i--) {
                var k1 = cfg[keys[i]].split(',');
                for (var j = k1.length - 1; j >= 0; j--) {
                    var k2 = k1[j].trim();
                    if (k2 == key) {
                        evt.hasToBeCancelled = true;
                        cmds.push(keys[i].substr(5))
                    }
                }
            }
            return cmds.length ? cmds : null
        },
        onswipeleft_: function() {},
        onswiperight_: function() {},
        onswipeup_: function() {},
        onswipedown_: function() {},
        onpanel_: function(evt) {
            if (evt.ori != null || evt.cmd && evt.cmd.search('orientation_toggle_') >= 0) {
                var ori = evt.ori || {
                    top: 'bottom',
                    bottom: 'top'
                }[evt.cmd.substr(19)];
                if (this.vol_slider_) this.vol_slider_.Destructor();
                this.vol_slider_ = null;
                this.panel_ori_ = ori;
                WCT.store.Set(WCT.store.KEYS.panel_ori[this.type_], ori);
                this.Resize(null, true)
            } else if (evt.cmd == 'audio_volume') {
                if (this.vol_slider_) {
                    this.vol_slider_.Destructor();
                    this.vol_slider_ = null
                } else if (this.skin_.panel.hor.volume) {
                    var ctl = this.panel_.GetControl('control', 'audio_volume');
                    var dom = ctl && ctl.GetDom() || null;
                    if (!dom) return;
                    this.vol_slider_ = new VolumeSlider(this.uid_, this.dom_, this.onvolume_, this.audio_.volumes, this.audio_.mutes, dom)
                }
            } else if (evt.cmd != null) {
                if (evt.cmd == 'audio_play') evt.cmd = 'audio_resume';
                this.ExecCommand(evt.cmd)
            } else if (evt.toc != null) {
                this.ExecCommand('jump', evt.toc)
            } else if (evt.timeline != null) {
                this.ExecCommand('jump', evt.timeline)
            } else if (evt.logo) {
                this.ExecCommand('logoclick')
            }
        },
        onvolume_: function(type, channel, val) {
            switch (type) {
                case 'close':
                    this.vol_slider_.Destructor();
                    this.vol_slider_ = null;
                    break;
                case 'volume':
                    this.ExecCommand('audio_volume', {
                        channel: channel,
                        volume: val
                    });
                    break;
                case 'mute':
                    this.ExecCommand('audio_c_mute', {
                        channel: channel,
                        muted: val
                    });
                    break
            }
        },
        onfeedback_: function() {
            if (this.feedback_) {
                this.feedback_.Destructor();
                this.feedback_ = null;
                if (this.feedback_resume_) {
                    this.feedback_resume_ = false;
                    this.ExecCommand('play')
                }
            }
        },
        onsocket_: function(status) {
            var p = this.panel_;
            if (p) {
                p.VisibleCommand('socket_connecting', status.cing);
                p.VisibleCommand('socket_connected', status.open);
                p.VisibleCommand('socket_synched', status.sync);
                p.VisibleCommand('socket_disconnected', status.disc);
                if (status.open) p.EnableCommand('socket_connected', status.conn)
            }
        },
        reset_audio_to_slide_: function() {
            var a = this.audio_;
            var s = this.GetSlideHandler(0);
            if (!s) return;
            s.MediaMute('Master', a.muted);
            for (var c in a.volumes) {
                s.MediaVolume(c, a.volumes[c])
            }
            for (var c in a.mutes) {
                if (c != 'Master') {
                    s.MediaMute(c, a.mutes[c])
                }
            }
        },
        open_share_dlg_: function() {
            var sel = arguments[0] || this.content_tclass_ + '!' + this.content_uid_;
            var skn = this.skin_ && this.skin_.feedback;
            if (!sel || !skn) return;
            var uid = WCT.uid.Generate(8);
            var ctx = new WCT.context(DATA.context);
            var env = {
                Localize: this.Trans.bind(this)
            };
            var cbs = {
                callback_f: function() {},
                callback_s: null
            };
            ctx.Set('server_base_url', ctx.GetBase());
            var url = this.GetUrl(true);
            if (DATA.SHARE_URL) {
                url = url.replace(DATA.context.GetBase(), DATA.SHARE_URL)
            }
            var sp = new WCT.SharePopup(uid, ctx, env, cbs, {
                sel: sel,
                url: url,
                rtl: this.GetContentInfo().rtl
            }, skn);
            sp.Create(this.Trans('SHARE_CONTENT'));
            sp.SetZIndex(1)
        }
    }
})();
HANDLER.lesson = function(content, central_tracker) {
    HANDLER.base.apply(this, arguments);
    this.tracking_id_ = this.content_uid_ + ':' + this.content_mode_;
    var cts = null;
    if (content.tourstop != null) {
        cts = content.tourstop;
        var idx = Number(cts);
        if (!isNaN(idx) && idx > 0) cts = idx - 1
    }
    this.content_tourstop_ = cts;
    this.content_macro_ = content.macro || null;
    this.bookmark_tourstop_ = null;
    this.autostop_ = content.autostop || false;
    this.type_ = HANDLER.MODE.lesson;
    this.needs_slide_renderer_ = 1;
    this.feedback_stop_after_ = false;
    this.quiz_timeout_ = false;
    this.tracking_data_ = null;
    this.lesson_ = null;
    this.current_slide_ = {};
    this.renderer_ctx_ = null;
    this.continue_mode_ = null;
    this.steps_ = -1;
    this.tries_ = 0;
    this.restart_ = false;
    this.restart_topmost_ = false;
    this.cur_macro_ = null;
    this.startstop_ = null;
    this.score_max_ = 0;
    this.score_pass_ = 0;
    this.ready_to_start_ = false;
    this.video_mode_ready_ = false;
    this.set_topmost_css_ = false;
    this.topmost_to_ = null
};
HANDLER.lesson.prototype = new HANDLER.base;
WCT.ExtendObject(HANDLER.lesson, {
    START_STOP_TEXTKEY: {
        demo: 'Demo',
        praxis: 'Concurrent',
        uebung: 'Practice',
        test: 'Test',
        pres: 'FreePresentation',
        guided: 'GuidedPresentation'
    },
    CONTINUE_MODE_TOURSTOP: 'tourstop',
    CONTINUE_MODE_TASKSET: 'taskset',
    IN_PRACTICE: 1,
    IN_TEST: 2,
    IN_DEMO: 4,
    IN_PRAX: 8,
    INIT_MAX_TRIES: 300,
    INIT_WAIT: 100,
    ACTION_COMMAND_MAP: {
        lesson_play: 'play',
        lesson_pause: 'pause',
        lesson_next: 'next',
        lesson_prev: 'prev',
        next_task: 'next_task',
        prev_task: 'prev_task',
        jump_task: 'jump_task',
        startstop_print: 'startstop_print',
        startstop_details: 'startstop_details',
        stop: 'stop',
        jump: 'jump',
        restart: 'restart'
    },
    GetSlideObject: function() {
        return {
            stop_: null
        }
    },
    SetTopmostContent: function(uid) {
        var hdl = MANAGER.handler.Get(uid);
        if (!hdl || !hdl.slide_hdl_ || !hdl.topmost_) return;
        hdl.topmost_to_ = null;
        var doc = hdl.slide_hdl_.GetApi('document');
        var fm = doc && doc.getElementById('canvas');
        if (fm) hdl.topmost_.SetContent(fm);
        var idle = hdl.slide_hdl_.IsIdle(true);
        var rint = idle || BROWSER.IE && BROWSER.VERSION < 9 ? Topmost.REFRESH_INTERVAL : 50;
        hdl.topmost_to_ = WCT.SetTimeout(HANDLER.lesson.SetTopmostContent, rint, HANDLER.lesson, [uid])
    },
    ShowAsSlide: function(uid, shdl, info) {
        var orig = DATA.GetS('project!' + uid + ':entity.txt') || {};
        info.project = orig;
        var ev = {
            GetS: DATA.GetS.bind(DATA)
        };
        var ctx_map = {};
        for (var j in orig) {
            switch (j) {
                case 'shortdesc':
                case 'description':
                    ctx_map[orig.tclass + ':.' + j] = WCT.Placeholder.Resolve(orig[j] || '', info.ctx, ev);
                    break;
                case 'assets':
                    continue;
                    break;
                default:
                    ctx_map[orig.tclass + ':.' + j] = orig[j];
                    break
            }
        }
        shdl.SetContextMap(ctx_map);
        var octx = new WCT.context(info.ctx);
        octx.Set('project', uid);
        octx.SetScope('project');
        var ckeys = {
            caption: 1,
            shortdesc: 1,
            description: 1
        };
        var lkeys = {};
        var modes = DATA.LESSON_MODE;
        for (var m in modes) {
            orig[m + '_link'] = '';
            orig[m + '_caption'] = '';
            orig[m + '_v'] = false;
            ckeys[m + '_caption'] = 1;
            lkeys[m + '_link'] = 1
        }
        if (orig.assets) {
            for (var i = 0, a = null; a = orig.assets[i++];) {
                if (a.type == DATA.LESSON_TOUR_KEY && modes[a.mode]) {
                    orig[a.mode + '_caption'] = a.caption;
                    orig[a.mode + '_v'] = true
                }
            }
        }
        if (shdl.Template() == info.template) {
            var ctls = shdl.GetApi('Controls') || {};
            for (var id in ctls) {
                var n = ctls[id].GetName();
                if (ckeys[n]) {
                    var t = octx.ResolveHtmlString(orig[n] || '', octx);
                    shdl.UpdateControl(id, 'text', t);
                    var m = n.split('_');
                    if (m.length == 2) {
                        shdl.UpdateControl(id, 'hidden', !orig[m[0] + '_v'])
                    }
                } else if (lkeys[n]) {
                    var m = n.split('_')[0];
                    shdl.UpdateControl(id, 'link_to', 'project!' + uid + ':' + m);
                    shdl.UpdateControl(id, 'hidden', !orig[m + '_v'])
                }
            }
        } else {
            var ctls = info.slide.controls;
            for (var id in ctls) {
                var n = ctls[id].name;
                if (ckeys[n]) {
                    ctls[id].text = octx.ResolveHtmlString(orig[n] || '', octx);
                    var m = n.split('_');
                    if (m.length == 2 && !orig[m[0] + '_v']) {
                        ctls[id].hidden = true
                    }
                } else if (lkeys[n]) {
                    var m = n.split('_')[0];
                    ctls[id].link_to = 'project!' + uid + ':' + m;
                    ctls[id].hidden = !orig[m + '_v']
                }
            }
            HANDLER.slide.ShowSlide(info.template, shdl, info)
        }
    },
    GetOrigIdx: function() {
        var t = this.lesson_.tourstops;
        var i = this.step_;
        var cur = null;
        while (i >= 0) {
            if (t[i] && t[i].orig_index_ != null) {
                cur = t[i].orig_index_;
                break
            }
            i--
        }
        return cur != null ? cur : -2
    },
    NewOrigIdx: function() {
        var cur = HANDLER.lesson.GetOrigIdx.call(this);
        var lt = this.local_trackers_[this.tracking_id_];
        var cidx = lt ? lt.GetCurTsIndex() : null;
        return cur != null && (cidx != cur || arguments[0]) ? cur : -1
    }
});
WCT.ExtendObject(HANDLER.lesson.prototype, (function() {
    function show_startstop_page_(mode) {
        this.startstop_ = new HANDLER.lesson.StartStop(this.uid_, this.content_mode_);
        return this.startstop_.Show(mode)
    };

    function show_start_page_() {
        var cfg = this.config_;
        if (!cfg) {
            this.Fini(false, 'Lesson config not available!');
            return
        }
        if (!cfg.show_startpage || cfg.startpage.indexOf('no_pause.html') >= 0 || this.topmost_) {
            this.ready_to_start_ = true;
            return
        }
        this.state_ = HANDLER.base.STATE_STARTPAGE;
        if (!show_startstop_page_.call(this, 'start')) {
            this.ready_to_start_ = true
        }
    };

    function show_loading_(show) {
        var d = $(this.uid_ + '#loading');
        if (show) {
            if (!d) {
                d = $$('div');
                d.id = this.uid_ + '#loading';
                d.style.position = 'absolute';
                d.style.backgroundColor = '#FFFFFF';
                d.style.left = (this.x_ || 0) + 'px';
                d.style.top = (this.y_ || 0) + 'px';
                d.style.width = this.w_ ? this.w_ + 'px' : '100%';
                d.style.height = this.h_ ? this.h_ + 'px' : '100%';
                d.innerHTML = ['<table style="width:100%;height:100%">', '<tr>', '<td style="text-align:center;vertical-align:middle;font-size:16px;font-weight:bold">', this.Trans('LOADING_MACROSET'), '</td>', '</tr>', '</table>'].join('');
                if (!this.ready_to_start_) d.style.display = 'none';
                this.dom_.appendChild(d)
            } else if (this.ready_to_start_) {
                d.style.display = 'block'
            }
        } else if (d) {
            d.parentNode.removeChild(d)
        }
    };

    function show_stop_page_() {
        this.slide_hdl_.Clear();
        if (!this.config_.show_stoppage || arguments[0] === false) {
            this.Fini();
            return
        }
        this.state_ = HANDLER.base.STATE_STOPPAGE;
        if (!show_startstop_page_.call(this, 'stop')) {
            this.Fini()
        } else if (this.topmost_) {
            this.restart_topmost_ = true;
            this.topmost_.Hide(false)
        }
    };

    function set_state_(state) {
        var b = HANDLER.base;
        var s = this.state_;
        var p = this.panel_;
        var h = this.slide_hdl_;
        var m = this.content_mode_;
        switch (state) {
            case b.STATE_PLAYING:
                var old = this.state_;
                this.state_ = state;
                if (old == b.STATE_PAUSED) {
                    fire_start_events_.call(this)
                }
                if (p) {
                    set_panel_status_.call(this);
                    p.SetLessonPause(false, m)
                }
                h.Pause(false);
                break;
            case b.STATE_PAUSED:
                this.state_ = state;
                if (p) {
                    set_panel_status_.call(this);
                    p.SetLessonPause(true, m)
                }
                h.Pause(true);
                break;
            case b.STATE_IDLE:
                this.state_ = state;
                if (p) {
                    set_panel_status_.call(this);
                    p.SetLessonPause(true, m)
                }
                break
        }
    };

    function preprocess_lesson_(lesson) {
        var uh = lesson.user_header;
        var mp = Number(uh.mastery_score_percent);
        if (isNaN(mp)) mp = null;
        var meta = {
            author: uh.author,
            title: uh.title,
            language: uh.language,
            mastery_percent: mp,
            macroset: uh.shelftype,
            audio_ext: uh.audio_ext
        };
        return {
            meta: meta,
            tourstops: WCT.DeepCopy(lesson.tourstops),
            global_params: WCT.DeepCopy(lesson.global_params) || {}
        }
    };

    function init_tracking_() {
        var ct = this.central_tracker_;
        var tid = {
            uid: this.content_uid_,
            mode: this.content_mode_
        };
        var ben = ct ? ct.GetBackendType() : 'none';
        var d = TRACKING.InitLesson(tid, ben);
        var l = this.lesson_;
        var lt = new TRACKING.local.lesson(ct, d, l.meta, l.orig_tourstops_);
        this.local_trackers_[this.tracking_id_] = lt;
        lt.Start();
        this.bookmark_tourstop_ = lt.GetBookmark();
        lt.SetScores(this.score_max_, this.score_pass_);
        return !lt.Aborted()
    };

    function is_audio_lesson_() {
        var ts = this.lesson_ && this.lesson_.tourstops || [];
        for (var i = 0, t = null; t = ts[i++];) {
            if (t.audio && typeof t.audio_duration == 'number' && t.audio_duration > 0) return true
        }
        return false
    };

    function delayed_start_() {
        if (this.state_ == HANDLER.base.STATE_TERMINATED || this.state_ == HANDLER.base.STATE_FINISHED) {
            this.Fini(false, 'Errors during lesson init!');
            return
        }
        if (!window.MacroRenderer) {
            if (this.tries_++ < HANDLER.lesson.INIT_MAX_TRIES) {
                show_loading_.call(this, true);
                WCT.SetTimeout(delayed_start_, HANDLER.lesson.INIT_WAIT, this)
            } else {
                this.Fini(false, 'Unable to load MacroRenderer')
            }
            return
        } else if (!MacroRenderer.PreProcessTourstops || !window.MacroDefaultsHandler) {
            this.Fini(false, 'Bad MacroRenderer');
            return
        }
        var d = this.lesson_;
        var def = WCT.DeepCopy(DATA.GetS('config:simulation_fallbacks.js') || {});
        var gparams = {};
        if (def.global) {
            for (var i in def.global) {
                gparams[i] = def.global[i]
            }
            delete def.global
        }
        for (var i in d.global_params) {
            gparams[i] = d.global_params[i]
        }
        var rctx = new HANDLER.lesson.RendererCtx(this.uid_, this.content_uid_, this.content_mode_, 'current_slide_', d.meta.audio_ext || this.GetConfig('audio_ext'), this.GetConfig('vol_lesson'));
        this.renderer_ctx_ = rctx;
        rctx.SetDefaults(def);
        rctx.SetGlobalParams(gparams);
        rctx.SetVideoMode(this.GetConfig('video_mode'));
        MacroDefaultsHandler.PrepareGlobals(rctx);
        WCT.event.hotkey.SetIgnoreHotkey(this.GetConfig('keys_ignore_hotkeys'));
        if (d.tourstops) {
            d.orig_tourstops_ = d.tourstops;
            this.orig_steps_ = d.tourstops.length;
            d.tourstops = MacroRenderer.PreProcessTourstops(rctx, d.tourstops, {
                navigation: this.GetConfig('panel_lesson_nav_mode')
            })
        } else {
            d.orig_tourstops_ = [];
            d.orig_steps_ = 0;
            d.tourstops = []
        }
        this.steps_ = d.tourstops && d.tourstops.length || 0;
        show_loading_.call(this, false);
        start_.call(this)
    };

    function exec_start_unit_(ts) {
        if (!MacroRenderer.start_unit) return;
        for (var i = 0, t = null; t = ts[i++];) {
            if (!t.macros) continue;
            for (var j = 0, m = null; m = t.macros[j++];) {
                if (m.macro_template == 'start_unit') {
                    MacroRenderer.start_unit(this.renderer_ctx_, m);
                    return
                }
            }
        }
    };

    function get_start_step_(ts) {
        var cts = this.content_tourstop_;
        var bts = this.bookmark_tourstop_;
        if (typeof cts == 'string') {
            cts = ts.indexOfAtt(cts, 'uid');
            cts = ts[cts] && ts[cts].orig_index_ || null
        }
        if (typeof cts == 'number' && cts >= 0 && cts < this.orig_steps_) {
            this.step_ = ts.indexOfAtt(cts, 'orig_index_');
            if (this.step_ < 0) {
                for (var i = 0, t = null; t = ts[i]; i++) {
                    if (t.orig_index_ > cts) {
                        this.step_ = i;
                        break
                    }
                }
                if (this.step_ < 0) this.step_ = 0
            }
        } else if (typeof bts == 'number' && bts >= 0 && bts < this.orig_steps_) {
            this.step_ = ts.indexOfAtt(bts, 'orig_index_')
        }
    };

    function start_() {
        if (this.state_ == HANDLER.base.STATE_TERMINATED || this.state_ == HANDLER.base.STATE_FINISHED) {
            this.Fini(false, 'Errors during lesson init!');
            return
        }
        if (!this.ready_to_start_ || !window.MacroRenderer) {
            WCT.SetTimeout(start_, HANDLER.lesson.INIT_WAIT, this);
            return
        }
        if (this.steps_ <= 0 || !init_tracking_.call(this)) {
            stop_.call(this);
            return
        }
        var is_audio_mode = ['demo', 'pres', 'guided', 'praxis'].indexOf(this.content_mode_) >= 0
        var is_audio = is_audio_mode && is_audio_lesson_.call(this);
        this.audio_.disabled_ = !is_audio;
        this.state_ = HANDLER.base.STATE_STARTING;
        this.current_slide_ = {};
        var cfg = this.config_;
        var ts = this.lesson_ && this.lesson_.tourstops || [];
        var tit = [];
        var vis = [];
        var jmp = [];
        var nav_dis = cfg.panel_nav_disabled;
        for (var i = 0, c = null; c = ts[i]; i++) {
            tit.push(c.title);
            vis.push(c.visible);
            jmp.push(nav_dis ? false : c.jumpable)
        }
        var pnl = null;
        var tm = this.topmost_;
        if (tm) {
            tm.SetSteps(this.steps_, vis, jmp, tit)
        } else {
            pnl = this.CreatePanel()
        }
        if (pnl) {
            if (this.audio_.disabled_) {
                pnl.VisibleCommand('text_on', false);
                pnl.VisibleCommand('text_off', false);
                pnl.VisibleCommand('audio_mute', false);
                pnl.VisibleCommand('audio_unmute', false);
                pnl.VisibleCommand('audio_volume', false)
            }
            if (!cfg.panel_show_topic_title) pnl.VisibleTimelineText(false);
            pnl.SetTimelineTitles(tit);
            pnl.SetTimelineVisibles(vis);
            pnl.SetTimelineJumpables(jmp)
        }
        exec_start_unit_.call(this, ts);
        this.step_ = 0;
        if (!this.restart_) get_start_step_.call(this, ts);
        if (tm) {
            if (this.restart_topmost_) tm.Show();
            tm.SetStep(this.step_)
        }
        this.restart_ = false;
        this.restart_topmost_ = false;
        this.state_ = HANDLER.base.STATE_PLAYING;
        if (pnl) {
            pnl.SetLessonStep(this.step_, this.content_mode_);
            set_panel_status_.call(this);
            PRODUCER.VideoExport.Progress(this.step_ + 1, this.steps_ + 1);
            this.Resize(null, true)
        }
        if (is_audio) {
            var sto = cfg.playback_mode == 'audio_text' || cfg.playback_mode == 'text';
            var sao = cfg.playback_mode == 'audio_text' || cfg.playback_mode == 'audio';
            var text_on = WCT.ClampBoolean(sto);
            var audio_on = WCT.ClampBoolean(sao);
            this.ExecCommand(text_on ? 'text_on' : 'text_off');
            this.ExecCommand(audio_on ? 'audio_unmute' : 'audio_mute')
        }
        play_tourstop_.call(this)
    };

    function stop_() {
        this.state_ = HANDLER.base.STATE_FINISHED;
        this.RemovePanel();
        this.RemoveTaskInfo();
        show_stop_page_.call(this, arguments[0]);
        var tid = this.tracking_id_;
        var lts = this.local_trackers_
        if (lts && lts[tid]) {
            this.tracking_data_ = lts[tid].GetTrackingData();
            lts[tid].Destructor();
            delete lts[tid]
        }
    };

    function get_common_ts_ctls_(obj) {
        var sets = obj.task_sets_;
        var common = {};
        for (var uid in obj) {
            if (uid.charAt(uid.length - 1) != '_') {
                common[uid] = obj[uid]
            }
        }
        for (var s in sets) {
            var ctls = sets[s].ctls;
            for (var i = ctls.length - 1; i >= 0; i--) {
                delete common[ctls[i]]
            }
        }
        var e = true;
        for (var uid in common) {
            delete obj[uid];
            e = false
        }
        return e ? null : common
    };

    function render_tourstop_() {
        var cs = HANDLER.lesson.GetSlideObject();
        this.current_slide_ = cs;
        var ts = this.lesson_.tourstops[this.step_] || null;
        var ct = this.content_tourstop_;
        var cm = ct == ts.uid ? this.content_macro_ : null;
        var accept_cm = {
            new_page: 1,
            imported_page: 1,
            new_slide: 1
        };
        MANAGER.SetWindowTitle(ts.title);
        var macs = ts.macros || [];
        var rc = this.renderer_ctx_;
        rc.is_topmost = this.topmost_ != null;
        rc.is_audio_lesson = !this.audio_.disabled_;
        var clone = {};
        for (var k in ts) {
            if (k != 'macros') clone[k] = ts[k]
        }
        try {
            if (MacroRenderer.BeginTourstop) MacroRenderer.BeginTourstop(rc, clone);
            for (var i = 0, mac = null; mac = macs[i]; i++) {
                var n = mac.macro_template;
                if (n == 'start_unit') {
                    this.Track({
                        id: 'tour_start',
                        uid: mac.uid
                    })
                } else if (MacroRenderer[n] && (!cm || accept_cm[n] || mac.uid == cm)) {
                    MacroRenderer[n](rc, WCT.DeepCopy(mac))
                }
                if (cs.stop_) break
            }
            if (MacroRenderer.EndTourstop) MacroRenderer.EndTourstop(rc, clone)
        } catch (e) {
            Log(e, true);
            return null
        }
        return cs
    };

    function set_panel_status_() {
        if (this.panel_) {
            var st = HANDLER.base.STATE_MAP[this.state_];
            var txt = this.Trans(st);
            this.panel_.SetStatusText(txt)
        }
    };

    function handle_macro_event_(evt, shdl) {
        var evts = evt.split(';');
        for (var i = 0, l = evts.length; i < l; i++) {
            var e = evts[i];
            var idx = e.indexOf('.');
            var k = e.substr(0, idx);
            var v = e.substr(idx + 1);
            switch (k) {
                case 'panel':
                    var p = this.panel_;
                    if (v == 'show' || v == 'hide') {
                        this.ShowPanel(v == 'show')
                    } else if (p && v == 'exit') {
                        p.VisibleCommand('play', false);
                        p.VisibleCommand('pause', false);
                        p.VisibleCommand('next', false);
                        p.VisibleCommand('prev', false);
                        p.VisibleCommand('text_on', false);
                        p.VisibleCommand('text_off', false);
                        p.VisibleCommand('audio_mute', false);
                        p.VisibleCommand('audio_unmute', false);
                        p.VisibleCommand('audio_volume', false);
                        p.VisibleTimeline(false)
                    }
                    break;
                case 'taskinfo':
                    this.TaskInfoVisible(v == 'show', 'macroset');
                    break;
                case 'tracking':
                    if (v == 'end') {
                        var tid = this.tracking_id_;
                        var lt = this.local_trackers_ && this.local_trackers_[tid] || null;
                        if (lt) {
                            this.state_ = HANDLER.base.STATE_STOPPAGE;
                            if (this.current_slide_) this.Track({
                                id: 'tour_end',
                                uid: this.current_slide_.stop_
                            });
                            lt.Commit();
                            lt.Destructor();
                            delete this.local_trackers_[tid]
                        }
                    }
                default:
                    shdl.ExecEvent(e);
                    break
            }
        }
    };

    function play_tourstop_() {
        var backwards = arguments[0] || false;
        var ts = this.lesson_.tourstops[this.step_] || null;
        var lt = this.local_trackers_[this.tracking_id_];
        var tm = this.topmost_;
        if (!ts || this.current_slide_.stop_ && !backwards) {
            this.Track({
                id: 'tour_end',
                uid: this.current_slide_.stop_
            });
            if (lt) lt.Commit();
            this.cur_macro_ = null;
            var cfg = this.config_;
            if (cfg.feedback_enabled && cfg.feedback_force_end) {
                this.feedback_stop_after_ = true;
                this.ExecCommand('feedback');
                if (cfg.feedback_external_url) stop_.call(this)
            } else {
                stop_.call(this)
            }
            return
        }
        var new_idx = HANDLER.lesson.NewOrigIdx.call(this, arguments[1]);
        if (new_idx != -1) {
            lt.Commit();
            this.cur_macro_ = null
        }
        if (new_idx >= 0) lt.Progress(new_idx);
        var cs = render_tourstop_.call(this) || null;
        if (!cs) {
            this.Fini(false);
            return
        } else if (cs.stop_) {
            lt.Completed(cs.stop_ ? true : false)
        }
        if (this.panel_) this.panel_.SetTimelineText(ts.title || '');
        if (tm) tm.SetTitle(ts.title || '');
        var my = HANDLER.lesson;
        if (cs.ctl_count_ && cs.ctl_count_ > 0) {
            var shdl = this.slide_hdl_;
            if (typeof cs.macro_uid_ == 'string') {
                PRODUCER.SetMacroUid(cs.macro_uid_);
                this.cur_macro_ = cs.macro_uid_;
                delete cs.macro_uid_
            }
            BOOKMARK.SetState(this.uid_, {
                hash: this.step_ + 1
            });
            var common = get_common_ts_ctls_(cs) || MacroRenderer.GetEmptyCommon();
            shdl.Play({
                controls: common
            });
            if (tm && !this.set_topmost_css_) {
                this.set_topmost_css_ = true;
                var css = shdl.GetCSS(DEBUG ? null : ['slide.css']);
                for (var i = 0, l = css.length; i < l; i++) {
                    tm.SetCSS(css[i])
                }
            }
            fire_start_events_.call(this);
            delete cs.ctl_count_
        } else {
            this.continue_mode_ = my.CONTINUE_MODE_TOURSTOP;
            continue_.call(this, backwards)
        }
    };

    function fire_start_events_() {
        if (this.state_ != HANDLER.base.STATE_PAUSED) {
            var cs = this.current_slide_;
            var evts = cs.start_events_ || [];
            var shdl = this.slide_hdl_;
            for (var i = 0, l = evts.length; i < l; i++) {
                handle_macro_event_.call(this, evts[i], shdl)
            }
            delete cs.start_events_
        }
    };

    function track_timed_quiz_(cs, set) {
        var ctl = cs[set.macro_uid_];
        var c = this.GetContext();
        for (var j in ctl._src_ctx) {
            if (j != '_this') c.Set(j, ctl._src_ctx[j])
        }
        if (ctl._src_ctx._this) c.SetScope(ctl._src_ctx._this);
        var desc = cs[ctl.id + '_quiz_question'] ? cs[ctl.id + '_quiz_question'].text : '';
        var title = cs[ctl.id + '_quiz_title'] ? cs[ctl.id + '_quiz_title'].text : '';
        desc = this.GetContext().ResolveHtmlString(desc, c);
        this.Track({
            id: 'quiz_information',
            uid: ctl.id,
            type: ctl.type,
            caption: ctl.type,
            correct_responses: [],
            student_responses: [],
            weighting: ctl.points,
            result: 'timeout',
            description: desc,
            title: title,
            latency: 0,
            cur: 0
        })
    };

    function clean_cur_set_(cs, shdl) {
        if (!cs) return;
        var last_id = cs.task_sets_order_ && cs.task_sets_order_[cs.cur_set_] || null;
        var last = cs.task_sets_ && cs.task_sets_[last_id] || null;
        if (last) {
            var evts = last.end_events;
            for (var i = 0, l = evts.length; i < l; i++) {
                handle_macro_event_.call(this, evts[i], shdl)
            }
            last = last.ctls || [];
            for (var i = 0, l = last.length; i < l; i++) {
                var ctl = cs[last[i]];
                shdl.RemoveControl(ctl.id)
            }
        }
    };

    function play_cur_set_(cs, set) {
        var shdl = this.slide_hdl_;
        var tm = this.topmost_;
        if (this.quiz_timeout_ && set.is_quiz) {
            if (typeof set.macro_uid_ == 'string' && !set.is_skipable) {
                track_timed_quiz_.call(this, cs, set)
            }
            play_next_set_.call(this);
            return
        }
        if (typeof set.macro_uid_ == 'string') {
            PRODUCER.SetMacroUid(set.macro_uid_);
            this.cur_macro_ = set.macro_uid_
        }
        var ctls = set.ctls;
        var poi = false;
        var l = ctls.length;
        if (l) {
            for (var i = 0; i < l; i++) {
                var ctl = cs[ctls[i]];
                if (tm && ctl.type == 'bubble' && (ctl.mr_bubble_task || ctl.mr_bubble_expl)) {
                    var c = this.GetContext();
                    for (var j in ctl._src_ctx) {
                        if (j != '_this') c.Set(j, ctl._src_ctx[j])
                    }
                    if (ctl._src_ctx._this) c.SetScope(ctl._src_ctx._this);
                    var bt = this.GetContext().ResolveHtmlString(ctl.text, c);
                    tm.SetTask(bt)
                } else {
                    shdl.AddControl(ctl);
                    if (ctl.type == 'poi') poi = true
                }
            }
        } else if (tm) {
            tm.SetTask('')
        }
        if (tm && !poi) tm.ResetPOI();
        var idle = shdl.IsIdle();
        var evts = set.start_events;
        for (var i = 0, l = evts.length; i < l; i++) {
            handle_macro_event_.call(this, evts[i], shdl)
        }
        if (tm && !this.topmost_to_) {
            this.topmost_to_ = WCT.SetTimeout(HANDLER.lesson.SetTopmostContent, 50, HANDLER.lesson, [this.uid_])
        }
        if (!this.video_mode_ready_) {
            this.video_mode_ready_ = true;
            PRODUCER.VideoExport.Ready()
        } else if (cs.cur_set_ == 0 && idle) {
            PRODUCER.VideoExport.TickDone('play_cur_set_')
        }
    };

    function setup_cur_set_(direc) {
        var my = HANDLER.lesson;
        var cs = this.current_slide_;
        var id = cs.task_sets_order_ && cs.task_sets_order_[cs.cur_set_] || null;
        var set = cs.task_sets_ && cs.task_sets_[id] || null;
        this.continue_mode_ = my.CONTINUE_MODE_TOURSTOP;
        if (set) {
            play_cur_set_.call(this, cs, set);
            if (cs.cur_set_ + 1 < cs.task_sets_order_.length) {
                this.continue_mode_ = my.CONTINUE_MODE_TASKSET
            }
        } else {
            if (direc == 'prev') {
                this.step_ = Math.max(-1, this.step_ - 2);
                continue_.call(this, true)
            } else {
                continue_.call(this)
            }
        }
    };

    function play_next_set_() {
        var cs = this.current_slide_;
        var shdl = this.slide_hdl_;
        clean_cur_set_.call(this, cs, shdl);
        if (cs.cur_set_ == null) cs.cur_set_ = -1;
        cs.cur_set_++;
        setup_cur_set_.call(this, 'next')
    };

    function play_prev_set_() {
        var cs = this.current_slide_;
        var shdl = this.slide_hdl_;
        clean_cur_set_.call(this, cs, shdl);
        if (cs.cur_set_ != null) {
            if (cs.task_sets_order_ && cs.task_sets_) {
                var cur = cs.cur_set_ - 1;
                var ok = false;
                do {
                    var tid = cs.task_sets_order_[cur] || null;
                    var set = cs.task_sets_[tid] || null;
                    if (!set || !set.ctls.length) {
                        cur--
                    } else {
                        ok = true
                    }
                } while (cur >= 0 && !ok);
                cs.cur_set_ = cur + 1
            }
        } else {
            cs.cur_set_ = 1
        }
        cs.cur_set_--;
        setup_cur_set_.call(this, 'prev')
    };

    function play_last_set_() {
        var cs = this.current_slide_;
        var shdl = this.slide_hdl_;
        clean_cur_set_.call(this, cs, shdl);
        cs.cur_set_ = cs.task_sets_order_ && cs.task_sets_order_.length || 0;
        play_prev_set_.call(this)
    };

    function play_set_(uid) {
        var cs = this.current_slide_;
        var shdl = this.slide_hdl_;
        clean_cur_set_.call(this, cs, shdl);
        cs.cur_set_ = cs.task_sets_order_.indexOf(uid);
        setup_cur_set_.call(this, 'next')
    };

    function continue_() {
        if (this.autostop_) {
            stop_.call(this, false);
            return
        };
        var bw = arguments[0] || false;
        var my = HANDLER.lesson;
        var cm = this.continue_mode_;
        if (cm == my.CONTINUE_MODE_TOURSTOP) {
            clean_cur_set_.call(this, this.current_slide_, this.slide_hdl_);
            if (arguments[1]) this.current_slide_ = {};
            this.step_++;
            if (this.panel_) this.panel_.SetLessonStep(this.step_, this.content_mode_);
            if (this.topmost_) this.topmost_.SetStep(this.step_);
            PRODUCER.VideoExport.Progress(this.step_ + 1, this.steps_ + 1);
            play_tourstop_.call(this, bw, arguments[1])
        } else if (cm == my.CONTINUE_MODE_TASKSET) {
            if (bw) {
                play_last_set_.call(this)
            } else {
                play_next_set_.call(this)
            }
        }
    };
    return {
        Destructor: function() {
            if (arguments[0]) {
                var lt = this.local_trackers_[this.tracking_id_];
                if (lt) lt.Completed(false)
            }
            WCT.CleanupObject(this.lesson_);
            WCT.CleanupObject(this.current_slide_);
            this.lesson_ = null;
            this.current_slide_ = null;
            this.tracking_data_ = null;
            if (this.topmost_to_) {
                WCT.ClearTimeout(this.topmost_to_);
                this.topmost_to_ = null
            }
            if (this.renderer_ctx_) {
                this.renderer_ctx_.Destructor();
                this.renderer_ctx_ = null
            }
            if (typeof MacroRenderer != 'undefined' && MacroRenderer && MacroRenderer.Cleanup) {
                MacroRenderer.Cleanup()
            }
            if (this.startstop_) {
                this.startstop_.Destructor();
                this.startstop_ = null
            }
            HANDLER.base.prototype.Destructor.call(this)
        },
        Start: function() {
            HANDLER.base.prototype.Start.call(this);
            var shdl = this.slide_hdl_;
            shdl.SetConfig('show_focus_layer', !!this.config_.show_focus_layer);
            var d = DATA.GetS('project!' + this.content_uid_ + ':lesson.js');
            if (!d) {
                this.Fini(false, 'Unable to load project!' + this.content_uid_ + ':lesson.js');
                return
            }
            d = preprocess_lesson_.call(this, d);
            this.lesson_ = d;
            WCT.SetTimeout(show_start_page_, 1, this);
            if (!MANAGER.AddMacroset(d.meta.macroset)) {
                this.Fini(false, 'Unable to include MacroRenderer');
                return
            }
            delayed_start_.call(this)
        },
        GetCompletionState: function() {
            var lt = this.local_trackers_[this.tracking_id_];
            var td = lt ? lt.GetTrackingData() : this.tracking_data_;
            if (!td) return HANDLER.base.prototype.GetCompletionState.call(this);
            var comp = td.completed;
            var pass = null;
            var scur = null;
            var smax = null;
            if (TRACKING.SCORABLE_LESSONS[this.content_mode_]) {
                scur = td.cur;
                smax = comp ? td.cum : td.max;
                pass = td.passed
            }
            var pcur = null;
            var pmax = null;
            if (typeof comp === 'boolean') {
                pcur = comp ? 1 : 0;
                pmax = 1
            }
            return {
                completed: comp,
                passed: pass,
                score: {
                    cur: scur,
                    max: smax
                },
                progress: {
                    cur: pcur,
                    max: pmax
                }
            }
        },
        ExecCommand: function(cmd) {
            var param = arguments[1];
            var st = this.state_;
            var b = HANDLER.base;
            cmd = {
                exit: 'stop'
            }[cmd] || cmd;
            b.prototype.ExecCommand.apply(this, arguments);
            var pnl = this.panel_;
            var shdl = this.slide_hdl_;
            var rctx = this.renderer_ctx_;
            var audio = this.audio_;
            var my = HANDLER.lesson;
            switch (cmd) {
                case 'help':
                    MANAGER.OpenHelp(this.content_language_, DATA.HELP_LESSON_KEY);
                    break;
                case 'audio_mute':
                    if (audio.disabled_) break;
                    this.ExecCommand('text_on');
                    if (pnl) {
                        pnl.VisibleCommand('audio_mute', false);
                        pnl.VisibleCommand('audio_unmute', true)
                    }
                    if (rctx) rctx.internal.audio_on = false;
                    break;
                case 'audio_unmute':
                    if (audio.disabled_) break;
                    if (pnl) {
                        pnl.VisibleCommand('audio_mute', true);
                        pnl.VisibleCommand('audio_unmute', false)
                    }
                    if (rctx) rctx.internal.audio_on = true;
                    break;
                case 'text_on':
                    if (pnl) {
                        pnl.VisibleCommand('text_on', false);
                        pnl.VisibleCommand('text_off', true)
                    }
                    if (rctx) rctx.internal.text_on = true;
                    shdl.VisibleTaskBubble(true);
                    shdl.VisibleExplanationBubble(true);
                    break;
                case 'text_off':
                    this.ExecCommand('audio_unmute');
                    if (pnl) {
                        pnl.VisibleCommand('text_on', true);
                        pnl.VisibleCommand('text_off', false)
                    }
                    if (rctx) rctx.internal.text_on = false;
                    shdl.VisibleTaskBubble(false);
                    shdl.VisibleExplanationBubble(false);
                    break;
                case 'play':
                    switch (st) {
                        case b.STATE_STARTPAGE:
                            if (this.startstop_) this.startstop_.Destructor();
                            this.startstop_ = null;
                            this.ready_to_start_ = true;
                            start_.call(this);
                            break;
                        case b.STATE_PAUSED:
                            set_state_.call(this, b.STATE_PLAYING);
                            break;
                        case b.STATE_IDLE:
                            this.ExecCommand('next_task');
                            break
                    }
                    break;
                case 'pause':
                    if (st == b.STATE_PLAYING || st == b.STATE_IDLE) {
                        set_state_.call(this, b.STATE_PAUSED)
                    }
                    break;
                case 'next':
                    switch (st) {
                        case b.STATE_STOPPAGE:
                            this.Fini();
                            break;
                        case b.STATE_PLAYING:
                        case b.STATE_PAUSED:
                        case b.STATE_IDLE:
                            if (param) {
                                if (param.respect_jumpable) {
                                    var ts = this.lesson_.tourstops;
                                    var s = this.step_;
                                    while (ts[++s] && !ts[s].jumpable);
                                    this.step_ = s - 1
                                }
                                if (param.track && this.cur_macro_) {
                                    this.Track({
                                        id: 'tour_next',
                                        uid: this.cur_macro_
                                    })
                                }
                            }
                            this.continue_mode_ = my.CONTINUE_MODE_TOURSTOP;
                            continue_.call(this);
                            break
                    }
                    break;
                case 'restart':
                    clean_cur_set_.call(this, this.current_slide_, shdl);
                    if (this.startstop_) this.startstop_.Destructor();
                    if (rctx) rctx.CleanupInternal();
                    if (this.slide_ctx_) this.slide_ctx_.CleanupStore();
                    if (this.topmost_) this.topmost_.Restart();
                    this.ctx_config_ = {};
                    this.startstop_ = null;
                    this.quiz_timeout_ = false;
                    this.restart_ = true;
                    start_.call(this);
                    break;
                case 'prev':
                case 'previous':
                    switch (st) {
                        case b.STATE_PLAYING:
                        case b.STATE_PAUSED:
                        case b.STATE_IDLE:
                            if (param && param.respect_jumpable) {
                                var ts = this.lesson_.tourstops;
                                var s = this.step_;
                                while (ts[--s] && !ts[s].jumpable);
                                this.step_ = Math.max(-1, s - 1)
                            } else {
                                this.step_ = Math.max(-1, this.step_ - 2)
                            }
                            if (param && param.track && this.cur_macro_) {
                                this.Track({
                                    id: 'tour_prev',
                                    uid: this.cur_macro_
                                })
                            }
                            this.continue_mode_ = my.CONTINUE_MODE_TOURSTOP;
                            continue_.call(this, true);
                            break
                    }
                    break;
                case 'next_task':
                    if (st == b.STATE_PLAYING || st == b.STATE_PAUSED || st == b.STATE_IDLE) {
                        var nt = this.ctx_config_.next_task;
                        if (nt == 'default') {
                            delete this.ctx_config_.next_task
                        } else if (nt) {
                            var nt_idx = nt.indexOf('!');
                            var nt_type = 'jump_task';
                            if (nt_idx > 0) {
                                nt_type = nt.substr(0, nt_idx) == 'taskset' ? 'jump_task' : 'jump';
                                nt = nt.substr(nt_idx + 1)
                            }
                            delete this.ctx_config_.next_task;
                            return this.ExecCommand(nt_type, nt)
                        }
                        play_next_set_.call(this)
                    }
                    break;
                case 'prev_task':
                    if (st == b.STATE_PLAYING || st == b.STATE_PAUSED || st == b.STATE_IDLE) {
                        play_prev_set_.call(this)
                    }
                    break;
                case 'jump_task':
                    if (st == b.STATE_PLAYING || st == b.STATE_PAUSED || st == b.STATE_IDLE) {
                        play_set_.call(this, param)
                    }
                    break;
                case 'jump':
                    if (st == b.STATE_PLAYING || st == b.STATE_PAUSED || st == b.STATE_IDLE) {
                        var dest = param;
                        if (dest == 'next' || dest == 'prev') {
                            return this.ExecCommand(dest)
                        } else if (typeof dest == 'string') {
                            dest = this.lesson_.tourstops.indexOfAtt(dest, 'uid')
                        }
                        if (dest >= 0 && dest < this.steps_) {
                            this.step_ = dest - 1;
                            if (this.cur_macro_) {
                                this.Track({
                                    id: 'tour_jump',
                                    uid: this.cur_macro_
                                })
                            }
                            this.continue_mode_ = my.CONTINUE_MODE_TOURSTOP;
                            continue_.call(this, false, true)
                        } else {
                            this.ExecCommand('next_task')
                        }
                    }
                    break;
                case 'stop':
                    if (st != b.STATE_STOPPAGE) {
                        clean_cur_set_.call(this, this.current_slide_, shdl);
                        var lt = this.local_trackers_[this.tracking_id_];
                        if (lt) lt.Completed(false)
                    }
                    this.current_slide_ = {};
                    stop_.call(this, false);
                    break;
                case 'startstop_print':
                    if (this.startstop_) this.startstop_.Print();
                    break;
                case 'startstop_details':
                    if (this.startstop_) this.startstop_.Details();
                    break
            }
        },
        SetScores: function(max, pass) {
            var lt = this.local_trackers_[this.tracking_id_];
            if (lt) lt.SetScores(max, pass);
            this.score_max_ = max;
            this.score_pass_ = pass
        },
        GetMacrosByType: function(type) {
            var ret = [];
            var ts = [];
            if (arguments[1]) {
                ts = this.GetCurrentTourstop();
                ts = ts != null ? [ts] : []
            } else {
                ts = this.lesson_ && this.lesson_.tourstops || []
            }
            for (var i = 0, t = null; t = ts[i++];) {
                for (var j = 0, m = null; m = t.macros[j++];) {
                    if (m.macro_template == type) ret.push(m)
                }
            }
            return ret
        },
        GetLessonMasteryPercent: function() {
            return this.lesson_ && this.lesson_.meta ? this.lesson_.meta.mastery_percent || 0 : 0
        },
        GetTrackingData: function() {
            var lt = this.local_trackers_[this.tracking_id_];
            if (!lt) return null;
            if (arguments[0]) {
                var d = lt.GetQuizTrackingData(arguments[1]);
                lt.ClearQuizTrackingData();
                return d
            } else {
                return lt.GetTrackingData()
            }
        },
        GetQuizScore: function() {
            var lt = this.local_trackers_[this.tracking_id_];
            return lt ? lt.GetQuizScore() : null
        },
        GetCurrentTourstop: function() {
            var l = this.lesson_;
            var t = l && l.tourstops && l.tourstops[this.step_] || null;
            if (t && t.orig_index_ == null) t.orig_index_ = HANDLER.lesson.GetOrigIdx.call(this);
            return t
        },
        GetCurrentMacro: function() {
            var ts = this.GetCurrentTourstop();
            if (ts && ts.macros) {
                mac = ts.macros.indexOfAtt(this.cur_macro_, 'uid');
                return ts.macros[mac] || null
            }
            return null
        },
        GetTitle: function() {
            var ts = this.lesson_.tourstops[this.step_] || null;
            return ts && ts.title
        },
        SetConfig: function(cfg, val) {
            HANDLER.base.prototype.SetConfig.apply(this, arguments);
            if (cfg == 'stop' && val) {
                var lt = this.local_trackers_[this.tracking_id_];
                if (lt) {
                    lt.Commit();
                    lt.Completed(true);
                    lt.Destructor();
                    delete this.local_trackers_[this.tracking_id_];
                    this.state_ = HANDLER.base.STATE_ENDPAGE
                }
            }
        },
        ShowDemoHelp: function(ts_uid) {
            var obj = {
                type: HANDLER.MODE.lesson,
                tclass: this.content_tclass_,
                uid: this.content_uid_,
                mode: 'demo',
                tourstop: ts_uid,
                macro: arguments[1] || null,
                autostop: true
            };
            MANAGER.Execute(obj, {
                force_same: true
            });
            var testo_id = arguments[2] || null;
            if (testo_id) this.slide_hdl_.ExecEvent(testo_id + '.demo_help')
        },
        OnSlideState: function(evt, total, system, audio, video) {
            HANDLER.base.prototype.OnSlideState.apply(this, arguments);
            var b = HANDLER.base;
            var st = this.state_;
            if (total - system == 0 && !audio && !video) {
                if (st == b.STATE_PLAYING) {
                    set_state_.call(this, b.STATE_IDLE)
                }
            } else if (st == b.STATE_IDLE) {
                set_state_.call(this, b.STATE_PLAYING)
            }
        },
        GetContentInfo: function() {
            var i = HANDLER.base.prototype.GetContentInfo.call(this);
            i.macro = this.cur_macro_;
            return i
        },
        GlobalQuizTimeout: function() {
            this.quiz_timeout_ = true
        },
        OnBookmark: function(state) {
            var idx = Number(state.hash);
            if (!isNaN(idx)) this.ExecCommand('jump', --idx)
        },
        GetUrl: function() {
            var url = HANDLER.base.prototype.GetUrl.apply(this, arguments);
            url += ':' + this.content_mode_;
            if (arguments[0]) {
                var ts = this.GetCurrentTourstop();
                if (ts) url += '#' + ts.uid
            }
            return url
        },
        onpanel_: function(evt) {
            if (evt.cmd == null || evt.cmd == 'audio_volume' || evt.cmd != 'next' && evt.cmd != 'prev') {
                return HANDLER.base.prototype.onpanel_.call(this, evt)
            }
            this.ExecCommand(evt.cmd, {
                respect_jumpable: true,
                track: true
            })
        },
        onkeydown_: function(key, type, evt) {
            var cmd = HANDLER.base.prototype.onkeydown_.apply(this, arguments);
            if (!cmd) return;
            var tm = this.topmost_;
            switch (cmd[0]) {
                case 'play':
                case 'pause':
                    if (cmd.length == 1) {
                        WCT.SetTimeout(this.ExecCommand, 1, this, [cmd[0]])
                    } else {
                        var s = this.state_;
                        var b = HANDLER.base;
                        var c = s == b.STATE_PAUSED || s == b.STATE_STARTPAGE ? 'play' : 'pause';
                        WCT.SetTimeout(this.ExecCommand, 1, this, [c])
                    }
                    break;
                case 'stop':
                    WCT.SetTimeout(this.ExecCommand, 1, this, ['exit']);
                    break;
                case 'back':
                    if (tm) {
                        if (!tm.IsMinimized()) {
                            WCT.SetTimeout(this.ExecCommand, 1, this, ['prev_task'])
                        }
                    } else {
                        var cfg = {
                            respect_jumpable: true,
                            track: true
                        };
                        WCT.SetTimeout(this.ExecCommand, 1, this, ['prev', cfg])
                    }
                    break;
                case 'next':
                    var cm = this.content_mode_;
                    if (cm == 'guided' || cm == 'pres') {
                        WCT.SetTimeout(this.ExecCommand, 1, this, ['next_task'])
                    } else if (tm) {
                        if (!tm.IsMinimized()) {
                            WCT.SetTimeout(this.ExecCommand, 1, this, ['next_task'])
                        }
                    } else {
                        var cfg = {
                            respect_jumpable: true,
                            track: true
                        };
                        WCT.SetTimeout(this.ExecCommand, 1, this, ['next', cfg])
                    }
                    break;
                case 'feedback':
                    WCT.SetTimeout(this.ExecCommand, 1, this, ['feedback']);
                    break;
                case 'show_highlight':
                    var shl = this.slide_hdl_;
                    if (shl) shl.ShowAllHighlights(true);
                    break
            }
        },
        onfeedback_: function() {
            if (this.feedback_stop_after_) {
                this.feedback_stop_after_ = false;
                if (this.feedback_) {
                    this.feedback_.Destructor();
                    this.feedback_ = null
                }
                stop_.call(this)
            } else {
                HANDLER.base.prototype.onfeedback_.call(this)
            }
        }
    }
})());
HANDLER.book = function(content, central_tracker) {
    HANDLER.base.apply(this, arguments);
    var bm;
    if (content.bookmark) {
        bm = content.bookmark.split('!');
        bm = bm.length == 2 ? bm[0] + '!' + bm[1] : bm[0]
    }
    this.content_bookmark_ = bm;
    this.type_ = HANDLER.MODE.book;
    this.needs_slide_renderer_ = 1;
    this.feedback_forced_ = false;
    this.from_socket_ = false;
    this.toc_ = null;
    this.busy_ = false;
    this.search_ = null;
    this.search_step_ = null;
    this.preventNavigation_ = false
};
HANDLER.book.prototype = new HANDLER.base;
HANDLER.book.ACTION_COMMAND_MAP = {
    book_first: 'first',
    book_last: 'last',
    book_prev: 'prev',
    book_next: 'next',
    book_nextchapter: 'next_chapter',
    book_prevchapter: 'prev_chapter',
    book_index: 'index',
    book_search: 'search_keywords'
};
WCT.ExtendObject(HANDLER.book.prototype, (function() {
    function show_slide_(step) {
        if (this.busy_) return;
        this.busy_ = true;
        var direc = arguments[1] || 'next';
        var toc = this.toc_;
        var book = toc.GetBook(step);
        var slide = toc.GetSlide(step);
        if (!book || !slide) {
            this.Fini(false, 'unable to get book or slide for step: ' + step);
            return
        }
        MANAGER.SetWindowTitle(slide.caption);
        this.ctx_.slide = slide.uid;
        this.step_ = step;
        BOOKMARK.SetState(this.uid_, {
            hash: slide.tclass + '!' + slide.uid
        });
        var shdl = this.slide_hdl_;
        if (book.uid != this.tracking_id_) {
            shdl.MediaStopBooksound()
        }
        toc.MarkVisited(slide.uid, slide.tclass);
        var cfg = this.config_;
        if (this.panel_) {
            this.panel_.SetBookStep(step);
            if (cfg.feedback_enabled && cfg.feedback_force_end && step + 1 == this.steps_ && !this.feedback_forced_) {
                this.feedback_forced_ = true;
                WCT.SetTimeout(this.ExecCommand, 5, this, ['feedback'])
            }
            if (cfg.content_slide != '') {
                var is_cs = 'slide!' + slide.uid == cfg.content_slide;
                this.panel_.ActiveCommand('index', is_cs)
            }
        }
        if (!this.from_socket_) {
            this.socket_.Unsync()
        }
        var trans = '';
        if (direc == 'next') {
            if (cfg.en_transition) trans = cfg.t2_transition
        } else if (cfg.en_transition_rev) {
            trans = cfg.t2_transition_rev
        }
        var d = null;
        var tpl = null;
        if (slide.tclass == 'slide') {
            d = DATA.GetS('slide!' + slide.uid + ':slide.js')
        } else if (slide.tclass == 'project') {
            d = WCT.DeepCopy(DATA.GetS(cfg.book_project_template + ':slide.js'));
            tpl = cfg.book_project_template.replace(/^.*?!/, '')
        } else {
            d = WCT.DeepCopy(DATA.GetS(cfg.book_noslide_template + ':slide.js'));
            tpl = cfg.book_noslide_template.replace(/^.*?!/, '')
        }
        if (!d || !d.controls) d = {
            controls: {}
        };
        var chap = toc.GetChapter(step);
        var bd = DATA.GetS('book!' + this.content_uid_ + ':entity.txt');
        var bs = d.controls.page && d.controls.page.skin || 'standard';
        var ictx = this.GetContext();
        if (chap) {
            if (chap.uid == bd.uid) {
                chap = null
            } else {
                ictx.Set(chap.tclass, chap.uid)
            }
        }
        shdl.SetBookStyle(bs);
        shdl.SetConfig('transition', trans);
        shdl.SetConfig('book_style', bd.book_style || '');
        var info = {
            book: bd,
            chapter: chap,
            step: step + 1,
            steps: this.steps_,
            slide: d,
            template: tpl,
            ctx: ictx
        };
        if (slide.tclass == 'slide') {
            HANDLER.slide.ShowSlide(slide.uid, shdl, info)
        } else if (slide.tclass == 'project') {
            HANDLER.lesson.ShowAsSlide(slide.uid, shdl, info)
        } else {
            HANDLER.cdoc.ShowAsSlide(slide.tclass, slide.uid, shdl, info)
        }
        shdl.Template(tpl);
        if (book.uid != this.tracking_id_) {
            if (this.tracking_id_) this.local_trackers_[this.tracking_id_].Close();
            this.tracking_id_ = book.uid;
            this.local_trackers_[book.uid].Open()
        }
        this.local_trackers_[book.uid].Progress(slide.uid);
        this.busy_ = false
    };

    function init_tracking_() {
        var toc = this.toc_;
        var ct = this.central_tracker_;
        var ben = ct ? ct.GetBackendType() : 'none';
        var lts = this.local_trackers_;
        var ltp = TRACKING.local.pageset;
        var books = toc.GetBooks();
        var vis = {};
        for (var uid in books) {
            var b = TRACKING.InitBook(books[uid], ben);
            if (b) {
                var lt = new ltp(ct, b);
                lts[uid] = lt;
                WCT.ExtendObject(vis, lt.GetVisited())
            }
        }
        for (var slide in vis) {
            toc.MarkVisited(slide)
        }
        if (ct) {
            var is_coll = false;
            try {
                is_coll = ct.IsCollaborator()
            } catch (e) {
                Log(e)
            }
            if (is_coll) {
                return vis[this.config_.step] ? this.config_.step : null
            } else {
                try {
                    var sco_bm = ct.GetBookmark();
                    if (sco_bm == this.content_uid_ || books[sco_bm]) {
                        return ct.GetBookmark(sco_bm) || null
                    }
                } catch (e) {
                    Log(e)
                }
            }
        }
        return null
    };

    function on_kw_search_(apply) {
        if (!apply && this.search_step_ != null) {
            this.ExecCommand('jump', this.search_step_);
            this.search_.Destructor();
            this.search_ = null;
            this.search_step_ = null;
            return
        }
        var slide_uid = arguments[1] || null;
        if (slide_uid) {
            var step = this.toc_.GetSlideOrderIdx('cur', slide_uid);
            if (step != null) this.ExecCommand('jump', step)
        } else {
            this.search_step_ = null;
            this.search_.Destructor();
            this.search_ = null
        }
    };
    return {
        Destructor: function() {
            if (this.search_) {
                this.search_.Destructor();
                this.search_ = null
            }
            if (this.toc_) {
                this.toc_.Destructor();
                this.toc_ = null
            }
            HANDLER.base.prototype.Destructor.call(this)
        },
        GetTitle: function() {
            var sl = this.toc_ && this.toc_.GetSlide(this.step_);
            return sl.caption || this.config_.caption
        },
        GetTocObject: function() {
            return {
                nextSlide: this.step_ + 1 < this.steps_,
                previousSlide: this.step_ > 0,
                toc: this.toc_
            }
        },
        GetToc: function() {
            return this.toc_
        },
        GetSearch: function() {
            return this.search_ || null
        },
        GetContext: function() {
            var context = HANDLER.base.prototype.GetContext.call(this);
            if (this.ctx_.slide) context.SetScope('slide');
            return context
        },
        GetCurrentSlide: function() {
            var t = this;
            return t.toc_ ? t.toc_.GetSlide(t.step_) : null
        },
        GetCompletionState: function() {
            if (!this.toc_) return HANDLER.base.prototype.GetCompletionState.call(this);
            var vis = this.toc_.GetVisited();
            var vsl = 0;
            for (var i = 0, c = null; c = vis[i++];) {
                if (c.tclass === 'slide' && c.visited) vsl++
            }
            var max = this.steps_;
            return {
                completed: vsl === max,
                passed: null,
                score: {
                    cur: null,
                    max: null
                },
                progress: {
                    cur: vsl,
                    max: max
                }
            }
        },
        Start: function() {
            HANDLER.base.prototype.Start.call(this);
            var cfg = this.config_;
            var toc = null;
            if (window.BOOK_SCO_TOC) {
                toc = window.BOOK_SCO_TOC;
                window.BOOK_SCO_TOC = null
            } else {
                var tcfg = {
                    book_group: cfg.book_show_book_group,
                    cdoc: cfg.book_show_cdoc,
                    project: cfg.book_show_project
                };
                toc = new Toc(this.content_tclass_, this.content_uid_, tcfg)
            }
            this.toc_ = toc;
            this.steps_ = toc.GetSlideCount();
            var p = this.CreatePanel();
            if (this.steps_ > 0) {
                if (cfg.handler_socket) {
                    this.socket_.Init()
                }
                var last = init_tracking_.call(this);
                if (last) last = toc.GetSlideOrderIdx('cur', last);
                if (this.content_bookmark_) {
                    var last_bm = toc.GetSlideOrderIdx('cur', this.content_bookmark_);
                    if (last_bm != null) last = last_bm
                }
                show_slide_.call(this, last || 0)
            } else {
                if (p) {
                    p.EnableCommand('index', false);
                    p.EnableCommand('back', false);
                    p.EnableCommand('play', false);
                    p.EnableCommand('next', false);
                    p.EnableCommand('previous', false);
                    p.EnableCommand('search_keywords', false);
                    p.EnableCommand('audio_play', false);
                    p.EnableCommand('audio_pause', false);
                    p.EnableCommand('audio_unmute', false);
                    p.EnableCommand('audio_mute', false);
                    p.EnableCommand('audio_volume', false);
                    p.EnableToc(false);
                    p.SetBookStep(0)
                }
                var d = $$('div');
                d.id = this.uid_ + '#main';
                d.style.backgroundColor = '#FFFFFF';
                d.style.position = 'absolute';
                this.dom_.appendChild(d);
                this.main_ = d
            }
        },
        PreventNavigation: function(val) {
            this.preventNavigation_ = val;
            var pnl = this.GetPanel() || null;
            pnl && pnl.PreventNavigation(val)
        },
        ExecCommand: function(cmd) {
            HANDLER.base.prototype.ExecCommand.apply(this, arguments);
            var toc = this.toc_;
            var stp = this.step_;
            var pnav = this.preventNavigation_;
            switch (cmd) {
                case 'help':
                    MANAGER.OpenHelp(this.content_language_, DATA.HELP_BOOK_KEY);
                    break;
                case 'index':
                    var cs = this.config_.content_slide;
                    if (cs != '') {
                        cs = cs.substr(6);
                        var step = toc.GetSlideOrderIdx('cur', cs);
                        if (step != null) this.ExecCommand('jump', step)
                    }
                    break;
                case 'prev':
                case 'previous':
                    if (pnav) break;
                    if (stp > 0) show_slide_.call(this, stp - 1, 'prev');
                    break;
                case 'next':
                    if (pnav) break;
                    if (stp + 1 < this.steps_) show_slide_.call(this, stp + 1);
                    break;
                case 'next_chapter':
                    if (pnav) break;
                    var step = toc.GetSlideOrderIdx('next', stp);
                    if (step != null) show_slide_.call(this, step);
                    break;
                case 'prev_chapter':
                    if (pnav) break;
                    var step = toc.GetSlideOrderIdx('prev', stp);
                    if (step != null) show_slide_.call(this, step, 'prev');
                    break;
                case 'jump':
                    if (pnav) break;
                    var dest = arguments[1];
                    if (dest >= 0 && dest < this.steps_ && dest != stp) {
                        show_slide_.call(this, dest, dest > stp ? 'next' : 'prev')
                    }
                    break;
                case 'jump_slide':
                case 'jump_book':
                case 'jump_group':
                case 'jump_cdoc':
                    var idx = toc.GetSlideOrderIdx('cur', arguments[1]);
                    if (idx != null) this.ExecCommand('jump', idx);
                    break;
                case 'search_keywords':
                    var skin = this.skin_.search;
                    if (skin) {
                        var kw = toc.GetKeywords();
                        this.search_ = new Popup.KeywordSearch({
                            hdl_id: this.uid_,
                            skin: skin,
                            callback: on_kw_search_,
                            scope: this,
                            keywords: kw
                        });
                        if (!this.search_.Show()) {
                            this.search_.Destructor();
                            this.search_ = null
                        } else {
                            this.search_step_ = stp
                        }
                    }
                    break;
                case 'first':
                    this.ExecCommand('jump', 0);
                    break;
                case 'last':
                    this.ExecCommand('jump', this.steps_ - 1);
                    break;
                case 'text_off':
                case 'text_on':
                    var pnl = this.panel_;
                    if (pnl) {
                        pnl.VisibleCommand('text_on', cmd === 'text_off');
                        pnl.VisibleCommand('text_off', cmd === 'text_on')
                    }
                    var shdl = this.slide_hdl_;
                    shdl.SetConfig('show_tts_subtitle', cmd === 'text_on');
                    shdl.HandleSubtitle();
                    break;
                case 'play':
                case 'pause':
                    var pnl = this.panel_;
                    if (pnl) {
                        pnl.VisibleCommand('pause', cmd === 'play');
                        pnl.VisibleCommand('play', cmd === 'pause')
                    }
                    this.slide_hdl_.UserPause(cmd === 'pause');
                    break
            }
        },
        ExecAction: function(act) {
            HANDLER.base.prototype.ExecAction.apply(this, arguments);
            switch (act) {
                case 'book_sound_mute':
                case 'book_sound_unmute':
                    var par = {
                        channel: 'Pagesound',
                        muted: act == 'book_sound_mute'
                    };
                    this.ExecCommand('audio_c_mute', par);
                    break
            }
        },
        StartExecutable: function(info) {
            var win_props = arguments[1] || null;
            var cfg = this.config_;
            var tc = info.tclass;
            if (!win_props && (info.type == HANDLER.MODE.slide || tc == 'cdoc' && cfg.book_show_cdoc || tc == 'project' && !info.mode && cfg.book_show_project || (tc == 'book' || tc == 'group') && cfg.book_show_book_group)) {
                var step = this.toc_.GetSlideOrderIdx('cur', info.uid);
                if (step != null) {
                    this.ExecCommand('jump', step);
                    return
                }
            }
            HANDLER.base.prototype.StartExecutable.call(this, info, win_props)
        },
        CreatePanel: function() {
            var p = HANDLER.base.prototype.CreatePanel.apply(this, arguments);
            if (!p) return p;
            var c = this.config_;
            if (c.hide_audio_controls) {
                p.VisibleCommand('audio_play', false);
                p.VisibleCommand('audio_pause', false);
                p.VisibleCommand('audio_unmute', false);
                p.VisibleCommand('audio_mute', false);
                p.VisibleCommand('audio_volume', false)
            }
            if (c.hide_navigation_controls) {
                p.VisibleCommand('prev_chapter', false);
                p.VisibleCommand('prev', false);
                p.VisibleCommand('next', false);
                p.VisibleCommand('next_chapter', false)
            }
            if (!c.panel_nav_chapter) {
                p.VisibleCommand('prev_chapter', false);
                p.VisibleCommand('next_chapter', false)
            }
            if (c.hide_index_page_button || !c.content_slide) {
                p.VisibleCommand('index', false)
            }
            if (c.hide_search_button || !this.skin_.search) {
                p.VisibleCommand('search_keywords', false)
            }
            if (c.hide_toc_control) {
                p.VisibleToc(false)
            }
            if (c.hide_progress_control) {
                p.VisibleProgress(false)
            }
            var sub = c.show_tts_subtitle;
            var show = c.panel_show_subtitle;
            p.VisibleCommand('text_on', show && !sub);
            p.VisibleCommand('text_off', show && sub);
            p.VisibleCommand('pause', true);
            p.VisibleCommand('play', false);
            this.Resize(null, true);
            return p
        },
        Resize: function() {
            var free = HANDLER.base.prototype.Resize.apply(this, arguments);
            if (free && !free.abort && this.search_) this.search_.Resize();
            return free
        },
        GetContentInfo: function() {
            var i = HANDLER.base.prototype.GetContentInfo.call(this);
            if (this.toc_) {
                var s = this.toc_.GetSlide(this.step_);
                if (s) i.slide = s.uid
            }
            return i
        },
        OnBookmark: function(state) {
            if (!state.hash) return;
            var idx = this.toc_.GetSlideOrderIdx('cur', state.hash);
            if (idx != null) show_slide_.call(this, idx)
        },
        GetUrl: function() {
            var url = HANDLER.base.prototype.GetUrl.apply(this, arguments);
            if (arguments[0]) {
                var sl = this.GetCurrentSlide();
                if (sl) url += '#' + sl.uid
            }
            return url
        },
        onkeyup_: function(key, type, evt) {
            if (this.search_) {
                evt.hasToBeCancelled = false
            } else {
                HANDLER.base.prototype.onkeydown_.apply(this, arguments)
            }
        },
        onkeydown_: function(key, type, evt) {
            var cmd = HANDLER.base.prototype.onkeydown_.apply(this, arguments);
            if (!cmd || this.search_) {
                evt.hasToBeCancelled = false;
                return
            }
            var c = {
                stop: 'exit',
                back: 'prev',
                next: 'next',
                feedback: 'feedback'
            }[cmd[0]];
            if (c) WCT.SetTimeout(this.ExecCommand, 1, this, [c])
        },
        onsocket_: function(status) {
            HANDLER.base.prototype.onsocket_.call(this, status);
            if (status.sync) {
                var addr = status.message;
                if (typeof addr == 'string') {
                    var p = addr.split('!');
                    this.from_socket_ = true;
                    this.ExecCommand('jump_' + p[0], p[1]);
                    this.from_socket_ = false
                }
            }
        },
        open_share_dlg_: function() {
            var t = this.toc_;
            var s = t && t.GetSlide(this.step_) || null;
            s = s ? s.tclass + '!' + s.uid : null;
            if (s) HANDLER.base.prototype.open_share_dlg_.call(this, s)
        }
    }
})());
HANDLER.slide = function() {
    HANDLER.base.apply(this, arguments);
    this.type_ = HANDLER.MODE.slide;
    this.needs_slide_renderer_ = 1;
    this.generic_key_events_ = true;
    this.steps_ = 1
};
HANDLER.slide.prototype = new HANDLER.base;
WCT.ExtendObject(HANDLER.slide, {
    ShowSlide: function(uid, shdl) {
        var info = arguments[2] || {};
        var d = info.slide;
        if (!d) {
            d = DATA.GetS('slide!' + uid + ':slide.js');
            if (!d || !d.controls) {
                return false
            }
        }
        var ctx_map = this.getContextMap(uid, info);
        var pn = typeof info.step == 'number' ? info.step : 1;
        var pc = typeof info.steps == 'number' ? info.steps : 1;
        ctx_map.pagenumber = pn + '';
        ctx_map.pagecount = pc + '';
        shdl.SetContextMap(ctx_map);
        shdl.SetBookStep(pn, pc);
        shdl.HideMouse();
        shdl.SetContext('slide', uid);
        shdl.SetSearchTerm(info.lib_search_term);
        WCT.SetTimeout(shdl.Play, 10, shdl, [d]);
        return true
    },
    InitSlide: function(uid, dom, nbr, callback, scope) {
        var obj = {
            init: nbr,
            ready: nbr,
            callback: callback,
            scope: scope
        };
        for (var i = 1; i <= nbr; i++) {
            var src = DATA.GetSlideRendererUrl();
            var iframe = WCT.iframe.Create(src);
            iframe.id = uid + '#' + i;
            iframe.style.backgroundColor = '#FFFFFF';
            iframe.style.overflow = 'hidden';
            WCT.iframe.Load(iframe, HANDLER.slide.SlideWindowReady, obj, dom, [iframe])
        }
    },
    SlideWindowReady: function(iframe) {
        var wnd = iframe.contentWindow;
        var pge = wnd && wnd.Page || null;
        var fun = HANDLER.slide.OnPageComplete.bind(this);
        if (pge) pge.SetPageloadSink({
            onPageComplete: fun
        });
        if (!--this.init) HANDLER.slide.SlideWindowCallback(this)
    },
    OnPageComplete: function() {
        if (!--this.ready) HANDLER.slide.SlideWindowCallback(this)
    },
    SlideWindowCallback: function(obj) {
        if (obj.init > 0 || obj.ready > 0) return;
        var cb = obj.callback;
        var sc = obj.scope;
        obj.callback = null;
        obj.scope = null;
        cb.call(sc)
    },
    getContextMap: function(uid, info) {
        var sd = DATA.GetS('slide!' + uid + ':entity.txt') || {};
        var bd = info.book ? DATA.GetS('book!' + info.book.uid + ':entity.txt') : null;
        var cd = info.chapter ? DATA.GetS(info.chapter.tclass + '!' + info.chapter.uid + ':entity.txt') : null;
        var dd = info.cdoc ? info.cdoc : null;
        var pj = info.project ? info.project : null;
        var ev = {
            GetS: DATA.GetS.bind(DATA)
        };
        var dm = {
            slide: sd,
            book: bd,
            chapter: cd,
            cdoc: dd,
            project: pj
        };
        var dma = ['cdoc', 'project', 'book', 'chapter', 'slide'];
        var ctx_map = {};
        for (var c = 0, l = dma.length; c < l; c++) {
            var i = dma[c];
            if (!dm[i]) {
                ctx_map[i + ':.uid'] = '';
                ctx_map[i + ':.tclass'] = '';
                ctx_map[i + ':.caption'] = '';
                ctx_map[i + ':.shortdesc'] = '';
                ctx_map[i + ':.description'] = '';
                continue
            }
            for (var j in dm[i]) {
                if (j === 'assets') continue;
                ctx_map[i + ':.' + j] = dm[i][j]
            }
        }
        for (c = 0, l = dma.length; c < l; c++) {
            i = dma[c];
            var m = {
                shortdesc: true,
                description: true
            };
            for (j in dm[i]) {
                if (!m[j]) continue;
                ctx_map[i + ':.' + j] = WCT.Placeholder.Resolve(dm[i][j] || '', info.ctx, ev, {
                    param_list: ctx_map
                })
            }
        }
        ev.GetS = null;
        return ctx_map
    }
});
WCT.ExtendObject(HANDLER.slide.prototype, {
    Start: function() {
        HANDLER.base.prototype.Start.call(this);
        var cfg = this.config_;
        var caption = cfg.caption;
        var p = this.CreatePanel();
        if (p) {
            p.SetStatusText(caption);
            var sub = cfg.show_tts_subtitle;
            var show = cfg.panel_show_subtitle;
            p.VisibleCommand('text_on', show && !sub);
            p.VisibleCommand('text_off', show && sub);
            p.VisibleCommand('pause', true);
            p.VisibleCommand('play', false)
        }
        MANAGER.SetWindowTitle(caption);
        if (!HANDLER.slide.ShowSlide(this.content_uid_, this.slide_hdl_)) {
            this.Fini(false, 'slide!' + this.content_uid_ + ':slide.js')
        }
    },
    GetCompletionState: function() {
        return {
            completed: true,
            passed: null,
            score: {
                cur: null,
                max: null
            },
            progress: {
                cur: 1,
                max: 1
            }
        }
    },
    ExecAction: function(act) {
        var o = 'base';
        switch (act) {
            case 'book_sound_mute':
            case 'book_sound_unmute':
                o = 'book';
                break
        }
        HANDLER[o].prototype.ExecAction.apply(this, arguments)
    },
    ExecCommand: function(cmd) {
        HANDLER.base.prototype.ExecCommand.apply(this, arguments);
        switch (cmd) {
            case 'help':
                MANAGER.OpenHelp(this.content_language_, DATA.HELP_BOOK_KEY)
                break;
            case 'text_off':
            case 'text_on':
                var pnl = this.panel_;
                if (pnl) {
                    pnl.VisibleCommand('text_on', cmd === 'text_off');
                    pnl.VisibleCommand('text_off', cmd === 'text_on')
                }
                var shdl = this.slide_hdl_;
                shdl.SetConfig('show_tts_subtitle', cmd === 'text_on');
                shdl.HandleSubtitle();
                break;
            case 'play':
            case 'pause':
                var pnl = this.panel_;
                if (pnl) {
                    pnl.VisibleCommand('pause', cmd === 'play');
                    pnl.VisibleCommand('play', cmd === 'pause')
                }
                this.slide_hdl_.UserPause(cmd === 'pause');
                break
        }
    }
});
HANDLER.library = function(content, central_tracker) {
    HANDLER.base.apply(this, arguments);
    if (content) this.content_bookmark_ = content.bookmark;
    this.type_ = HANDLER.MODE.library;
    this.resize_prefer_main_ = true;
    this.mod_ids_ = {};
    this.mvm_ = 'vert';
    this.lm_ = 'content';
    this.sel_ = null;
    this.first_ = true;
    this.active_sr_ = null;
    this.search_term_ = null;
    this.data_side_ = 'right';
    this.search_ = {
        caption: true,
        shortdesc: true,
        description: true,
        keywords: true,
        slides: true
    };
    this.settings_ = {
        use_new_window: false,
        context_my_roles: true
    };
    this.needs_slide_renderer_ = 2;
    this.generic_key_events_ = true;
    this.layout_ = null;
    this.context_ = null;
    this.glossary_ = null
};
HANDLER.library.prototype = new HANDLER.base;
WCT.ExtendObject(HANDLER.library, {
    SPLIT_INIT: 0.2,
    LIST_MODES: {
        content: 'content',
        search: 'search',
        context: 'context',
        favorites: 'favorites',
        recent: 'recent',
        glossary: 'glossary'
    },
    GetAutostartItem: function(data) {
        if (data.tclass == 'project' || data.tclass == 'group') {
            if (data.autostart) {
                var actx = new WCT.context();
                actx.SetScope(data.tclass);
                actx.Set(data.tclass, data.uid);
                return actx.Resolve(data.autostart)
            } else {
                var as = data.assets || [];
                for (var i = 0, a = null; a = as[i++];) {
                    if (WCT.ClampBoolean(a.autostart)) {
                        var mf = a.mode || a.fileName;
                        return mf ? data.tclass + '!' + data.uid + ':' + mf : a.tclass + '!' + a.uid
                    }
                }
            }
        }
        return null
    }
});
WCT.ExtendObject(HANDLER.library.prototype, (function() {
    function on_profile_(id) {
        var data = arguments[1] || null;
        switch (id) {
            case 'close':
                this.profile_.Destructor();
                this.profile_ = null;
                break;
            case 'LibSearch':
                var se = this.search_;
                if (typeof se[data.id] != 'undefined' && se[data.id] != data.value) {
                    se[data.id] = data.value;
                    WCT.store.Set(WCT.store.KEYS.lib_search + data.id, data.value)
                }
                break;
            case 'LibSettings':
                var si = this.settings_;
                if (typeof si[data.id] != 'undefined' && si[data.id] != data.value) {
                    si[data.id] = data.value;
                    WCT.store.Set(WCT.store.KEYS.lib_settings + data.id, data.value)
                }
                break;
            case 'ContextRoles':
                if (this.context_) this.context_.UpdateRole(data.id, data.value);
                break
        }
    };

    function get_autostart_item_(data1, data2) {
        if (DATA.LESSON_MODE[data2.mode]) {
            this.Execute('project!' + data2.uid + ':' + data2.mode)
        } else if (data2.fileName) {
            this.Execute(data2.tclass + '!' + data2.uid + ':' + data2.fileName)
        } else if ((data1.tclass == 'group' || data1.tclass == 'project') && data2.tclass == 'slide') {
            return DATA.GetS(data2.tclass + '!' + data2.uid + ':entity.txt')
        }
        return null
    };

    function autostart_(d) {
        switch (d.tclass) {
            case 'book':
                if (WCT.ClampBoolean(d.single_click_opens_book)) {
                    this.Execute('book!' + d.uid)
                }
                break;
            case 'project':
            case 'group':
                var addr = HANDLER.library.GetAutostartItem(d);
                if (addr) {
                    var aobj = new WCT.address(addr).AsObject(DATA.LESSON_MODE);
                    if (aobj) return get_autostart_item_.call(this, d, aobj)
                }
                break
        }
        return null
    };

    function restore_state_() {
        var sa = this.search_;
        for (var k in sa) {
            var v = WCT.store.Get(WCT.store.KEYS.lib_search + k);
            if (v != null) sa[k] = WCT.ClampBoolean(v)
        }
        var lss = this.GetConfig('lib_search_slides');
        if (!lss) sa.slides = false;
        var st = this.settings_;
        for (var k in st) {
            var v = WCT.store.Get(WCT.store.KEYS.lib_settings + k);
            if (v != null) st[k] = WCT.ClampBoolean(v)
        }
    };

    function create_layout_() {
        var hl = HANDLER.library;
        var d = this.dom_;
        var c = this.config_;
        var data_side = 'right';
        var split_init = !c.lib_tree ? 0 : hl.SPLIT_INIT;
        if (this.rtl_) {
            data_side = 'left';
            split_init = !c.lib_tree ? 1 : 1 - hl.SPLIT_INIT
        }
        this.data_side_ = data_side;
        var l = new hl.Layout(this.uid_, this.skin_, split_init);
        this.layout_ = l;
        this.main_ = l.Create(d)
    };

    function create_modules_() {
        var c = this.config_;
        var lib = DATA.GetS(c.library);
        var cat = false;
        if (lib && lib.categories) {
            for (var id in lib.categories) {
                cat = true;
                break
            }
        }
        var hl = HANDLER.library;
        var s = this.skin_;
        var l = this.layout_;
        var m = this.mod_ids_;
        var ds = this.data_side_;
        var ts = ds == 'left' ? 'right' : 'left';
        var cr = this.settings_.context_my_roles;
        m.slide2 = l.AddModule(ds, 'Slide', s);
        m.slide1 = l.AddModule(ds, 'Slide', {});
        if (cat && s.filter) m.filter = l.AddModule(ts, 'Filter', s.filter);
        if (s.search) m.search = l.AddModule(ts, 'Search', s);
        if (c.ctx && s.context_roles) l.AddModule(ts, 'ContextRoles', s.context_roles, cr);
        if (s.tree) {
            m.content = l.AddModule(ts, 'Tree', s.tree);
            if (c.lib_glossary_root) {
                var gr = DATA.GetS(c.lib_glossary_root + ':entity.txt');
                if (gr) {
                    m.glossary = l.AddModule(ts, 'Tree', s.tree, true);
                    this.glossary_ = new hl.Glossary(this, m.slide2)
                } else {
                    c.lib_glossary_root = null
                }
            }
        }
        if (s.searchlist) {
            m.searchlist = l.AddModule(ts, 'List', s.searchlist);
            m.recent = l.AddModule(ts, 'List', s.searchlist);
            if (c.lib_breadcrumb_trail) {
                m.favorites = l.AddModule(ts, 'List', s.searchlist)
            }
            if (c.ctx) {
                m.context = l.AddModule(ts, 'List', s.searchlist);
                this.context_ = new hl.Context(this, m.context, 'lib_context_info', cr)
            }
        }
        var sm2 = this.GetModule(m.slide2);
        if (sm2) {
            sm2.SetRenderer(1);
            sm2.SetRawMode(true)
        }
        var sm = this.GetModule(m.search);
        if (sm) sm.SetOutputList(m.searchlist)
    };

    function config_nav_button_() {
        var sm = this.layout_.GetModule(this.mod_ids_.search);
        if (!sm) return;
        var c = this.config_;
        var nb = [];
        for (var i in HANDLER.library.LIST_MODES) {
            if ((i != 'glossary' || c.lib_glossary_root) && (i != 'favorites' || c.lib_breadcrumb_trail) && (i != 'context' || c.ctx)) {
                nb.push(i)
            }
        }
        sm.SetNavigationOptions(nb)
    };

    function select_with_treepath_(mod, start) {
        if (arguments.length == 2) {
            var paths = DATA.GetS(start + ':.tree_path');
            paths = paths && paths.response && paths.response.paths || [];
            for (var i = 0, p = null; p = paths[i++];) {
                if (select_with_treepath_.call(this, mod, start, p)) return true
            }
            return false
        }
        var p = arguments[2];
        var i = p.length - 1;
        var c = p[i] || null;
        if (!c) return false;
        var id = this.content_tclass_ + '!' + this.content_uid_;
        do {
            c = c.type + '!' + c.uid;
            if (c == id) {
                mod.Expand(c);
                break
            }
            c = p[i--]
        } while (i >= -1);
        while (i >= 0) {
            c = p[i--];
            c = c.type + '!' + c.uid;
            if (mod.Contains(c, false)) {
                mod.Expand(c)
            } else {
                return false
            }
        }
        return c && mod.Contains(c, false) ? mod.Select(c) : false
    };

    function config_layout_() {
        var m = this.mod_ids_;
        var c = this.config_;
        var hide = ['searchlist', 'favorites', 'recent', 'glossary', 'context'];
        for (var i = 0, n = null; n = hide[i++];) {
            var lm = this.GetModule(m[n]);
            if (lm) lm.SetVisible(false)
        }
        if (c.ctx && this.context_) {
            c.lib_list_mode = 'context'
        } else if (c.lib_list_mode == HANDLER.library.LIST_MODES.search && !c.lib_searchstring) {
            c.lib_list_mode = null
        }
        this.ListMode(c.lib_list_mode);
        var mod = this.GetModule(m[c.lib_list_mode]);
        if (!mod) return;
        var start = this.content_bookmark_ || '';
        var modes = HANDLER.library.LIST_MODES;
        switch (c.lib_list_mode) {
            case modes.glossary:
                if (start && mod.Select(start)) mod.Expand(start);
                break;
            case modes.favorites:
            case modes.recent:
            case modes.context:
                if (start) mod.Select(start);
                break;
            case modes.search:
                if (c.lib_searchstring) {
                    mod.Search(c.lib_searchstring);
                    break
                } else {
                    mod = this.GetModule(m.content);
                    if (!mod) return
                }
            case modes.content:
                if (start) {
                    if (TRACKING.backend.collaborator.Available()) {
                        if (!select_with_treepath_.call(this, mod, start)) {
                            start = null
                        }
                    } else if (mod.Select(start)) {
                        mod.Expand(start)
                    } else {
                        start = null
                    }
                }
                if (!start) {
                    start = this.content_tclass_ + '!' + this.content_uid_;
                    if (mod.Select(start)) mod.Expand(start)
                }
                break
        }
    };

    function manage_visibility_() {
        var m = this.mod_ids_;
        var s1 = this.GetModule(m.slide1);
        var s2 = this.GetModule(m.slide2);
        if (!this.active_ || this.mvm_ == 'hor_l') {
            if (s1) s1.SetVisible(false);
            if (s2) s2.SetVisible(false)
        } else {
            if (this.active_sr_ & 1 && s1) {
                s1.SetVisible(true)
            }
            if (this.active_sr_ & 2 && s2) {
                s2.SetVisible(true)
            }
        }
    };
    return {
        Destructor: function() {
            HANDLER.base.prototype.Destructor.call(this);
            if (this.layout_) {
                this.layout_.Destructor();
                this.layout_ = null
            }
            if (this.context_) {
                this.context_.Destructor();
                this.context_ = null
            }
            if (this.glossary_) {
                this.glossary_.Destructor();
                this.glossary_ = null
            }
            this.mod_ids_ = null
        },
        Start: function() {
            HANDLER.base.prototype.Start.call(this);
            var d = this.dom_;
            var s = this.skin_;
            if (!s) return;
            restore_state_.call(this);
            WCT.skin.ApplyTextFormats(d, s);
            create_layout_.call(this);
            create_modules_.call(this);
            config_nav_button_.call(this);
            if (BROWSER.MOBILE) this.Orientation();
            var p = this.CreatePanel();
            if (p) {
                p.LogoClickable(true);
                p.VisibleCommand('back', false);
                p.VisibleCommand('glossary', false);
                if (BROWSER.MOBILE) p.VisibleCommand('exit', false)
            }
            config_layout_.call(this);
            if (this.config_.handler_preload_lib) {
                DATA.GetAll(this.content_tclass_ + '!' + this.content_uid_)
            }
        },
        Resize: function() {
            var free = HANDLER.base.prototype.Resize.apply(this, arguments);
            if (!free || free.abort) return free;
            this.layout_.Resize(free);
            return free
        },
        ResizeLayout: function() {
            this.layout_.Resize()
        },
        GetEmbeddedPos: function() {
            return this.layout_.GetFramePos(this.data_side_)
        },
        GetLayoutManager: function() {
            return this.layout_
        },
        GetModule: function(uid_or_key) {
            var l = this.layout_;
            return l ? l.GetModule(uid_or_key) || l.GetModule(this.mod_ids_[uid_or_key]) : null
        },
        GetSearchInfo: function() {
            return this.search_
        },
        GetListMode: function() {
            return this.lm_
        },
        GetContextHelp: function() {
            return this.context_
        },
        SetActive: function(a) {
            if (this.active_ == a) return;
            HANDLER.base.prototype.SetActive.apply(this, arguments);
            manage_visibility_.call(this)
        },
        StartExecutable: function(info) {
            var win_props = arguments[1] || null;
            if (!win_props && !info.external && !info.filename && !info.mode && (info.type == HANDLER.MODE.library || info.type == HANDLER.MODE.slide)) {
                var t = this.GetModule(this.mod_ids_.content);
                if (t) {
                    var addr = info.tclass + '!' + info.uid;
                    var lmc = HANDLER.library.LIST_MODES.content;
                    if (this.lm_ == lmc) {
                        if (TRACKING.backend.collaborator.Available()) {
                            if (select_with_treepath_.call(this, t, addr)) return
                        } else if (t.Select(addr)) {
                            return
                        }
                    } else if (t.Contains(addr)) {
                        this.ListMode(lmc, addr);
                        return
                    }
                }
            }
            HANDLER.base.prototype.StartExecutable.call(this, info, win_props)
        },
        ExecCommand: function(cmd) {
            HANDLER.base.prototype.ExecCommand.apply(this, arguments);
            switch (cmd) {
                case 'logoclick':
                    this.ListMode();
                    var ro = this.content_tclass_ + '!' + this.content_uid_;
                    var mt = this.GetModule(this.mod_ids_.content);
                    mt.Select(ro);
                    break;
                case 'context_roles':
                    var um = arguments[1];
                    if (this.context_ && this.settings_.context_my_roles != um) {
                        this.settings_.context_my_roles = um;
                        this.context_.UseMyRoles(um);
                        WCT.store.Set(WCT.store.KEYS.lib_settings + 'context_my_roles', um)
                    }
                    break;
                case 'settings':
                    if (this.skin_.profile) {
                        var p = new Profile(this.uid_, on_profile_);
                        var c = this.GetConfig('ctx');
                        p.Enable('LibSearch', 'LibSettings');
                        if (c && this.context_) {
                            p.Enable('ContextRoles');
                            p.Configure('ContextRoles', this.context_.GetRoles())
                        }
                        p.Configure('LibSearch', this.search_);
                        p.Configure('LibSettings', this.settings_);
                        p.Show(c ? 'ContextRoles' : 'LibSearch', this.dom_);
                        this.profile_ = p
                    }
                    break;
                case 'help':
                    MANAGER.OpenHelp(this.content_language_, DATA.HELP_LIBRARY_KEY);
                    break;
                case 'prev':
                case 'next':
                    var mid = this.lm_ == HANDLER.library.LIST_MODES.search ? 'searchlist' : this.lm_;
                    var mod = this.GetModule(this.mod_ids_[mid]);
                    if (mod) mod[cmd == 'prev' ? 'SelectPrev' : 'SelectNext']();
                    break;
                case 'back':
                    this.MobileViewMode('hor_l');
                    break;
                case 'feedback':
                    if (this.feedback_) this.feedback_.SetZIndex(1);
                    break
            }
        },
        ExecAction: function(act) {
            var s = this.GetModule(this.mod_ids_.slide);
            var o = s && s.IsVisible() ? 'slide' : 'base';
            HANDLER[o].prototype.ExecAction.apply(this, arguments)
        },
        ListMode: function() {
            var mode = arguments[0] || HANDLER.library.LIST_MODES.content;
            if (mode == this.lm_) return;
            this.lm_ = mode;
            var m = this.mod_ids_;
            var mt = this.GetModule(m.content);
            var ms = this.GetModule(m.searchlist);
            if (!mt) return;
            var sm = this.GetModule(m.search);
            if (sm) sm.SetNavigationState(mode);
            this.first_ = true;
            var hl = HANDLER.library;
            var lm = hl.LIST_MODES;
            if (ms) {
                var msc = this.GetModule(m.search);
                if (mode == lm.search) {
                    this.Select(null);
                    if (arguments[1]) this.search_term_ = arguments[1];
                    ms.Reselect();
                    ms.SetVisible(true);
                    if (msc) msc.ResetSearchFieldValue()
                } else {
                    ms.SetVisible(false);
                    if (msc) msc.Clean()
                }
            } else if (mode == lm.search) {
                mode = null
            }
            var gen = ['Favorites', 'Recent', 'Glossary', 'Context'];
            for (var i = 0, n = null; n = gen[i++];) {
                var mod = this.GetModule(m[n.toLowerCase()]);
                if (!hl[n].Configure(this, mod)) mode = null
            }
            if (mode == lm.content) {
                var sel = arguments[1] || this.sel_ || this.content_tclass_ + '!' + this.content_uid_;
                this.sel_ = null;
                mt.SetVisible(true);
                if (!mt.Select(sel)) mt.Reselect()
            } else {
                mt.SetVisible(false)
            }
            this.SetBookmark();
            this.layout_.Resize()
        },
        Orientation: function() {
            var o = MANAGER.handler.GetOrientation();
            this.MobileViewMode(o == 'portrait' ? 'hor_l' : 'vert');
            HANDLER.base.prototype.Orientation.call(this)
        },
        MobileViewMode: function(vm) {
            if (this.mvm_ == vm) return false;
            this.mvm_ = vm;
            var r = this.rtl_;
            var l = this.layout_;
            l.SetFrameVisibility(r ? 'right' : 'left', vm != 'hor_r');
            l.SetFrameVisibility(r ? 'left' : 'right', vm != 'hor_l');
            var p = this.panel_;
            if (p) p.VisibleCommand('back', vm == 'hor_r');
            manage_visibility_.call(this);
            return true
        },
        Select: function(d) {
            if (!this.active_) return;
            var l = this.layout_;
            var mi = this.mod_ids_;
            var ms1 = this.GetModule(mi.slide1);
            var ms2 = this.GetModule(mi.slide2);
            var pnl = this.panel_;
            var cap = this.GetConfig('lib_caption');
            if (!d) {
                this.sel_ = null;
                if (ms1) ms1.SetVisible(false);
                if (ms2) ms2.SetVisible(false);
                if (pnl) pnl.SetStatusText(cap || '');
                return
            }
            var key = d.tclass + '!' + d.uid;
            this.sel_ = key;
            this.SetBookmark();
            var gm = this.lm_ == HANDLER.library.LIST_MODES.glossary && d.tclass == 'group';
            var as = !gm ? autostart_.call(this, d) : null;
            var sb = false;
            var sd = false;
            var sa = false;
            var sp = false;
            var st = false;
            var sc = false;
            switch (d.tclass) {
                case 'group':
                    if (as && as.tclass == 'slide') {
                        sp = true;
                        st = true;
                        break
                    }
                case 'cdoc':
                    sd = true;
                    sa = !gm;
                    st = !gm;
                    sc = !gm;
                    break;
                case 'project':
                    if (as && as.tclass == 'slide') {
                        sp = true;
                        st = true;
                        break
                    }
                case 'book':
                    sb = true;
                    sd = true;
                    sa = true;
                    st = true;
                    sc = true;
                    break;
                case 'slide':
                    sp = true;
                    st = true;
                    break
            }
            sa = sa && this.GetConfig('lib_assets');
            st = st && this.GetConfig('lib_breadcrumb_trail');
            sc = sc && this.GetConfig('lib_entity_caption');
            var lm = HANDLER.library.LIST_MODES;
            if (this.lm_ != lm.content && !d.breadcrumb_trail) {
                var mt = this.GetModule(this.lm_ == lm.glossary ? mi.glossary : mi.content);
                d.breadcrumb_trail = mt ? mt.GetPath(d.tclass + '!' + d.uid) : null
            }
            if (ms1) {
                if (as) {
                    as = DATA.GetS(as.tclass + '!' + as.uid + ':entity.txt');
                    if (d.breadcrumb_trail) {
                        as.breadcrumb_trail = WCT.DeepCopy(d.breadcrumb_trail);
                        as.breadcrumb_trail.push({
                            caption: d.caption,
                            tclass: d.tclass,
                            uid: d.uid
                        })
                    }
                }
                ms1.SetVisible(sp);
                if (sp) {
                    ms1.SetContent(as || d);
                    this.active_sr_ = 1
                }
            }
            if (ms2) {
                var ms2_v = sb || sd || sa || st || sc || gm;
                ms2.Configure({
                    buttons: sb,
                    description: sd,
                    assets: sa,
                    glossary: gm,
                    breadcrumb: st,
                    caption: sc
                });
                ms2.SetVisible(ms2_v);
                if (ms2_v) {
                    if (gm) {
                        ms2.SetContent({});
                        this.glossary_.Show([{
                            lst: d.assets || [],
                            idx: 0
                        }])
                    } else {
                        ms2.SetContent(d)
                    }
                    this.active_sr_ = ms1 && sp ? 3 : 2
                } else {
                    ms2.SetContent(null)
                }
            }
            if (pnl) pnl.SetStatusText(cap || d.caption || '');
            if (BROWSER.MOBILE) {
                if (this.first_) {
                    this.first_ = false;
                    manage_visibility_.call(this)
                } else if (this.mvm_ != 'vert' && !this.MobileViewMode('hor_r')) {
                    manage_visibility_.call(this)
                }
            }
            l.Resize()
        },
        GetTitle: function() {
            return this.config_.title
        },
        SetFilter: function(fid) {
            var lib = DATA.GetS(this.config_.library);
            var cat = lib && lib.categories && lib.categories[fid];
            if (!cat) fid = null;
            var la = this.layout_;
            var mi = this.mod_ids_;
            var mt = this.GetModule(mi.content);
            if (!mt) return;
            var s = this.sel_;
            this.ListMode();
            var ms = this.GetModule(mi.search);
            if (ms) ms.Search('');
            mt.SetFilter(fid);
            mt.Recreate();
            la.Resize();
            if (s || !mt.Select(s)) {
                var rn = mt.GetRootNode();
                if (rn) mt.Select(rn)
            }
        },
        OnSlidePropChange: function(ctl_id, name, value) {
            var m = this.GetModule(this.mod_ids_.slide2);
            if (m) m.OnSlidePropChange(ctl_id, name, value)
        },
        GetContentInfo: function() {
            var ci = HANDLER.base.prototype.GetContentInfo.call(this);
            var lm = this.lm_;
            var hlm = HANDLER.library.LIST_MODES;
            var s = this.sel_;
            if (s) {
                var d = DATA.GetS(s + ':entity.txt');
                if (d) ci.selection_rtl = WCT.IsLanguageRTL(d.language);
                ci.selection = s;
                var is_c = lm == hlm.content;
                var t = is_c ? this.GetModule(this.mod_ids_.content) : null;
                var l = ['slide', 'project', 'group', 'book', 'cdoc'];
                for (var i = 0, c = null; c = l[i++];) {
                    if (is_c) {
                        var item = t.SearchSelectionBottomUp(c);
                        ci['selection_' + c] = item || null
                    } else {
                        ci['selection_' + c] = c == d.tclass ? d.uid : null
                    }
                }
            }
            ci.lib_list_mode = lm;
            ci.lib_search_term = lm == hlm.search && this.search_term_ || null;
            return ci
        },
        Execute: function(id) {
            var scx = this.GetSlideCtx(0);
            if (id.indexOf(':') < 0) {
                var d = id.split('!');
                if (d[0] == 'book' || d[0] == 'project') {
                    HANDLER.library.Recent.Add({
                        tclass: d[0],
                        uid: d[1]
                    })
                }
            } else {
                var d = id.split('!');
                var h = d.pop().split(':');
                if (DATA.LESSON_MODE[h[1]]) {
                    HANDLER.library.Recent.Add({
                        tclass: d[0],
                        uid: h[0]
                    })
                }
            }
            if (this.settings_.use_new_window && arguments[1] !== false) {
                scx.cfg_show(id, true, 'force=1')
            } else {
                scx.cfg_show(id)
            }
        },
        SetBookmark: function() {
            var lm = HANDLER.library.LIST_MODES;
            var cm = this.lm_;
            var se = this.sel_;
            if (cm == lm.search || cm == lm.content && se == this.content_tclass_ + '!' + this.content_uid_) {
                se = null
            }
            var st = (cm == lm.search ? this.search_term_ : null) || null;
            if (cm == lm.content) cm = null;
            BOOKMARK.SetState(this.uid_, {
                lib_list_mode: cm,
                lib_searchstring: st,
                hash: se || null
            })
        },
        OnBookmark: function(state) {
            var mi = this.mod_ids_;
            var lm = state.lib_list_mode;
            if (lm == HANDLER.library.LIST_MODES.search) {
                if (state.lib_searchstring) {
                    var m = this.GetModule(mi.search);
                    if (m) m.Search(decodeURI(state.lib_searchstring), true);
                    return
                } else {
                    lm = null
                }
            }
            if (lm) {
                this.ListMode(lm);
                if (['content', 'favorites', 'recent', 'glossary'].indexOf(lm) >= 0 && state.hash) {
                    var mo = this.GetModule(mi[lm]);
                    if (mo) mo.Select(state.hash)
                }
            }
        },
        GetUrl: function() {
            var url = HANDLER.base.prototype.GetUrl.apply(this, arguments);
            var par = [];
            var cfg = this.config_;
            var clib = cfg.library;
            if (clib !== DEFAULTS.library.d) par.push('library=' + clib);
            var csty = cfg.style;
            if (csty !== DEFAULTS.style.d) par.push('style=' + csty);
            var se = false;
            var lm = HANDLER.library.LIST_MODES;
            if (this.lm_ == lm.search && this.search_term_) {
                par.push('lib_list_mode=' + this.lm_);
                par.push('lib_searchstring=' + this.search_term_);
                se = true
            }
            var hash = '';
            if (arguments[0]) {
                if (this.lm_ == lm.glossary) par.push('lib_lib_mode=' + lm.glossary);
                if (this.sel_ && !se) hash = '#' + this.sel_
            }
            par = par.length ? '&' + par.join('&') : '';
            return url + par + hash
        },
        open_share_dlg_: function() {
            HANDLER.base.prototype.open_share_dlg_.call(this, this.sel_)
        }
    }
})());
HANDLER.file = function() {
    HANDLER.base.apply(this, arguments);
    this.content_addr_ = this.content_tclass_ + '!' + this.content_uid_ + ':' + this.content_filename_;
    this.type_ = HANDLER.MODE.file;
    this.generic_key_events_ = true
};
HANDLER.file.prototype = new HANDLER.base;
WCT.ExtendObject(HANDLER.file, {
    ACCEPTED_EXT: ['jpg', 'jpeg', 'gif', 'png', 'bmp', 'tif', 'tiff'],
    IMAGES: ['jpg', 'jpeg', 'gif', 'png', 'bmp', 'tif', 'tiff'],
    GetFileExtension: function(filename) {
        var p = filename.split('.');
        return p.length > 1 ? p.top().toLowerCase() : ''
    },
    IsAcceptedExt: function(filename) {
        var e = this.GetFileExtension(filename);
        return this.ACCEPTED_EXT.indexOf(e) >= 0
    },
    IsAcceptedImage: function(filename) {
        var e = this.GetFileExtension(filename);
        return this.IMAGES.indexOf(e) >= 0
    }
});
WCT.ExtendObject(HANDLER.file.prototype, {
    GetCompletionState: HANDLER.slide.prototype.GetCompletionState,
    Start: function() {
        HANDLER.base.prototype.Start.call(this);
        var d = this.dom_;
        d.style.backgroundColor = '#FFFFFF';
        if (PLATFORM.IOS) {
            d.style.zIndex = 1;
            d.style.opacity = 1
        }
        var p = this.CreatePanel();
        var c = this.config_;
        if (p && c.caption) {
            var fn = this.content_filename_;
            var a = c.assets || [];
            for (var i = a.length - 1; i >= 0; i--) {
                if (a[i].fileName == fn) {
                    fn = a[i].caption;
                    break
                }
            }
            p.SetStatusText(fn)
        }
        var m = $$('div');
        m.id = this.uid_ + '#main';
        m.style.position = 'absolute';
        m.style.overflow = 'auto';
        if (this.skin_.main) WCT.skin.Apply(m, this.skin_.main);
        this.main_ = m;
        d.appendChild(m);
        if (HANDLER.file.IsAcceptedImage(this.content_filename_)) {
            var url = DATA.context.ToAbsPath(this.content_addr_);
            var img = $$('img');
            img.src = url;
            m.appendChild(img)
        }
    },
    GetUrl: function() {
        var url = HANDLER.base.prototype.GetUrl.apply(this, arguments);
        return url + ':' + this.content_filename_
    }
});
HANDLER.cdoc = function() {
    HANDLER.library.apply(this, arguments)
};
HANDLER.cdoc.prototype = new HANDLER.library;
HANDLER.cdoc.ShowAsSlide = function(tclass, uid, shdl, info) {
    var orig = DATA.GetS(tclass + '!' + uid + ':entity.txt') || {};
    info.cdoc = orig;
    var ev = {
        GetS: DATA.GetS.bind(DATA)
    };
    var ctx_map = {};
    for (var j in orig) {
        switch (j) {
            case 'shortdesc':
            case 'description':
                ctx_map[tclass + ':.' + j] = WCT.Placeholder.Resolve(orig[j] || '', info.ctx, ev);
                break;
            case 'assets':
                continue;
                break;
            default:
                ctx_map[tclass + ':.' + j] = orig[j];
                break
        }
    }
    shdl.SetContextMap(ctx_map);
    var octx = new WCT.context(info.ctx);
    octx.Set(tclass, uid);
    octx.SetScope(tclass);
    var keys = {
        caption: 1,
        shortdesc: 1,
        description: 1
    };
    if (shdl.Template() == info.template) {
        var cm = HANDLER.slide.getContextMap(uid, info);
        shdl.SetContextMap(cm);
        var ctls = shdl.GetApi('Controls') || {};
        for (var id in ctls) {
            var n = ctls[id].GetName();
            if (keys[n]) {
                var t = octx.ResolveHtmlString(orig[n] || '', octx);
                shdl.UpdateControl(id, 'text', t)
            }
            ctls[id].RTFireTrigger('update_placeholder')
        }
    } else {
        var ctls = info.slide.controls;
        for (var id in ctls) {
            var n = ctls[id].name;
            if (keys[n]) ctls[id].text = octx.ResolveHtmlString(orig[n] || '', octx)
        }
        HANDLER.slide.ShowSlide(info.template, shdl, info)
    }
};
HANDLER.cdoc.prototype.GetCompletionState = HANDLER.slide.prototype.GetCompletionState;
HANDLER.lesson.RendererCtx = function(uid, content_uid, content_mode, obj, audio_ext, audio_vol) {
    this.uid_ = uid;
    this.src_ctx_ = null;
    this.obj_ = obj;
    this.internal = {
        text_on: true,
        audio_on: true
    };
    this.defaults = {};
    this.builtins = {};
    this.global_params = {};
    this.uid = content_uid;
    this.mode = content_mode;
    this.is_topmost = false;
    this.audio_ext = audio_ext;
    this.audio_vol = audio_vol;
    this.is_audio_lesson = false;
    this.video_mode = null;
    this.scores_set_ = false;
    this.taskinfo_ori_ = 'NW'
};
HANDLER.lesson.RendererCtx.prototype = {
    Destructor: function() {
        WCT.CleanupObject(this.src_ctx_);
        WCT.CleanupObject(this.internal);
        WCT.CleanupObject(this.defaults);
        WCT.CleanupObject(this.builtins);
        WCT.CleanupObject(this.global_params);
        this.src_ctx_ = null;
        this.internal = null;
        this.defaults = null;
        this.builtins = null;
        this.global_params = null
    },
    GetConfig: function(key) {
        var hdl = MANAGER.handler.Get(this.uid_);
        return hdl.GetConfig(key)
    },
    LoadFile: function(addr) {
        var hdl = MANAGER.handler.Get(this.uid_);
        var ctx = hdl.GetContext();
        var ra = ctx.Resolve(addr);
        return WCT.DeepCopy(DATA.GetS(ra))
    },
    CleanupInternal: function() {
        WCT.CleanupObject(this.internal);
        this.internal = {}
    },
    GetContext: function() {
        var hdl = MANAGER.handler.Get(this.uid_);
        return hdl ? hdl.GetContext() : null
    },
    GetContentInfo: function() {
        var hdl = MANAGER.handler.Get(this.uid_);
        return hdl ? hdl.GetContentInfo() : null
    },
    SetVideoMode: function(vm) {
        this.video_mode = vm
    },
    SetDefaults: function(defaults) {
        this.defaults = defaults
    },
    SetGlobalParams: function(params) {
        this.global_params = params
    },
    SetTaskInfoOrientation: function(ori) {
        this.taskinfo_ori_ = ori
    },
    Trans: function(key) {
        var hdl = MANAGER.handler.Get(this.uid_);
        return hdl ? hdl.Trans(key) : key
    },
    SetSourceContext: function(ctx) {
        this.src_ctx_ = ctx
    },
    GetPageCtl: function() {
        var hdl = MANAGER.handler.Get(this.uid_);
        var cs = hdl && hdl[this.obj_] || {};
        return typeof cs.page !== 'undefined' ? cs.page : false
    },
    AddControl: function(ctl) {
        var hdl = MANAGER.handler.Get(this.uid_);
        var cs = hdl && hdl[this.obj_] || null;
        if (!cs) return;
        if (this.src_ctx_) ctl._src_ctx = this.src_ctx_;
        cs[ctl.id] = ctl;
        if (!cs.ctl_count_) cs.ctl_count_ = 0;
        cs.ctl_count_++
    },
    AddStartEvent: function(evt) {
        var hdl = MANAGER.handler.Get(this.uid_);
        var cs = hdl && hdl[this.obj_] || null;
        if (!cs) return;
        if (!cs.start_events_) cs.start_events_ = [];
        cs.start_events_.push(evt)
    },
    SetMacroUid: function(uid) {
        var hdl = MANAGER.handler.Get(this.uid_);
        var cs = hdl && hdl[this.obj_] || null;
        if (cs) cs.macro_uid_ = uid
    },
    AddTaskSet: function(uid) {
        var hdl = MANAGER.handler.Get(this.uid_);
        var cs = hdl && hdl[this.obj_] || null;
        if (!cs) return;
        if (!cs.task_sets_) cs.task_sets_ = {};
        if (!cs.task_sets_[uid]) {
            cs.task_sets_order_ || (cs.task_sets_order_ = []);
            cs.task_sets_order_.push(uid);
            cs.task_sets_[uid] = {
                ctls: [],
                start_events: [],
                end_events: []
            }
        }
    },
    TaskSetSetQuiz: function(ts_uid, skipable) {
        var hdl = MANAGER.handler.Get(this.uid_);
        var cs = hdl && hdl[this.obj_] || null;
        var ts = cs && cs.task_sets_ && cs.task_sets_[ts_uid];
        if (ts) {
            ts.is_quiz = true;
            ts.is_skipable = skipable
        }
    },
    TaskSetAddControl: function(ts_uid, ctl_uid) {
        var hdl = MANAGER.handler.Get(this.uid_);
        var cs = hdl && hdl[this.obj_] || null;
        if (cs && cs.task_sets_ && cs.task_sets_[ts_uid]) {
            cs.task_sets_[ts_uid].ctls.push(ctl_uid)
        }
    },
    TaskSetAddStartEvent: function(ts_uid, evt) {
        var hdl = MANAGER.handler.Get(this.uid_);
        var cs = hdl && hdl[this.obj_] || null;
        if (cs && cs.task_sets_ && cs.task_sets_[ts_uid]) {
            cs.task_sets_[ts_uid].start_events.push(evt)
        }
    },
    TaskSetAddEndEvent: function(ts_uid, evt) {
        var hdl = MANAGER.handler.Get(this.uid_);
        var cs = hdl && hdl[this.obj_] || null;
        if (cs && cs.task_sets_ && cs.task_sets_[ts_uid]) {
            cs.task_sets_[ts_uid].end_events.push(evt)
        }
    },
    TaskSetSetMacroUid: function(ts_uid, uid) {
        var hdl = MANAGER.handler.Get(this.uid_);
        var cs = hdl && hdl[this.obj_] || null;
        if (cs && cs.task_sets_ && cs.task_sets_[ts_uid]) {
            cs.task_sets_[ts_uid].macro_uid_ = uid
        }
    },
    EndLesson: function(mac_uid) {
        var hdl = MANAGER.handler.Get(this.uid_);
        if (hdl) hdl[this.obj_].stop_ = mac_uid
    },
    SetTaskInfo: function(info) {
        var hdl = MANAGER.handler.Get(this.uid_);
        if (hdl) {
            var ct = hdl.GetConfig('panel_taskinfo_toggle');
            var cv = hdl.GetConfig('hide_panel');
            if (ct && !cv) info.close_msg = false;
            hdl.SetTaskInfo(info)
        }
    },
    SetScores: function(max, pass) {
        if (this.scores_set_) return;
        var hdl = MANAGER.handler.Get(this.uid_);
        if (hdl) {
            hdl.SetScores(max, pass);
            this.scores_set_ = true
        }
    },
    GetMacrosByType: function(type) {
        var hdl = MANAGER.handler.Get(this.uid_);
        return hdl ? hdl.GetMacrosByType(type, arguments[1]) : []
    },
    GetFreeHighlights: function(name_prefix) {
        var hdl = MANAGER.handler.Get(this.uid_);
        var cs = hdl && hdl[this.obj_] || null;
        if (!cs) return null;
        var rx = new RegExp('^' + name_prefix);
        var hl = [];
        for (var id in cs) {
            if (id.match(rx)) {
                hl.push(cs[id])
            }
        }
        return hl.length ? hl : null
    },
    GetCurTourstopMacroCount: function() {
        var hdl = MANAGER.handler.Get(this.uid_);
        var ts = hdl && hdl.GetCurrentTourstop() || {};
        var mac = ts.macros || [];
        if (arguments[0] && MacroRenderer && MacroRenderer.AUDIO_MACROS) {
            var lst = MacroRenderer.AUDIO_MACROS;
            var cnt = 0;
            for (var i = 0, m = null; m = mac[i++];) {
                if (lst[m.macro_template]) cnt++
            }
            return cnt
        }
        return mac.length
    },
    LessonPassed: function() {
        var hdl = MANAGER.handler.Get(this.uid_);
        var lt = hdl ? hdl.local_trackers_[hdl.tracking_id_] : null;
        return lt ? lt.GetTrackingData(arguments[0]).passed : false
    },
    GetSkinAddr: function() {
        var hdl = MANAGER.handler.Get(this.uid_);
        return hdl ? 'adaptable!' + hdl.GetConfig('skin') : ''
    },
    ShowPanel: function(show) {
        var hdl = MANAGER.handler.Get(this.uid_);
        if (hdl) hdl.ShowPanel(show)
    }
};
HANDLER.lesson.StartStop = function(hdl_uid, mode) {
    this.hdl_uid_ = hdl_uid;
    this.mode_ = mode;
    this.details_ = false
};
WCT.ExtendObject(HANDLER.lesson.StartStop, {
    STOP_PADDING: 8,
    B_DETAIL_W: 200,
    CMD_MAP: {
        play: 'page.lesson_play',
        replay: 'page.lesson_restart',
        exit: 'page.lesson_exit',
        print: 'page.lesson_startstop_print',
        details: 'page.lesson_startstop_details'
    }
});
HANDLER.lesson.StartStop.prototype = (function() {
    function get_text_(mode, skin) {
        var m = HANDLER.lesson.START_STOP_TEXTKEY[this.mode_];
        var h = MANAGER.handler.Get(this.hdl_uid_);
        var r = '<div style="line-height:18px;padding:' + HANDLER.lesson.StartStop.STOP_PADDING + 'px">';
        switch (this.mode_) {
            case 'demo':
            case 'pres':
            case 'guided':
            case 'praxis':
            case 'uebung':
                var um = m.toUpperCase();
                r += '<div style="margin-bottom:20px">' + (mode == 'start' ? h.Trans('' + um + '_START1') + '</div><div>' + h.Trans('' + um + '_START2') : h.Trans('' + um + '_STOP')) + '</div>';
                break;
            case 'test':
                if (mode == 'start') {
                    r += '<div style="margin-bottom:20px">' + [h.Trans('TEST_START1'), h.Trans('TEST_START2'), h.Trans('TEST_START3'), h.Trans('TEST_START4')].join('</div><div style="margin-bottom:20px">') + '</div>';
                    r = r.replace(/\[res_mastery_percent\]/, h.GetLessonMasteryPercent())
                } else {
                    r += HANDLER.lesson.DetailStop.Test(h, skin.test_details)
                }
                break
        }
        return r + '</div>'
    };

    function get_pos_(p, wh, min, max, rtl) {
        if (rtl) p = p === '-0' ? 0 : -p;
        if (p < 0 || p === '-0') {
            return max - wh + Number(p)
        } else {
            return p
        }
    };

    function get_detail_style_(skin) {
        var r = {};
        var a = ['bg', 'bg_h', 'bg_a'];
        for (var i = 0, n = null; n = a[i++];) {
            var c = WCT.DeepCopy(skin[n]);
            if (!c) continue;
            var b = c.m;
            var w = c.l;
            var e = c.r;
            if (!b || !w || !e) continue;
            if (!b.id) b.id = skin.src;
            if (!b.repeat) b.repeat = 'x';
            if (!w.id) w.id = skin.src;
            if (!e.id) e.id = skin.src;
            r[n] = {
                frame: {
                    body: {
                        image: b
                    },
                    w: {
                        image: w
                    },
                    e: {
                        image: e
                    },
                    w_w: w.w || 0,
                    e_w: e.w || 0,
                    n_h: 0,
                    s_h: 0
                },
                content: {
                    outer_spacing_l: skin.bg.l.w || 0
                }
            }
        }
        a = ['image', 'image_h', 'image_a'];
        for (var i = 0, n = null; n = a[i++];) {
            if (!skin[n]) continue;
            r[n] = WCT.DeepCopy(skin[n]);
            if (!r[n].id) r[n].id = skin.src;
            r[n].w = skin.img_w || 0;
            r[n].h = skin.img_h || 0
        }
        return r
    };
    return {
        Destructor: function() {},
        Show: function(start_stop) {
            var hdl = MANAGER.handler.Get(this.hdl_uid_);
            var shdl = hdl.GetSlideHandler();
            var skin = hdl.GetSkin('start_stop_page');
            if (!shdl || !skin || !skin.frame || !skin.caption || !skin.text) return false;
            var w = skin.w || 800;
            var h = skin.h || 600;
            var f = skin.frame;
            var c = skin.caption;
            var t = skin.text;
            var b = {
                frame: {
                    body: {
                        background_color: t.background_color || '#FFFFFF'
                    },
                    nw: f.nw,
                    ne: f.ne,
                    sw: f.sw,
                    se: f.se,
                    n: f.n,
                    s: f.s,
                    w: f.w,
                    e: f.e,
                    w_w: f.w_w,
                    e_w: f.e_w,
                    n_h: f.n_h,
                    s_h: f.s_h
                },
                title: {
                    font_family: c.font_family,
                    text_color: c.text_color,
                    font_style: c.font_weight == 'bold' ? 'bold' : null,
                    font_size: c.font_size,
                    outer_spacing_l: c.x,
                    outer_spacing_r: c.x,
                    outer_spacing_t: c.y,
                    h: f.n_h - c.y
                },
                content: {
                    outer_spacing_l: f.w.w || f.w_w,
                    outer_spacing_r: f.e.w || f.e_w,
                    outer_spacing_t: f.n_h,
                    outer_spacing_b: f.s_h
                }
            };
            var tk = HANDLER.lesson.START_STOP_TEXTKEY[this.mode_];
            tk = hdl.Trans(tk.toUpperCase() + '_START');
            var bo = {
                type: 'text',
                id: 'bo',
                title: tk,
                text: get_text_.call(this, start_stop, skin),
                hidden: 0,
                custom_style: b,
                background_color: t.background_color || '#FFFFFF',
                font_family: t.font_family,
                font_size: t.font_size ? (t.font_size + 'px') : null,
                align: 'start',
                valign: 'top',
                border_color: '#666666',
                border: 0,
                padding: 0,
                x: 0,
                y: 0,
                w: w,
                h: h,
                z: 1
            };
            MANAGER.SetWindowTitle(tk);
            var po = {
                type: 'page',
                id: 'page',
                image: {
                    id: '',
                    w: 0,
                    h: 0
                },
                background_image_centered: 1,
                canvas_color: skin.background_color || '#9F9F9F',
                background_color: skin.background_color || '#9F9F9F',
                show_toc: 0,
                fontsizeInPt: 0,
                version: '8.3.0',
                shadow_show: false,
                w: w,
                h: h
            };
            var ct = MANAGER.GetCentralTracker();
            var bt = ct ? ct.GetBackendType() : null;
            var allow_replay = bt == 'scorm' || bt == 'aicc' ? hdl.GetConfig(bt + '_allow_restart') : hdl.GetConfig('allow_restart');
            var ctls = {
                controls: {
                    page: po,
                    bo: bo
                }
            };
            var rtl = hdl.GetContentInfo().rtl;
            var is_test = this.mode_ == 'test';
            var cs = skin[start_stop + 'page_controls'];
            var me = HANDLER.lesson.StartStop;
            if (cs) {
                for (var id in cs) {
                    var ctl = cs[id];
                    if (id == 'print' && !is_test || id == 'replay' && !allow_replay) continue;
                    if (id == 'details') {
                        if (!is_test) continue;
                        var cbs = get_detail_style_(ctl);
                        var txt = hdl.Trans(ctl.text1 || '');
                        ctls.controls['ctl_' + id] = {
                            type: 'imagebutton',
                            id: 'ctl_' + id,
                            custom_style: cbs.bg,
                            custom_style_mouseover: cbs.bg_h,
                            custom_style_mousedown: cbs.bg_a,
                            image: cbs.image,
                            image_h: cbs.image_h,
                            image_a: cbs.image_a,
                            image_align: 'left',
                            image_padding_r: ctl.img_text_spacing,
                            align: ctl.text_align || 'center',
                            text: txt,
                            tooltip: txt,
                            font_family: ctl.font_family,
                            font_size: ctl.font_size,
                            bold: ctl.font_weight == 'bold',
                            text_color: ctl.text_color,
                            text_color_h: ctl.text_color_h,
                            text_color_a: ctl.text_color_a,
                            line_height: ctl.h,
                            white_space: 'nowrap',
                            text_overflow: 'ellipsis',
                            overflow: 'hidden',
                            href: 'trigger!' + me.CMD_MAP[id],
                            x: get_pos_(ctl.x, me.B_DETAIL_W, 0, po.w, rtl),
                            y: get_pos_(ctl.y, ctl.h, 0, po.h),
                            w: ctl.w || me.B_DETAIL_W,
                            h: ctl.h,
                            z: 100
                        }
                    } else {
                        ctls.controls['ctl_' + id] = {
                            type: 'sprite',
                            id: 'ctl_' + id,
                            image: ctl.image,
                            image_mouseover: ctl.image_h,
                            image_mousedown: ctl.image_a,
                            tooltip: hdl.Trans(ctl.tooltip || ''),
                            href: 'trigger!' + me.CMD_MAP[id],
                            x: get_pos_(ctl.x, ctl.w, 0, po.w, rtl),
                            y: get_pos_(ctl.y, ctl.h, 0, po.h),
                            w: ctl.w,
                            h: ctl.h,
                            z: 100
                        }
                    }
                }
            }
            shdl.Play(ctls);
            hdl.Resize(null, true);
            return true
        },
        Print: function() {
            var hid = this.hdl_uid_;
            var hdl = MANAGER.handler.Get(hid);
            var shdl = hdl.GetSlideHandler();
            var swnd = shdl.GetWindow();
            var sdoc = swnd && swnd.document || null;
            var ps = $(hid + '#detailstop', sdoc);
            var cl = ps.parentNode.cloneNode(true);
            var s = hdl.GetSkin('start_stop_page');
            s = s && s.stoppage_controls && s.stoppage_controls.details || null;
            if (s) {
                if (s.font_size) cl.style.fontSize = s.font_size + 'px';
                if (s.font_family) cl.style.fontFamily = s.font_family;
                if (s.text_color) cl.style.textColor = s.text_color
            }
            Print.Open(hdl, cl)
        },
        Details: function() {
            var hid = this.hdl_uid_;
            var hdl = MANAGER.handler.Get(hid);
            var shdl = hdl.GetSlideHandler();
            var swnd = shdl.GetWindow();
            var sdoc = swnd && swnd.document || null;
            var d = !this.details_;
            this.details_ = d;
            var dt = $(hid + '#detailstop', sdoc);
            if (dt) dt.style.display = d ? (BROWSER.IE && BROWSER.VERSION < 8 ? 'block' : 'table') : 'none';
            var s = hdl.GetSkin('start_stop_page');
            var s = s && s.stoppage_controls && s.stoppage_controls.details || null;
            if (s) {
                var t = hdl.Trans((d ? s.text2 : s.text1) || '');
                shdl.UpdateControl('ctl_details', 'text', t);
                shdl.UpdateControl('ctl_details', 'tooltip', t)
            }
        }
    }
})();
HANDLER.lesson.DetailStop = (function() {
    var QUIZ = {
        puzzlequiz: 1,
        mchoice: 1,
        fibquiz: 1,
        sqmaquiz: 1,
        gridquiz: 1,
        matchquiz: 1,
        connquiz: 1,
        mixquiz: 1,
        scalequiz: 1,
        hotspotquiz: 1,
        quiz_shuffle_on: 1,
        quiz_shuffle_off: 1,
        quiz_eval: 1
    };

    function create_(hdl, skin, info) {
        var r = '';
        var i = skin && skin[info.image];
        if (i) {
            r += '<div style="text-align:center;border-bottom:1px solid #B9B9B9;padding:10px 0;margin-bottom:20px">' + '<div style="background-image:url(' + i.id + ');background-position:' + i.x + 'px ' + i.y + 'px;' + 'width:' + i.w + 'px;height:' + i.h + 'px;margin:0 auto"></div>' + '</div>'
        }
        var m = hdl.Trans(info.message);
        m = m.replace(/\[res_mastery_percent\]/, hdl.GetLessonMasteryPercent());
        r += '<div style="margin-bottom:20px">' + m + '</div>';
        var rtl = hdl.GetContentInfo().rtl;
        var th_style = ['text-align:' + (rtl ? 'left' : 'right'), 'padding-' + (rtl ? 'left' : 'right') + ':10px', 'width:50%', rtl ? '' : 'border-right:1px solid #B9B9B9'].join(';');
        var td_style = ['padding-' + (rtl ? 'right' : 'left') + ':10px', rtl ? 'border-right:1px solid #B9B9B9' : ''].join(';');
        var tbl_w = '100%';
        if (BROWSER.IE6) {
            var ssp = hdl.GetSkin().start_stop_page;
            tbl_w = ssp.w || 0;
            tbl_w = Math.max(0, tbl_w - 40) + 'px'
        }
        var dir = rtl ? 'dir="rtl"' : 'dir="ltr"';
        var max = info.completed ? info.cum : info.max;
        r += '<table ' + dir + ' style="width:' + tbl_w + ';border:0px none;border-spacing:0;border-collsapse:collapse"><tbody><tr>' + '<th style="border-top:1px solid #808080;border-bottom:1px solid #B9B9B9;background-color:#F2F2F2;' + th_style + '">' + hdl.Trans('LESSON') + ':</th>' + '<td style="border-top:1px solid #808080;border-bottom:1px solid #B9B9B9;background-color:#F2F2F2;' + td_style + '">' + WCT.CleanupHTMLString(info.title) + '</td></tr><tr><th style="border-bottom:1px solid #B9B9B9;' + th_style + '">' + hdl.Trans('TEST_RESULT') + ':</th><td style="border-bottom:1px solid #B9B9B9;' + td_style + '">' + Math.floor(max > 0 ? info.cur / max * 100 : 100) + '%</td></tr><tr>' + '<th style="border-bottom:1px solid #808080;background-color:#F2F2F2;' + th_style + '">' + hdl.Trans('ACQUIRED_SCORE') + ':</th>' + '<td style="border-bottom:1px solid #808080;background-color:#F2F2F2;' + td_style + '">' + info.cur + ' ' + hdl.Trans('OF') + ' ' + max + '</td></tr></tbody></table>';
        return r + create_details_table_(hdl, skin, info)
    };

    function create_sprite_string_(skin) {
        var sx = skin.x || 0;
        var sy = skin.y || 0;
        var sw = skin.w || 0;
        var sh = skin.h || 0;
        var si = skin.id || '';
        return '<div style="' + 'margin:0px auto;' + 'width:' + sw + 'px;' + 'height:' + sh + 'px;' + 'background:transparent url(\'' + si + '\') ' + sx + 'px ' + sy + 'px no-repeat' + '"></div>'
    };

    function get_icon_name_(id) {
        id = id.toLowerCase();
        var iid = 'image_';
        switch (id) {
            case 'user_action_correct_action':
            case 'user_action_wrong_action':
            case 'user_action_help':
            case 'user_action_goon':
            case 'user_action_goon_auto':
            case 'correct_response':
            case 'student_response':
            case 'latency':
                iid += id;
                break;
            case 'tour_start':
            case 'tour_stop':
            case 'tour_end':
            case 'tour_play':
            case 'tour_jump':
            case 'tour_prev':
            case 'tour_next':
                iid += id.substr(5);
                break;
            case 'slide_user_action_textbox_open':
            case 'slide_user_action_textbox_close':
                iid += id.substr(18);
                break;
            case 'quiz_information':
                iid += 'quiztype_' + arguments[1];
                break;
            default:
                iid += 'task';
                break
        }
        return iid
    };

    function shorten_text_(txt) {
        var l = txt.length;
        return l > 50 ? txt.substring(0, 38) + '...' + txt.substring(l - 10) : txt
    };

    function add_trackline_(env, data) {
        var s_idh = env.skin.image_detail_head || {};
        var s_idh_i = s_idh.id || '';
        var s_idh_x = s_idh.x || 0;
        var s_idh_y = s_idh.y || 0;
        var style_h = 'background:#E2E2E2 url(\'' + s_idh_i + '\') ' + s_idh_x + 'px ' + s_idh_y + 'px repeat-x;' + 'border:1px solid #B9B9B9;' + 'height:20px;';
        var icon = env.skin[data.icon] ? create_sprite_string_(env.skin[data.icon]) : '';
        var style_p = 'padding:2px;';
        var style_pc = style_p + 'text-align:center;';
        var style_pcw = style_pc + 'width:20px;';
        var style_first = 'width:20px;';
        var style_middle = 'overflow:hidden;';
        var style_last = 'width:60px;';
        var txt = WCT.PreventXSS(data.text);
        var t = env.table;
        t.push('<tr>');
        if (data.header) {
            t.push(
                '<td style="' + style_first + style_pc + style_h + '">' + icon + '</td>' + '<td colspan="2" style="font-weight:bold;' + style_middle + style_p + style_h + 'border-left:none;border-right:none;" title="' + txt + '">' + shorten_text_(txt) + '</td>' + '<td style="' + style_last + style_pc + style_h + '">&nbsp;</td>')
        } else if (data.info) {
            t.push(
                '<td style="width:16px;vertical-align:top;' + style_pc + '">' + icon + '</td>' + '<td colspan="2" style="' + style_middle + style_p + '">' + data.text + '</td>' + '<td style="' + style_last + style_pc + '">&nbsp;</td>')
        } else if (data.tourstop) {
            t.push(
                '<td style="' + style_first + style_pcw + style_h + '">' + data.nbr + '</td>' + '<td colspan="2" style="' + style_middle + style_p + style_h + '" title="' + data.text + '">' + shorten_text_(data.text) + '</td>' + '<td style="' + style_last + style_pc + style_h + '">' + data.time + '</td>')
        } else if (data.macro_header) {
            t.push(
                '<td style="width:16px;vertical-align:top;' + style_pcw + '">' + icon + '</td>' + '<td colspan="2" style="' + style_middle + style_p + '">' + txt + '</td>' + (data.score ? '<td style="text-align:center;vertical-align:top;width:50px;">' + data.score + '</td>' : '<td style="width:50px;">&nbsp;</td>'))
        } else if (data.macro_modern_header) {
            t.push(
                '<td style="vertical-align:middle;' + style_h + style_pcw + '">' + icon + '</td>' + '<td colspan="2" style="overflow:hidden;' + style_h + style_p + '">' + '<table style="width:100%;table-layout:fixed;"' + data.dir + '><tr>' + '<td title="' + data.tt + '" style="overflow:hidden;text-overflow:ellipsis;white-space:nowrap;' + style_p + '">' + txt + '</td>' + '<td style="' + style_middle + style_pc + style_last + '">' + data.score + '</td>' + '</tr></table>' + '</td>' + '<td id="row#exp#' + data.cnt + '" style="cursor: pointer;' + style_h + style_pcw + '">' + (PLATFORM.ANDROID ? '&#8744;' : '&#x2c5;') + '</td>')
        } else {
            t.push(
                '<td style="width:16px;vertical-align:top;">&nbsp;</td>' + '<td colspan="2" style="overflow:hidden;' + style_p + '">' + '<table><tr>' + '<td style="' + style_first + style_pcw + '">' + icon + '</td>' + '<td style="' + style_middle + style_p + '" class="dgo_text_container">' + data.text + '</td>' + '</tr></table>' + '</td>' + '<td style="width:50px;">&nbsp;</td>')
        }
        t.push('</tr>')
    };

    function create_details_table_(hdl, skin, info) {
        if (!info.order_ || !info.order_.length) return '';
        var et = arguments[3];
        var rtl = hdl.GetContentInfo().rtl;
        var fs = typeof skin.font_size == 'number' ? skin.font_size : 10;
        var id = hdl.GetUid() + '#detailstop';
        var dir = rtl ? 'dir="rtl"' : 'dir="ltr"';
        var tab_style = 'width:100%;' + 'border:0px none;' + 'border-spacing:0;' + 'border-collapse:collapse;' + 'font-size:' + fs + 'px;' + 'table-layout:fixed;';
        if (!arguments[3]) tab_style += 'display:none;';
        var table = ['<table ' + dir + ' id="' + id + '" style="' + tab_style + '"><tbody>'];
        var env = {
            hdl: hdl,
            skin: skin,
            table: table
        };
        if (et !== 'et_full') {
            add_trackline_(env, {
                header: true,
                icon: 'image_tour_test',
                text: info.title
            });
            var first_ts = info.tourstops[info.order_[0]];
            var st = first_ts && first_ts.start_time || '0';
            var date = (new Date(st)).toGMTString().split(' ');
            date.splice(4, 2);
            var time = WCT.TimestampToTimeString(st, true);
            date = date.join(' ') + ' ' + time.substr(0, time.indexOf('.'));
            add_trackline_(env, {
                info: true,
                icon: 'image_datetime',
                text: date
            })
        }
        create_tourstop_details_(env, info, et);
        table.push('</tbody></table>');
        return '<br/>' + table.join('')
    };

    function get_macro_score_(mac) {
        if (mac.caption == 'branch_off' || mac.caption == 'form_off') {
            var cur = [];
            for (var i = 0, evt = null; evt = mac.events[i++];) {
                if (typeof evt.action_score == 'number') cur.push(evt.action_score);
                if (typeof evt.max_score == 'number') mac.cum = evt.max_score
            }
            mac.cur = Math.min.apply(null, cur)
        }
        return typeof mac.cur == 'number' && typeof mac.cum == 'number' ? mac.cur + ' / ' + mac.cum : ''
    };

    function create_tourstop_details_(env, info) {
        var eval_type = arguments[2];
        var cnt = 1;
        var fm = eval_type === 'et_full';
        for (var i = 0, tsid = null; tsid = info.order_[i++];) {
            var ts = info.tourstops[tsid];
            if (!fm) {
                var tstr = WCT.TimestampToTimeString(ts.start_time, true);
                add_trackline_(env, {
                    tourstop: true,
                    time: tstr.substr(0, tstr.indexOf('.')),
                    nbr: ts.index + 1,
                    text: ts.title
                })
            }
            if (!ts.macros) continue;
            var branch_form = null;
            for (var j = 0, mid = null; mid = ts.macros.order_[j++];) {
                var mac = ts.macros[mid];
                if (QUIZ[mac.caption] && mac.events.length > 0) {
                    if (fm) {
                        create_quiz_modern_details_(env, mac.events[0], eval_type, cnt++)
                    } else {
                        create_quiz_details_(env, mac.events[0], eval_type)
                    }
                    continue
                } else if (eval_type) {
                    continue
                }
                if (mac.caption == 'branch_on' || mac.caption == 'form_on') {
                    branch_form = []
                } else if (mac.caption == 'branch_off' || mac.caption == 'form_off') {
                    if (mac.events && mac.events.length) {
                        var idx = mac.events.indexOfAtt('tour_jump', 'id');
                        var jmp = idx >= 0 ? mac.events.splice(idx, 1)[0] : null;
                        mac.events = mac.events.concat(branch_form);
                        if (jmp) mac.events.push(jmp)
                    } else {
                        mac.events = branch_form
                    }
                    branch_form = null;
                    add_trackline_(env, {
                        icon: get_icon_name_(mac.caption),
                        text: mac.description || mac.caption,
                        score: get_macro_score_(mac),
                        macro_header: true
                    });
                    create_event_details_(env, mac)
                } else if (mac.events && mac.events.length) {
                    if (branch_form) {
                        branch_form = branch_form.concat(mac.events)
                    } else {
                        if (mac.caption && mac.caption != 'end_unit') {
                            add_trackline_(env, {
                                icon: get_icon_name_(mac.caption),
                                text: mac.description || mac.caption,
                                score: get_macro_score_(mac),
                                macro_header: true
                            })
                        }
                        create_event_details_(env, mac)
                    }
                }
            }
        }
    };

    function cleanup_quiz_html_(html_txt) {
        return html_txt.replace(/<img/ig, '[img').replace(/<br\/>/ig, '[br]').replace(/<[^>]*>|\r|\n/g, ' ').replace(/&nbsp;|  /g, ' ').replace(/ \./g, '.').replace(/\[br\]/ig, '<br/>').replace(/\[img/ig, '<img')
    };

    function format_connquiz_text_(txt) {
        var txt_l = txt.split(',,,');
        var res = [];
        for (var i = 0, l = txt_l.length; i < l; i++) {
            var cur = txt_l[i];
            res.push(cur.split('\\|').join('</td><td>&nbsp;</td><td>'))
        }
        return '<table style="line-height:18px;text-align:center;"><tr><td>' + res.join('</td></tr><tr><td>') + '</td></tr></table>'
    };

    function create_quiz_details_(env, evt) {
        var eval_type = arguments[2] || 'et_full_old';
        var hdl = env.hdl;
        var is_g_timeout = evt.result == 'timeout';
        add_trackline_(env, {
            icon: get_icon_name_('quiz_information', evt.type),
            text: hdl.Trans('QUIZTYPE_' + evt.type.toUpperCase()),
            score: (evt.result == 'correct' ? evt.weighting + ' / ' : '0 / ') + evt.weighting,
            macro_header: true
        });
        if (!is_g_timeout) {
            add_trackline_(env, {
                text: '<div style="color:darkgray">' + evt.description + '</div>'
            })
        }
        var exclude = {
            puzzlequiz: 1,
            hotspotquiz: 1
        };
        if (!exclude[evt.type] && eval_type == 'et_full_old' && !is_g_timeout) {
            var cr = evt.type == 'connquiz' ? format_connquiz_text_(cleanup_quiz_html_(evt.correct_responses)) : cleanup_quiz_html_(evt.correct_responses.replace(/,,,/g, '<br/>'));
            add_trackline_(env, {
                icon: get_icon_name_('correct_response'),
                text: hdl.Trans('QUIZ_CORRECT_RESPONSE')
            });
            add_trackline_(env, {
                text: '<div style="color:darkgray">' + cr + '</div>'
            });
            if (evt.result !== 'correct') {
                var sr = evt.student_responses.replace(/,,,/g, '<br/>');
                add_trackline_(env, {
                    icon: get_icon_name_('student_response'),
                    text: hdl.Trans('QUIZ_STUDENT_RESPONSE')
                });
                add_trackline_(env, {
                    text: '<div style="color:darkgray">' + cleanup_quiz_html_(sr) + '</div>'
                })
            }
        }
        if (is_g_timeout) {
            add_trackline_(env, {
                icon: get_icon_name_('tour_next'),
                text: hdl.Trans('QUIZ_TIMEOUT_REACHED')
            })
        } else {
            add_trackline_(env, {
                icon: get_icon_name_('latency'),
                text: hdl.Trans('QUIZ_LATENCY') + ': ' + evt.latency + 's'
            })
        }
    };

    function create_modern_table_(env, id) {
        var rtl = env.hdl.GetContentInfo().rtl;
        var fs = typeof env.skin.font_size == 'number' ? env.skin.font_size : 10;
        var dId = 'row#details#' + id;
        var dir = rtl ? 'dir="rtl"' : 'dir="ltr"';
        var tab_style = 'width:100%;' + 'border:0px none;' + 'border-spacing:0;' + 'border-collapse:collapse;' + 'font-size:' + fs + 'px;' + 'table-layout:fixed;';
        return ['<table style=\"display:none\"' + dir + ' id="' + dId + '" style="' + tab_style + '"><tbody>']
    };

    function create_quiz_modern_details_(env, evt, eval_type, cnt) {
        var hdl = env.hdl;
        var is_g_timeout = evt.result === 'timeout';
        var envtmp = {
            table: create_modern_table_(env, cnt),
            skin: env.skin
        };
        var rtl = env.hdl.GetContentInfo().rtl;
        var dir = rtl ? 'dir="rtl"' : 'dir="ltr"';
        var desc = WCT.RemoveHTMLTags(evt.description);
        add_trackline_(env, {
            icon: get_icon_name_(evt.result == 'correct' ? 'user_action_correct_action' : 'user_action_wrong_action', evt.type),
            icex: "image_expand",
            icco: "image_collapse",
            text: desc,
            score: (evt.result == 'correct' ? evt.weighting + ' / ' : '0 / ') + evt.weighting,
            tt: desc,
            macro_modern_header: true,
            cnt: cnt,
            dir: dir
        });
        add_trackline_(envtmp, {
            icon: get_icon_name_('quiz_information', evt.type),
            text: hdl.Trans('QUIZTYPE_' + evt.type.toUpperCase()),
            score: " ",
            macro_header: true
        });
        var exclude = {
            puzzlequiz: 1,
            hotspotquiz: 1
        };
        if (!exclude[evt.type] && !is_g_timeout) {
            var cr = evt.type == 'connquiz' ? format_connquiz_text_(cleanup_quiz_html_(evt.correct_responses)) : cleanup_quiz_html_(evt.correct_responses.replace(/,,,/g, '<br/><br/>'));
            add_trackline_(envtmp, {
                icon: get_icon_name_('correct_response'),
                text: hdl.Trans('QUIZ_CORRECT_RESPONSE')
            });
            add_trackline_(envtmp, {
                text: '<div style="color:darkgray">' + cr + '</div>'
            });
            if (evt.result !== 'correct') {
                var sr = evt.student_responses.replace(/,,,/g, '<br/><br/>');
                add_trackline_(envtmp, {
                    icon: get_icon_name_('student_response'),
                    text: hdl.Trans('QUIZ_STUDENT_RESPONSE')
                });
                add_trackline_(envtmp, {
                    text: '<div style="color:darkgray">' + cleanup_quiz_html_(sr) + '</div>'
                })
            }
        }
        if (is_g_timeout) {
            add_trackline_(envtmp, {
                icon: get_icon_name_('tour_next'),
                text: hdl.Trans('QUIZ_TIMEOUT_REACHED')
            })
        } else {
            add_trackline_(envtmp, {
                icon: get_icon_name_('latency'),
                text: hdl.Trans('QUIZ_LATENCY') + ': ' + evt.latency + 's'
            })
        }
        envtmp.table.push("</tbody></table>");
        env.table.push("<tr><td colspan=4>" + envtmp.table.join('') + "</td></tr>")
    };

    function create_event_details_(env, mac) {
        var hdl = env.hdl;
        for (var i = 0, e = null; e = mac.events[i++];) {
            var txt = '';
            var data = {
                icon: get_icon_name_(e.id)
            };
            switch (e.id) {
                case 'user_action_correct_action':
                    txt = hdl.Trans('USER_ACTION_CORRECT_ACTION');
                    break;
                case 'user_action_wrong_action':
                    txt = hdl.Trans('USER_ACTION_WRONG_ACTION') + ' ' + hdl.Trans('SCORE_REDUCED') + ': ' + e.action_score;
                    break;
                case 'user_action_help':
                    txt = hdl.Trans('USER_ACTION_HELP');
                    break;
                case 'user_action_goon':
                    txt = hdl.Trans('USER_ACTION_GOON' + (e.auto ? '_AUTO' : ''));
                    break;
                case 'tour_start':
                case 'tour_stop':
                case 'tour_end':
                case 'tour_play':
                case 'tour_jump':
                case 'tour_prev':
                case 'tour_next':
                    txt = hdl.Trans(e.id.toUpperCase());
                    data.macro_header = true;
                    break;
                case 'slide_user_action_textbox_open':
                case 'slide_user_action_textbox_close':
                    txt = hdl.Trans(e.id.toUpperCase());
                    break;
                default:
                    txt = '"' + e.id + '" not implemented';
                    break
            }
            data.text = txt;
            add_trackline_(env, data)
        }
    };

    function create_summary_modern_table_(hdl, info, feedback, skin) {
        if (!info.order_ || !info.order_.length) return '';
        var rtl = hdl.GetContentInfo().rtl;
        var first_ts = info.tourstops[info.order_[0]];
        var st = first_ts && first_ts.start_time || '0';
        var date = (new Date(st)).toGMTString().split(' ');
        var time = WCT.TimestampToTimeString(st, true);
        date.splice(4, 2);
        date = date.join(' ') + ' ' + time.substr(0, time.indexOf('.'));
        var d = skin.image_datetime;
        var dt = '<table><tr>' + '<td><div style=\"text-align:center;\">' + '<div style="background-image:url(' + d.id + ');background-position:' + d.x + 'px ' + d.y + 'px;width:' + d.w + 'px;height:' + d.h + 'px;margin:0 auto"></div>' + '</div></td>' + '<td colspan=3 style=\"font-size:12px;font-weight:normal;vertical-align:top;text-align:' + (rtl ? 'right' : 'left') + ';\">' + date + '</td>' + '</tr></table>';
        var i = info.passed ? skin.image_right : skin.image_wrong;
        var img = '<td rowspan=2 style=\"vertical-align: top\"><div style=\"text-align:center;\">' + '<div style=\"background-image:url(' + i.id + ');background-position:' + i.x + 'px ' + i.y + 'px;width:' + i.w + 'px;height:' + i.h + 'px;margin:0 auto\"></div>' + '</div></td>';
        var fb = feedback.enable ? info.passed ? feedback.pass : feedback.fail : '';
        return ['<table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" style="font-weight: bold; margin-top: 30px;"><tr>', img, '<td colspan=3 style=\"vertical-align:top;text-align:', (rtl ? 'right' : 'left'), ';\">', fb, '<br></td></tr>', '<tr style=\"vertical-align:bottom;\">', '<td style=\"text-align:', (rtl ? 'right' : 'left'), ';padding-bottom: 2px;', (rtl ? 'padding-left: 4px;' : ''), '\">', hdl.Trans('QUIZ_SCORE'), ': ', info.cur, '</td>', '<td style=\"text-align:center;padding-bottom: 2px;\">', hdl.Trans('QUIZ_REQ_SCORE'), ': ', info.pass, '</td>', '<td style=\"text-align:', (rtl ? 'left' : 'right'), ';padding-bottom: 2px;', (!rtl ? 'padding-right: 4px;' : ''), '\">', hdl.Trans('QUIZ_MAX_SCORE'), ': ', info.max, '</td></tr>', '<tr><td colspan=4 style=\"padding-top:10px;\">' + dt + '</td></tr></table>'].join('')
    };

    function create_summary_table_(hdl, info) {
        var rtl = hdl.GetContentInfo().rtl;
        return ['<table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" style="font-weight: bold; margin: 30px 0;"><tr>', '<td style=\"vertical-align:top;text-align:', (rtl ? 'right' : 'left'), ';\">', hdl.Trans('QUIZ_SCORE'), ': ', info.cur, '</td>', '<td style=\"vertical-align:top;text-align:center;\">', hdl.Trans('QUIZ_REQ_SCORE'), ': ', info.pass, '</td>', '<td style=\"vertical-align:top;text-align:', (rtl ? 'left' : 'right'), ';\">', hdl.Trans('QUIZ_MAX_SCORE'), ': ', info.max, '</td>', '</tr></table>'].join('')
    };

    function create_feedback_(feedback, passed) {
        var img = [];
        var i = feedback[(passed ? 'pass' : 'fail') + '_icon'];
        if (i) {
            if (i.type === 'image') {
                img.push(
                    '<td>', '<img style="width:', i.w, 'px;height:', i.h, 'px;overflow: hidden; opacity: 1; visibility: visible; display: block; z-index: 21; border-style: none; border-width: 0px;" ', 'src ="', DATA.context.ToAbsPath(i.image.id), '"></img>', '</td>')
            } else if (i.image && i.image.id) {
                var ol = i.offset_left || 0;
                var ot = i.offset_top || 0;
                if (ol > 0) ol *= -1;
                if (ot > 0) ot *= -1;
                img.push(
                    '<td style="width:', i.w, 'px;">', '<div class="SpriteControl" ', 'style="overflow: hidden; opacity: 1; visibility: visible; display: block; z-index: 21; ', 'background-position: ', ol, 'px ', ot, 'px; width: ', i.w, 'px; height: ', i.h, 'px; ', 'background-image: url(', DATA.context.ToAbsPath(i.image.id), '); border-style: none; border-width: 0px; background-repeat: no-repeat;"></div>', '</td>')
            }
        }
        return ['<table style="background-color: #EEEEEE; border: 1px solid #808080; width: 100%;">', '<tr>', img.join(''), '<td>', passed ? feedback.pass : feedback.fail, '</td>', '</tr>', '</table>'].join('')
    };
    return {
        Test: function(hdl, skin) {
            var d = hdl.GetTrackingData() || {};
            if (d.passed) {
                d.image = 'image_right';
                d.message = 'TEST_OK1'
            } else {
                d.image = 'image_wrong';
                d.message = 'TEST_FAILED1'
            }
            return create_(hdl, skin, d)
        },
        Quiz: function(hdl, skin, req_percent, eval_type, feedback) {
            var d = hdl.GetTrackingData(true, req_percent) || {};
            d.passed = d.cur >= d.pass;
            d.is_quiz = true;
            var fm = eval_type != 'et_full';
            var r = fm ? create_summary_table_(hdl, d) : create_summary_modern_table_(hdl, d, feedback, skin);
            var dl = eval_type != 'et_minimal' ? create_details_table_(hdl, skin, d, eval_type) : '';
            if (feedback.enable && dl && fm) r += create_feedback_(feedback, d.passed);
            if (dl) r += dl;
            return r
        }
    }
})();
HANDLER.library.Layout = function(hdl_id, skin, split) {
    this.hdl_id_ = hdl_id;
    this.skin_ = skin;
    this.dim_ = null;
    this.ani_d_ = null;
    this.split_ = split;
    this.split_last_ = null;
    this.v_ = {
        l: true,
        r: true
    };
    this.w_ = {
        l: 0,
        r: 0,
        s: 0
    };
    this.h_ = {
        l: 0,
        r: 0,
        s: 0,
        i: 0,
        lh: 0,
        rh: 0
    };
    this.m_ = {
        l: [],
        r: []
    };
    this.mt_ = {};
    this.splitter_ = {
        hdl: null,
        x: 0,
        y: 0
    }
};
HANDLER.library.Layout.AnimationEnd = function() {
    WCT.dom.RemoveCssTransition(this, HANDLER.library.Layout.AnimationEnd);
    var hdl_id = this.id.split('#')[0];
    var hdl = MANAGER.handler.Get(hdl_id);
    var lay = hdl.GetLayoutManager();
    if (!lay) return;
    var vr = lay.ani_d_ < 0;
    lay.SetFrameVisibility('left', !vr);
    lay.SetFrameVisibility('right', vr);
    lay.ani_d_ = null;
    WCT.dom.CssTransform(this, 'translate3d', 0, 0, 0);
    this.style.left = '';
    this.style.right = '0px';
    this.style.zIndex = 1;
    this.style.zIndex = 0
};
HANDLER.library.Layout.prototype = (function() {
    function get_frame_wh_() {
        var d = this.dim_;
        var sw = this.w_;
        var sh = this.h_;
        var lw = Math.max(0, d.w - sw.l);
        var rw = Math.max(0, d.w - sw.r);
        var lh = Math.max(0, d.h - sh.l);
        var rh = Math.max(0, d.h - sh.r);
        var v = this.v_;
        if (v.l && v.r) {
            var s = typeof arguments[0] == 'number' ? arguments[0] : this.split_;
            var w = Math.max(0, d.w - sw.l - sw.r - sw.s);
            lw = Math.floor(w * s);
            rw = Math.max(0, w - lw)
        }
        return {
            lw: lw,
            rw: rw,
            lh: lh,
            rh: rh
        }
    };

    function on_splitter_(id, type) {
        switch (type) {
            case 'move':
                on_splitter_move_.call(this, id, arguments[2]);
                break;
            case 'click':
                on_splitter_click_.call(this);
                on_splitter_end_.call(this);
                break;
            case 'begin':
                var mods = this.mt_;
                for (var uid in mods) {
                    if (mods[uid] == 'Search') {
                        var mod = this.GetModule(uid);
                        if (mod) mod.Blur()
                    }
                }
                break;
            case 'end':
                on_splitter_end_.call(this);
                break
        }
    };

    function on_splitter_click_() {
        if (this.split_last_ == null) {
            var hid = this.hdl_id_;
            var hdl = MANAGER.handler.Get(hid);
            var rtl = hdl.GetContentInfo().rtl;
            var s = this.split_;
            on_splitter_move_.call(this, null, rtl ? this.dim_.w : this.w_.l);
            this.split_last_ = s
        } else {
            var x = get_frame_wh_.call(this, this.split_last_).lw;
            on_splitter_move_.call(this, null, x);
            this.split_last_ = null
        }
    };

    function on_splitter_end_() {
        if (PLATFORM.ANDROID && !BROWSER.CHROME) this.Resize()
    };

    function on_splitter_move_(el, x) {
        var w = this.w_;
        var s = (x - w.l) / (this.dim_.w - w.l - w.r - w.s);
        this.split_ = Math.max(0, Math.min(s, 1));
        this.split_last_ = null;
        this.Resize(null, PLATFORM.ANDROID && !BROWSER.CHROME)
    };

    function resize_module_(f, w, h) {
        var m = this.m_[f];
        var sh = this.h_;
        var y = sh[f == 'l' ? 'lh' : 'rh'];
        h -= y;
        var auto = {};
        var fixed = {};
        var ac = 0;
        var tc = 0;
        var rh = 0;
        for (var i = 0, c = null; c = m[i++];) {
            if (!c.IsVisible()) continue;
            var cid = c.GetUid();
            var fh = c.GetFixedHeight();
            if (fh) {
                fixed[cid] = fh;
                rh += fh
            } else {
                auto[cid] = 1;
                ac++
            }
            tc++
        }
        var a = 0;
        if (ac > 0) {
            a = Math.floor((h - rh) / ac)
        } else if (tc == 1) {
            auto = fixed;
            a = h
        }
        for (var i = 0, c = null; c = m[i++];) {
            if (!c.IsVisible()) continue;
            var cid = c.GetUid();
            var ch = auto[cid] ? a : fixed[cid];
            var p = c.SetPosition(0, y, w, ch);
            if (!p) continue;
            y += p.h;
            h -= p.h
        }
    };

    function resize_modules_(lw, lh, rw, rh) {
        resize_module_.call(this, 'l', lw, lh);
        resize_module_.call(this, 'r', rw, rh)
    };
    return {
        Destructor: function() {
            this.hdl_id_ = null;
            this.skin_ = null;
            this.dim_ = null;
            this.v_ = null;
            this.w_ = null;
            this.h_ = null;
            var m = this.m_;
            for (var i = 0, l = m.l.length; i < l; i++) {
                m.l[i].Destructor();
                m.l[i] = null
            }
            for (var i = 0, l = m.r.length; i < l; i++) {
                m.r[i].Destructor();
                m.r[i] = null
            }
            this.m_ = null;
            this.mt_ = null;
            if (this.splitter_.hdl) {
                this.splitter_.hdl.Destructor()
            }
            this.splitter_ = null
        },
        Resize: function() {
            if (arguments[0]) {
                this.dim_ = arguments[0]
            } else if (!this.dim_) {
                return
            }
            var id = this.hdl_id_ + '#content#';
            var l = $(id + 'left');
            var r = $(id + 'right');
            if (!l || !r) return;
            var fd = get_frame_wh_.call(this);
            var v = this.v_;
            var shdl = this.splitter_.hdl;
            if (v.l && v.r) {
                var dim = this.dim_;
                var sw = this.w_;
                var sh = this.h_;
                l.style.width = fd.lw + 'px';
                l.style.height = fd.lh + 'px';
                r.style.width = fd.rw + 'px';
                r.style.height = fd.rh + 'px';
                if (shdl) {
                    shdl.SetPosition({
                        x: fd.lw + sw.l,
                        y: 0,
                        h: dim.h - sh.s
                    });
                    shdl.SetVisible(true)
                }
            } else {
                l.style.width = fd.lw + 'px';
                l.style.height = fd.lh + 'px';
                r.style.width = fd.rw + 'px';
                r.style.height = fd.rh + 'px';
                if (shdl) shdl.SetVisible(false)
            }
            if (!arguments[1]) {
                resize_modules_.call(this, fd.lw, fd.lh, fd.rw, fd.rh)
            } else {
                var hdl_id = id.split('#')[0];
                var hdl = MANAGER.handler.Get(hdl_id);
                var rtl = hdl.GetContentInfo().rtl;
                if (rtl) {
                    resize_modules_.call(this, 0, 0, fd.rw, fd.rh)
                } else {
                    resize_modules_.call(this, fd.lw, fd.lh, 0, 0)
                }
            }
        },
        Create: function(dom) {
            var id = this.hdl_id_ + '#content';
            var sk = this.skin_;
            var w = this.w_;
            var h = this.h_;
            var d = $$('div');
            d.id = id;
            WCT.skin.ApplyTextFormats(d, sk);
            d.style.position = 'absolute';
            d.style.overflow = 'hidden';
            var l = $$('div');
            l.id = id + '#left';
            l.style.position = 'absolute';
            l.style.left = '0px';
            l.style.top = '0px';
            d.appendChild(l);
            var r = $$('div');
            r.id = id + '#right';
            r.style.backgroundColor = 'transparent';
            r.style.position = 'absolute';
            r.style.right = '0px';
            r.style.top = '0px';
            d.appendChild(r);
            if (sk.frames) {
                WCT.skin.ApplyTextFormats(l, sk.frames);
                WCT.skin.ApplyTextFormats(r, sk.frames);
                WCT.skin.ApplyBorder(l, sk.frames);
                WCT.skin.ApplyBorder(r, sk.frames);
                var bw = WCT.skin.GetBorderWidth(sk.frames);
                var bh = WCT.skin.GetBorderHeight(sk.frames);
                w.l = bw;
                w.r = bw;
                h.l = bh;
                h.r = bh
            }
            var lh = $$('div');
            lh.style.overflow = 'hidden';
            lh.style.textOverflow = 'ellipsis';
            l.appendChild(lh);
            var rh = $$('div');
            rh.style.overflow = 'hidden';
            rh.style.textOverflow = 'ellipsis';
            r.appendChild(rh);
            if (sk.headers) {
                WCT.skin.ApplyPosition(lh, sk.headers);
                WCT.skin.ApplyPosition(rh, sk.headers);
                WCT.skin.ApplyTextFormats(lh, sk.headers);
                WCT.skin.ApplyTextFormats(rh, sk.headers);
                WCT.skin.ApplyBorder(lh, sk.headers);
                WCT.skin.ApplyBorder(rh, sk.headers);
                lh.style.position = 'static';
                rh.style.position = 'static';
                var bh = WCT.skin.GetBorderHeight(sk.headers);
                h.lh = (sk.headers.h || 0) + bh;
                h.rh = h.lh
            }
            if (sk.splitter) {
                var s = new WCT.Splitter.Vert(id + '#splitter', null, null, {
                    callback_f: on_splitter_,
                    callback_s: this
                }, {
                    cover_z: 5
                }, sk.splitter);
                s.Create(d);
                this.splitter_.hdl = s;
                w.s = (sk.splitter.w || 0) + WCT.skin.GetBorderWidth(sk.splitter);
                h.s = WCT.skin.GetBorderHeight(sk.splitter)
            }
            if (dom.firstChild) {
                dom.insertBefore(d, dom.firstChild)
            } else {
                dom.appendChild(d)
            }
            return d
        },
        AddModule: function(frame_id, mod_id, skin) {
            var id = this.hdl_id_;
            var fra = $(id + '#content#' + frame_id);
            if (!fra || !skin) return;
            var mod = new HANDLER.library['Module' + mod_id](id, skin, frame_id, arguments[3]);
            if (mod) {
                var fid = frame_id == 'left' ? 'l' : 'r';
                mod.Create(fra);
                this.m_[fid].push(mod);
                var uid = mod.GetUid();
                this.mt_[uid] = mod_id;
                return uid
            }
            return null
        },
        GetModuleType: function(type) {
            var m = this.m_;
            for (var a in {
                    l: 1,
                    r: 1
                }) {
                for (var i = 0, c = null; c = m[a][i++];) {
                    if (c.GetType() === type) return c
                }
            }
        },
        GetModule: function(uid) {
            var m = this.m_;
            for (var a in {
                    l: 1,
                    r: 1
                }) {
                for (var i = 0, c = null; c = m[a][i++];) {
                    if (c.GetUid() == uid) return c
                }
            }
            return null
        },
        GetFramePos: function(frame_id) {
            var fid = frame_id.charAt(0);
            if (!this.v_[fid]) return null;
            var d = $(this.hdl_id_ + '#content#' + frame_id);
            var p = WCT.dom.GetPosition(d);
            var f = get_frame_wh_.call(this);
            return {
                x: p.left,
                y: p.top,
                w: f[fid + 'w'],
                h: f[fid + 'h']
            }
        },
        CollapseLeft: function() {
            this.split_last_ = null;
            on_splitter_click_.call(this)
        },
        SetFrameVisibility: function(frame_id, vis) {
            var fid = frame_id == 'left' ? 'l' : 'r';
            var v = this.v_;
            if (v[fid] == vis) return;
            v[fid] = vis;
            var id = this.hdl_id_ + '#content#';
            var fra = $(id + frame_id);
            if (fra) fra.style.display = vis ? 'block' : 'none';
            var sp = $(id + 'splitter');
            if (sp) sp.style.display = v.l && v.r ? 'block' : 'none';
            this.Resize()
        },
        AnimateFrames: function(vl, vr) {
            var v = this.v_;
            if (vl == vr || v.l == v.r) {
                this.SetFrameVisibility('left', vl);
                this.SetFrameVisibility('right', vr);
                return
            } else if (v.l == vl && v.r == vr) {
                return
            }
            var id = this.hdl_id_ + '#content#';
            var l = $(id + 'left');
            var r = $(id + 'right');
            if (!l || !r) return;
            var w = vr ? -l.offsetWidth : r.offsetWidth;
            this.ani_d_ = w;
            if (vr) {
                r.style.left = -w + 'px';
                r.style.display = 'block'
            } else {
                r.style.left = '0px'
            }
            r.style.right = '';
            r.style.display = 'block';
            l.style.display = 'block';
            WCT.SetTimeout(this.animate_, 1, this)
        },
        animate_: function() {
            var r = $(this.hdl_id_ + '#content#right');
            if (!r) return;
            WCT.dom.CssTransition(r, 'transform', '300ms', 'linear', '0s', HANDLER.library.Layout.AnimationEnd);
            WCT.dom.CssTransform(r, 'translate3d', this.ani_d_, 0, 0)
        }
    }
})();
HANDLER.library.Search = (function() {
    var WAIT_TIME = 100;

    function load_(tclass, uid) {
        var a = tclass + '!' + uid;
        var l = this.loaded;
        if (!l[a]) l[a] = {};
        if (!l[a].etxt) {
            l[a].etxt = 1;
            DATA.GetA(a + ':entity.txt', loaded_etxt_, this)
        }
        if (this.settings.slides && tclass == 'slide' && !l[a].sjs) {
            l[a].sjs = 1;
            DATA.GetA(a + ':slide.js', loaded_sjs_, this)
        }
    };

    function load_sm_(tclass, uid) {
        var a = tclass + '!' + uid;
        var l = this.loaded;
        if (!l[a]) l[a] = {};
        var r = [];
        if (!l[a].etxt) {
            l[a].etxt = 1;
            r.push(a + ':entity.txt')
        }
        if (this.settings.slides && tclass == 'slide' && !l[a].sjs) {
            l[a].sjs = 1;
            r.push(a + ':slide.js')
        }
        return r
    };

    function loaded_etxt_(data) {
        if (!data || !HANDLER.library.Search.STORE[this.uid]) return;
        hit_etxt_.call(this, data);
        var as = HANDLER.library.GetAutostartItem(data);
        if (as && !as.indexOf('slide!') && as.indexOf(':') < 0) {
            if (!this.autostart[as]) this.autostart[as] = [];
            this.autostart[as].push(data)
        }
        if (false && TRACKING.backend.collaborator.Available()) {
            var addrs = [];
            var asset = data.assets || [];
            for (var i = 0, a = null; a = asset[i++];) {
                if (a.type == 'Ref') {
                    a = load_sm_.call(this, a.tclass, a.uid);
                    addrs = addrs.concat(a)
                } else {
                    hit_etxt_.call(this, a, data)
                }
            }
            var data = addrs.length ? DATA.GetSM(addrs) : [];
            loaded_sm_.call(this, data)
        } else {
            if (!data.assets) return;
            for (var i = 0, a = null; a = data.assets[i++];) {
                if (a.type == 'Ref') {
                    load_.call(this, a.tclass, a.uid)
                } else {
                    hit_etxt_.call(this, a, data)
                }
            }
        }
    };

    function loaded_sjs_(data, addr) {
        var c = data && data.controls || null;
        if (!c) return;
        if (c.page && c.page.template) {
            var t = DATA.GetS(c.page.template + ':slide.js');
            t = t && t.controls ? WCT.DeepCopy(t.controls) : null;
            if (t) {
                for (var id in c) {
                    if (!t[id]) t[id] = {};
                    for (var att in c[id]) {
                        t[id][att] = c[id][att]
                    }
                }
            }
            c = t
        }
        var d = addr.split(':')[0];
        d = DATA.GetS(d + ':entity.txt');
        hit_sjs_.call(this, d, c)
    };

    function loaded_sm_(data) {
        if (!HANDLER.library.Search.STORE[this.uid]) return;
        var q = this.queue;
        if (!q) return;
        for (var i = 0, a = null; a = data[i++];) {
            q.push(a)
        }
        if (q.length) {
            WCT.SetTimeout(loaded_etxt_, WAIT_TIME, this, [q.shift()])
        } else {}
    };

    function hit_etxt_(data) {
        if (!HANDLER.library.Search.STORE[this.uid]) return;
        var st = this.settings;
        var se = this.search;
        var ls = this.lsearch;
        var l = ls.length;
        for (var s in st) {
            if (!st[s] || typeof data[s] != 'string') continue;
            var v = data[s].toLowerCase();
            if (v.indexOf(se) >= 0) {
                hit_.call(this, data, arguments[1]);
                return
            }
            var f = true;
            for (var i = l; i >= 0; i--) {
                if (v.indexOf(ls[i]) < 0) {
                    f = false;
                    break
                }
            }
            if (f) {
                hit_.call(this, data, arguments[1]);
                return
            }
        }
    };

    function hit_sjs_(data, ctls) {
        var se = this.search;
        var ls = this.lsearch;
        var l = ls.length;
        for (var id in ctls) {
            var v = ctls[id].text;
            if (!v) continue;
            if (WCT.HasHtmlString(v, se)) {
                hit_.call(this, data);
                return
            }
            var f = true;
            for (var i = l; i >= 0; i--) {
                if (!WCT.HasHtmlString(v, ls[i])) {
                    f = false;
                    break
                }
            }
            if (f) {
                hit_.call(this, data);
                return
            }
        }
    };

    function hit_(data) {
        var p = arguments[1];
        var m = data.type == 'Ref' || data.type == undefined ? 1 : (p ? 2 : 0);
        if (!m) return;
        var a = m == 1 ? data.tclass + '!' + data.uid : p.tclass + '!' + p.uid;
        var s = this.autostart;
        if (m == 1 && s[a]) {
            s = s[a];
            for (var i = 0, c = null; c = s[i++];) {
                hit_.call(this, c)
            }
            return
        }
        var r = this.reported;
        if (r[a]) return;
        r[a] = 1;
        this.on_found.call(this.scope, m == 1 ? data : p)
    };
    return {
        STORE: {},
        Cleanup: function() {
            for (var uid in this.STORE) {
                this.Stop(uid)
            }
            this.STORE = {}
        },
        Start: function(search, tclass, uid, settings, on_found, scope) {
            var u = WCT.uid.Generate(8, 'HLS_SRCH_');
            var s = search.toLowerCase();
            var o = {
                uid: u,
                search: s,
                lsearch: s.split(' '),
                settings: settings,
                on_found: on_found,
                scope: scope,
                loaded: {},
                reported: {},
                autostart: {},
                queue: []
            };
            this.STORE[u] = o;
            load_.call(o, tclass, uid);
            return u
        },
        Stop: function(uid) {
            var s = this.STORE[uid];
            if (!s) return;
            s.lsearch = null;
            s.settings = null;
            s.on_found = null;
            s.scope = null;
            s.loaded = null;
            s.reported = null;
            s.autostart = null;
            s.queue = null;
            delete this.STORE[uid]
        }
    }
})();
HANDLER.library.Favorites = {
    Add: function(data) {
        var k = WCT.store.KEYS.lib_favorites;
        var s = WCT.store.Get(k);
        var d = data.tclass + '!' + data.uid;
        if (!s) {
            WCT.store.Set(k, d)
        } else {
            s = s.replace(/#+/g, '#').replace(/^#/, '');
            s = s.split('#');
            var i = s.indexOf(d);
            if (i < 0) {
                s.push(d);
                WCT.store.Set(k, s.join('#'))
            }
        }
    },
    Remove: function(data) {
        var k = WCT.store.KEYS.lib_favorites;
        var s = WCT.store.Get(k);
        var d = data.tclass + '!' + data.uid;
        if (s) {
            s = s.replace(/#+/g, '#').replace(/^#/, '');
            s = s.split('#');
            var i = s.indexOf(d);
            if (i >= 0) {
                s.splice(i, 1);
                WCT.store.Set(k, s.join('#'))
            }
        }
    },
    Is: function(data) {
        var key = data.tclass + '!' + data.uid;
        var act = WCT.store.Get(WCT.store.KEYS.lib_favorites);
        act = act ? act.split('#') : [];
        return act.indexOf(key) >= 0
    },
    Show: function(hdl, mod) {
        var k = WCT.store.KEYS.lib_favorites;
        var s = (WCT.store.Get(k) || '').split('#');
        var v = [];
        var r = [];
        for (var i = 0, c = null; c = s[i++];) {
            var d = DATA.GetS(c + ':entity.txt');
            if (!d) continue;
            r.push(d);
            v.push(c)
        }
        if (v.length) {
            WCT.store.Set(k, v.join('#'))
        } else {
            WCT.store.Remove(k);
            hdl.Select(null)
        }
        r.sort(function(a, b) {
            var ac = a.caption.toLowerCase();
            var bc = b.caption.toLowerCase();
            return ac < bc ? -1 : (ac > bc ? 1 : 0)
        });
        mod.Clean();
        while (r[0]) {
            mod.Add(r.shift())
        }
    },
    Configure: function(hdl, mod) {
        var lm = HANDLER.library.LIST_MODES;
        var mo = hdl.GetListMode();
        if (mod) {
            if (mo == lm.favorites) {
                mod.SetVisible(true);
                this.Show(hdl, mod)
            } else {
                mod.SetVisible(false);
                mod.Clean()
            }
        } else if (mo == lm.favorites) {
            return false
        }
        return true
    }
};
HANDLER.library.Recent = {
    Add: function(data) {
        var k = WCT.store.KEYS.lib_recent;
        var s = WCT.store.Get(k);
        var d = data.tclass + '!' + data.uid;
        if (!s) {
            WCT.store.Set(k, d)
        } else {
            s = s.replace(/#+/g, '#').replace(/^#/, '');
            s = s.split('#');
            var i = s.indexOf(d);
            if (i >= 0) s.splice(i, 1);
            s.push(d);
            WCT.store.Set(k, s.join('#'))
        }
    },
    Show: function(hdl, mod) {
        var k = WCT.store.KEYS.lib_recent;
        var s = (WCT.store.Get(k) || '').split('#');
        mod.Clean();
        var v = [];
        for (var i = s.length - 1, c = null; c = s[i--];) {
            var d = DATA.GetS(c + ':entity.txt');
            if (!d) continue;
            mod.Add(d);
            v.unshift(c)
        }
        if (v.length) {
            WCT.store.Set(k, v.join('#'))
        } else {
            WCT.store.Remove(k);
            hdl.Select(null)
        }
    },
    Configure: function(hdl, mod) {
        var lm = HANDLER.library.LIST_MODES;
        var mo = hdl.GetListMode();
        if (mod) {
            if (mo == lm.recent) {
                mod.SetVisible(true);
                this.Show(hdl, mod)
            } else {
                mod.SetVisible(false);
                mod.Clean()
            }
        } else if (mo == lm.recent) {
            return false
        }
        return true
    }
};
HANDLER.library.Context = function(hdl, mid, sid, use_my) {
    this.hdl_ = hdl;
    this.mid_ = mid;
    this.sid_ = sid;
    this.use_my_ = use_my;
    this.scan_ = {};
    this.loaded_ = false;
    this.show_ = false;
    this.lc_ = 0;
    this.roles_ = new WCT.map(null, sid);
    this.roles_.Set('no_roles_', !this.roles_.InStore());
    this.init_()
};
HANDLER.library.Context.Configure = function(hdl, mod) {
    var lm = HANDLER.library.LIST_MODES;
    var mo = hdl.GetListMode();
    if (mod) {
        if (mo == lm.context) {
            mod.SetVisible(true);
            hdl.GetContextHelp().Show()
        } else {
            mod.SetVisible(false);
            mod.Clean()
        }
    } else if (mo == lm.context) {
        return false
    }
    return true
};
HANDLER.library.Context.prototype = (function() {
    function loaded_(d) {
        if (!d) {
            if (!this.lc_ && this.show_) this.Show();
            return
        }
        var c = this.roles_;
        var r = d.roles ? d.roles.split(',') : [];
        var s = c.InStore();
        for (var i = r.length - 1; i >= 0; i--) {
            var role = r[i].trim();
            if (role && !c.HasKey(role)) c.Set(role, s ? false : true)
        }
        var ci = d.context_id || d.context_info;
        if (ci) {
            var dci = ci.toLowerCase().split(',').toMap({
                delimiter: '=',
                multi_map_delimiter: ',',
                trim_keys: true,
                trim_values: true
            });
            r = r.toMap({
                fallback_value: true,
                trim_keys: true
            });
            this.scan_[d.tclass + '!' + d.uid] = {
                k: dci,
                r: r
            }
        }
        if (d.assets) {
            for (var i = 0, a = null; a = d.assets[i++];) {
                if (a.type == 'Ref') {
                    var id = a.tclass + '!' + a.uid;
                    if (!this.scan_[id]) {
                        this.lc_++;
                        DATA.GetA(id + ':entity.txt', loaded_, this)
                    }
                }
            }
        }
        this.lc_--;
        if (!this.lc_) this.loaded_ = true;
        if (this.loaded_ && this.show_) this.Show()
    };

    function match_(keys) {
        var r;
        if (this.use_my_) {
            r = this.roles_.Get()
        } else {
            var c = this.roles_.Copy();
            c.Set(null, true);
            r = c.Get();
            c.Destructor()
        }
        var h = {};
        for (var id in r) {
            if (r[id]) h[id] = true
        }
        r = h;
        var max = 0;
        var m = this.scan_;
        var s = {};
        for (var id in m) {
            var cur = m[id];
            var ok = false;
            var rc = 0;
            for (var rid in cur.r) {
                rc++;
                if (r[rid]) {
                    ok = true;
                    break
                }
            }
            if (!ok && (rc || !r.no_roles_)) {
                continue
            }
            for (var cid in keys) {
                var k = cur.k[cid];
                if (!k) continue;
                k = k.split(',');
                for (var i = k.length - 1, v = keys[cid]; i >= 0; i--) {
                    var c = k[i];
                    var a = c.charAt(c.length - 1) == '*';
                    c = c.replace(/\*/g, '');
                    c = new RegExp('^' + c + (a ? '.*' : '$'));
                    if (!v.search(c)) {
                        if (!s[id]) s[id] = 0;
                        if (++s[id] > max) max = s[id]
                    }
                }
            }
        }
        r = [];
        for (var id in s) {
            if (s[id] == max) r.push(id)
        }
        return r
    };
    return {
        Destructor: function() {
            this.hdl_ = null;
            this.scan_ = null;
            if (this.roles_) {
                this.roles_.Destructor();
                this.roles_ = null
            }
        },
        Show: function() {
            var hdl = this.hdl_;
            var mod = hdl.GetModule(this.mid_);
            if (!mod || hdl.GetListMode() != HANDLER.library.LIST_MODES.context) return;
            this.show_ = true;
            if (!this.loaded_) return;
            var r = [];
            var k = hdl.GetConfig('ctx');
            var s = match_.call(this, k);
            while (s && s[0]) {
                var d = DATA.GetS(s.shift() + ':entity.txt');
                if (!d) continue;
                r.push(d)
            }
            r.sort(function(a, b) {
                var ac = a.caption.toLowerCase();
                var bc = b.caption.toLowerCase();
                return ac < bc ? -1 : (ac > bc ? 1 : 0)
            });
            hdl.Select(null);
            mod.Clean();
            while (r[0]) {
                mod.Add(r.shift())
            }
        },
        UseMyRoles: function(use) {
            if (this.use_my_ != use) {
                this.use_my_ = use;
                this.Show()
            }
        },
        GetRoles: function() {
            return this.roles_.Get()
        },
        UpdateRole: function(role, value) {
            var r = this.roles_;
            if (r.HasKey(role) && r.Get(role) != value) {
                r.Set(role, value);
                r.ToStore();
                this.Show()
            }
        },
        init_: function() {
            if (this.roles_.InStore()) {
                this.roles_.FromStore(true)
            }
            this.lc_++;
            var i = this.hdl_.GetContentInfo();
            DATA.GetA(i.tclass + '!' + i.uid + ':entity.txt', loaded_, this)
        }
    }
})();
HANDLER.library.Glossary = function(hdl, mid) {
    this.hdl_ = hdl;
    this.mid_ = mid;
    this.tid_ = null;
    this.tmr_ = null
};
HANDLER.library.Glossary.Configure = function(hdl, mod) {
    var lm = HANDLER.library.LIST_MODES;
    var mo = hdl.GetListMode();
    if (mod) {
        if (mo == lm.glossary) {
            hdl.Select(null);
            mod.SetVisible(true);
            mod.Reselect()
        } else {
            if (mod.IsVisible()) {
                hdl.Select(null);
                mod.SetVisible(false)
            }
        }
    } else if (mo == lm.glossary) {
        return false
    }
    return true
};
HANDLER.library.Glossary.GetRootLanguage = function(hdl) {
    var i = hdl.GetContentInfo();
    var e = DATA.GetS(i.tclass + '!' + i.uid + ':entity.txt');
    var l = e && e.language || null;
    return l == 'mul' ? null : l
};
HANDLER.library.Glossary.prototype = {
    Destructor: function() {
        this.Cancel();
        this.hdl_ = null
    },
    Show: function(data) {
        var tid = arguments[1];
        if (!tid) {
            tid = WCT.uid.Generate();
            this.tid_ = tid
        } else if (tid != this.tid_) {
            return
        }
        this.Cancel();
        var h = this.hdl_;
        var m = h.GetModule(this.mid_);
        var l = h.GetListMode();
        if (!m || l != HANDLER.library.LIST_MODES.glossary) return;
        var lang = h.GetConfig('lib_glossary_rootlang') ? HANDLER.library.Glossary.GetRootLanguage(h) : null;
        var a = null;
        while (!a && data.length) {
            var cur = data[0];
            a = cur.lst[cur.idx];
            if (!a) {
                data.shift();
                continue
            }
            a = DATA.GetS(a.tclass + '!' + a.uid + ':entity.txt');
            if (!a || lang != null && a.language != 'mul' && a.language != lang) {
                a = null;
                cur.idx++
            }
        }
        if (!a) return;
        data[0].idx++;
        if (a.tclass == 'group') {
            data.unshift({
                lst: a.assets || [],
                idx: 0
            });
            this.tmr_ = WCT.SetTimeout(this.Show, 5, this, [data, tid]);
            return
        }
        if (a.tclass == 'cdoc' && a.doc_type == 'glossary_entry') {
            var capt = '<h3 class="glossary_caption">' + (a.caption || '') + '</h3>';
            var shortd = '<div class="glossary_shortdesc">' + (a.shortdesc || '') + '</div>';
            var desc = '<div class="glossary_description">' + (a.description || '') + '</div>';
            var bottom = '<div style="border-bottom:1px solid #333333;font-size:1px;margin:15px 0"></div>';
            m.ExtendRawDescription({
                tclass: a.tclass,
                uid: a.uid,
                description: capt + shortd + desc + bottom
            })
        }
        this.tmr_ = WCT.SetTimeout(this.Show, 5, this, [data, tid])
    },
    Cancel: function() {
        if (this.tmr_) {
            WCT.ClearTimeout(this.tmr_);
            this.tmr_ = null
        }
    }
};
HANDLER.library.SlideControl = function(hdl_id, sub_id, renderer_idx, skin) {
    this.hdl_id_ = hdl_id;
    this.sub_id_ = sub_id;
    this.shl_id_ = renderer_idx;
    this.skin_ = skin;
    this.id_ = hdl_id + '#' + sub_id;
    this.mid_ = null;
    this.tid_ = null;
    this.set_pos_ = null;
    this.data_ = null;
    this.rtl_ = false;
    this.btns_ = [];
    this.bwidths_ = {};
    this.v_ = {
        space: true,
        content: true
    }
};
HANDLER.library.SlideControl.prototype = {
    Destructor: function() {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var scx = hdl ? hdl.GetSlideCtx(this.shl_id_) : null;
        if (scx) scx.CleanupTriggers(this.id_);
        this.skin_ = null;
        this.set_pos_ = null;
        this.data_ = null;
        this.btns_ = null;
        this.bwidths_ = null
    },
    Create: function(data) {
        this.data_ = data;
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        this.rtl_ = hdl.GetContentInfo().selection_rtl;
        return null
    },
    Update: function(data) {
        this.data_ = data;
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var opt = arguments[1] || {};
        if (opt.rtl) {
            var rtl = hdl.GetContentInfo().selection_rtl;
            if (rtl != this.rtl_) {
                this.rtl_ = rtl;
                if (this.mid_) this.update_sr_control_(this.mid_, {
                    direction: this.rtl_ ? 'rtl' : 'ltr'
                });
                if (this.tid_) this.update_sr_control_(this.tid_, {
                    direction: this.rtl_ ? 'rtl' : 'ltr'
                })
            }
        }
        if (opt.trigger) {
            var scx = hdl.GetSlideCtx(this.shl_id_);
            if (scx) scx.CleanupTriggers(this.id_)
        }
    },
    SetPosition: function(x, y, w, h) {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var shl = hdl && hdl.GetSlideHandler(this.shl_id_) || null;
        if (!shl) return 0;
        var ch = this.GetFixedHeight() || h;
        var mi = this.mid_;
        if (mi) {
            var r = this.update_sr_control_(mi, {
                x: x,
                y: y,
                w: w,
                h: ch
            });
            if (r && r.x != null) x = r.x
        }
        var os = this.get_outer_spacing_();
        var bo = this.get_border_();
        var sp = {
            shl: shl,
            os: os,
            bo: bo,
            x: this.rtl_ ? x + os.r : x + os.l,
            y: y + os.t + bo.t,
            w: w - os.w,
            h: h - os.h - bo.h,
            fh: ch - os.h - bo.h
        };
        this.set_pos_ = sp;
        var ti = this.tid_;
        if (ti) this.update_sr_control_(ti, {
            x: sp.x,
            y: sp.y,
            w: sp.w,
            h: sp.fh
        });
        return ch
    },
    GetFixedHeight: function() {
        var s = this.skin_;
        if (!s.h) return 0;
        var st = s.outer_spacing_t || 0;
        var sb = s.outer_spacing_b || 0;
        var bt = s.border_top;
        var bb = s.border_bottom;
        bt = bt ? Number(bt.split('px')[0]) : 0;
        bb = bb ? Number(bb.split('px')[0]) : 0;
        if (isNaN(bt)) bt = 0;
        if (isNaN(bb)) bb = 0;
        return s.h + st + sb + bt + bb
    },
    OnSlidePropChange: function(ctl_id, name, value) {},
    SetVisibility: function(v) {
        this.set_visibility_(v, 'content', true)
    },
    IsVisible: function() {
        return this.v_.content
    },
    get_border_: function() {
        var s = this.skin_;
        var b = {
            l: s.border_left,
            r: s.border_right,
            t: s.border_top,
            b: s.border_bottom
        };
        var c = {
            l: null,
            r: null,
            t: null,
            b: null
        };
        for (var i in b) {
            var d = b[i];
            if (typeof d == 'string') {
                c[i] = d.split(' ')[2] || null;
                d = Number(d.split('px')[0]);
                if (isNaN(d)) d = 0
            } else if (typeof d != 'number') {
                d = 0
            }
            b[i] = d
        }
        b.w = b.l + b.r;
        b.h = b.t + b.b;
        b.colors = c;
        b.c = c.l || c.r || c.t || c.b;
        return b
    },
    get_outer_spacing_: function() {
        var s = this.skin_;
        var o = {
            l: s.outer_spacing_l || 0,
            r: s.outer_spacing_r || 0,
            t: s.outer_spacing_t || 0,
            b: s.outer_spacing_b || 0
        };
        o.w = o.l + o.r;
        o.h = o.t + o.b;
        return o
    },
    get_padding_: function() {
        var s = arguments[0] || this.skin_;
        var g = s.padding || 0;
        var p = {
            l: s.padding_left != null ? s.padding_left : g,
            r: s.padding_right != null ? s.padding_right : g,
            t: s.padding_top != null ? s.padding_top : g,
            b: s.padding_bottom != null ? s.padding_bottom : g
        };
        p.w = p.l + p.r;
        p.h = p.t + p.b;
        return p
    },
    generate_background_: function() {
        var id = arguments[0] || this.id_;
        var bo = this.get_border_();
        this.mid_ = id;
        return {
            id: id,
            type: 'text',
            padding: 0,
            border: 0,
            text: '',
            background_color: this.skin_.background_color || '#FFFFFF',
            border_color: bo.c || 'transparent',
            border_t: bo.t,
            border_b: bo.b,
            hide_scrollbars: false,
            x: 0,
            y: 0,
            w: 100,
            h: 100,
            z: 1
        }
    },
    set_visibility_: function(v) {
        var type = arguments[1] || 'space';
        if (this.v_[type] == v && !arguments[2]) return;
        this.v_[type] = v;
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var shl = hdl && hdl.GetSlideHandler(this.shl_id_) || null;
        if (!shl) return;
        var h = !v;
        if (this.mid_) this.update_sr_control_(this.mid_, {
            hidden: h
        });
        if (this.tid_) this.update_sr_control_(this.tid_, {
            hidden: h
        });
        if (this.fid_) this.update_sr_control_(this.fid_, {
            hidden: h
        });
        var btns = this.btns_;
        for (var i = 0, bid = null; bid = btns[i++];) {
            this.update_sr_control_(bid, {
                hidden: h
            })
        }
    },
    update_sr_control_: function(ctl_id, params) {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var shl = hdl && hdl.GetSlideHandler(this.shl_id_) || null;
        if (!shl) return null;
        var cur = shl.GetControl(ctl_id);
        if (!cur) return null;
        var upd = {};
        var cnt = 0;
        for (var id in params) {
            if (typeof params[id] == 'object' || typeof cur[id] == 'object' || params[id] != cur[id]) {
                upd[id] = params[id];
                cnt++
            }
        }
        if (cnt == 1) {
            for (var id in upd) {
                return shl.UpdateControl(ctl_id, id, upd[id])
            }
        } else if (cnt > 1) {
            return shl.UpdateControl(ctl_id, upd)
        }
        return null
    },
    add_sr_control_: function(ctl) {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var shl = hdl && hdl.GetSlideHandler(this.shl_id_) || null;
        if (shl) shl.AddControl(ctl)
    },
    remove_sr_control_: function(ctl_id) {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var shl = hdl && hdl.GetSlideHandler(this.shl_id_) || null;
        if (shl) shl.RemoveControl(ctl_id)
    }
};
HANDLER.library.SlideDescription = function(hdl_id, sub_id, renderer_idx, skin) {
    HANDLER.library.SlideControl.apply(this, arguments);
    this.id_ += '#description';
    this.tid_ = this.id_ + '#text';
    this.txt_ = '';
    this.force_ = false
};
HANDLER.library.SlideDescription.prototype = new HANDLER.library.SlideControl;
WCT.ExtendObject(HANDLER.library.SlideDescription.prototype, {
    Create: function(data) {
        var s = this.skin_;
        if (!s) return null;
        HANDLER.library.SlideControl.prototype.Create.call(this, data);
        this.force_ = arguments[1] || false;
        var ctls = {};
        var txt = this.generate_text_();
        var hid = txt == '';
        var bg = this.generate_background_();
        bg.hidden = hid;
        ctls[bg.id] = bg;
        var id = this.tid_;
        var ctl = {
            id: id,
            type: 'text',
            text: txt,
            padding: 0,
            border: 0,
            background_color: s.background_color || '#FFFFFF',
            direction: this.rtl_ ? 'rtl' : 'ltr',
            hidden: hid,
            hide_scrollbars: false,
            align: 'start',
            valign: 'top',
            shadow_show: false,
            opacity: 100,
            font_family: 'Arial',
            x: 1,
            y: 1,
            w: 500,
            h: 300,
            z: 2
        };
        ctls[id] = ctl;
        this.v_.content = !hid;
        if (s.font_weight == 'bold') ctl.bold = 1;
        if (s.font_size) ctl.font_size = s.font_size;
        return ctls
    },
    Update: function(data) {
        HANDLER.library.SlideControl.prototype.Update.call(this, data, {
            rtl: true
        });
        var txt = this.generate_text_(data);
        this.update_sr_control_(this.tid_, {
            text: txt
        });
        this.set_visibility_(txt != '', 'content')
    },
    Extend: function(data) {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        if (!hdl) return;
        var ctx = hdl.GetContext();
        ctx.Set(data.tclass, data.uid);
        ctx.SetScope(data.tclass);
        var txt = this.txt_ + ctx.ResolveHtmlString(data.description || '');
        this.txt_ = txt;
        var v = txt != '';
        if (this.v_.content != v) {
            this.set_visibility_(txt != '', 'content');
            var mod = hdl.GetModule(this.sub_id_);
            if (mod) mod.ReAlignControls()
        }
        this.update_sr_control_(this.tid_, {
            text: txt
        })
    },
    SetPosition: function(x, y, w, h) {
        var bg_h = HANDLER.library.SlideControl.prototype.SetPosition.apply(this, arguments);
        if (!bg_h) return 0;
        var os = this.get_outer_spacing_();
        this.set_visibility_(h >= os.h + 20);
        return this.v_.space ? bg_h : 0
    },
    generate_text_: function() {
        var txt = '';
        var data = this.data_;
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var has_s = typeof data.shortdesc == 'string' && data.shortdesc && hdl.GetConfig('lib_shortdesc');
        var has_d = this.force_ || typeof data.description == 'string' && data.description && hdl.GetConfig('lib_desc');
        if (has_s || has_d) {
            var skn = this.skin_;
            if (has_s) {
                txt += data.shortdesc;
                if (has_d) {
                    var ssds = skn.short_desc_splitter || {};
                    txt += ['<div style="', 'width:100%;', 'height:1px;', 'background-color:', ssds.color || '#CCCCCC', ';', 'margin-top:', ssds.outer_spacing_t || 0, 'px;', 'margin-bottom:', ssds.outer_spacing_b || 0, 'px;', '"></div>'].join('')
                }
            }
            if (has_d) txt += data.description || '';
            var ctx = hdl.GetContext();
            ctx.Set(data.tclass, data.uid);
            ctx.SetScope(data.tclass);
            var ci = hdl.GetContentInfo();
            var env = {
                ci_: ci,
                GetS: function(addr) {
                    return DATA.GetS(addr)
                },
                GetEntityList: function() {
                    var l = ['group', 'book', 'slide', 'cdoc', 'project'];
                    var r = {};
                    var ci = this.ci_;
                    for (var i = 0, c = null; c = l[i++];) {
                        r[c] = ci['selection_' + c]
                    }
                    return r
                }
            };
            var pl = {};
            var ign = {
                tclass: true,
                assets: true,
                breadcrumb_trail: true,
                clone_master: true,
                clone_src: true
            };
            var tc = data.tclass;
            for (var i in data) {
                if (ign[i]) continue;
                pl[tc + ':.' + i] = data[i]
            }
            txt = WCT.Placeholder.Resolve(txt, ctx, env, {
                param_list: pl
            });
            txt = ctx.ResolveHtmlString(txt);
            env.ci_ = null;
            env.help_ = null;
            env.GetS = null;
            if (skn.iframe_padding_right) {
                var pdir = this.rtl_ ? 'left:' : 'right:';
                txt = '<div style="padding-' + pdir + skn.iframe_padding_right + 'px;">' + txt + '</div>'
            }
        }
        this.txt_ = txt;
        return txt
    }
});
HANDLER.library.SlideButtons = function(hdl_id, sub_id, renderer_idx, skin) {
    HANDLER.library.SlideControl.apply(this, arguments);
    this.id_ += '#buttons';
    this.ctl_h_ = 0
};
HANDLER.library.SlideButtons.prototype = new HANDLER.library.SlideControl;
HANDLER.library.SlideButtons.GenerateCustomStyle = function(skin) {
    var r = {};
    var a = ['bg', 'bg_h', 'bg_a'];
    for (var i = 0, n = null; n = a[i++];) {
        var c = WCT.DeepCopy(skin[n]);
        if (!c) continue;
        var b = c.m;
        var w = c.l;
        var e = c.r;
        if (!b) continue;
        if (!b.id) b.id = skin.src;
        if (!b.repeat) b.repeat = 'x';
        var f = {
            body: {
                image: b
            },
            w_w: 0,
            e_w: 0,
            n_h: 0,
            s_h: 0
        };
        if (skin.button_h) f.h = skin.button_h;
        r[n] = {
            frame: f,
            content: {}
        };
        if (w) {
            if (!w.id) w.id = skin.src;
            r[n].frame.w = {
                image: w
            };
            r[n].frame.w_w = w.w || 0
        }
        if (e) {
            if (!e.id) e.id = skin.src;
            r[n].frame.e = {
                image: e
            };
            r[n].frame.e_w = e.w || 0
        }
    }
    if (skin.image) {
        r.image = WCT.DeepCopy(skin.image);
        if (!r.image.id) r.image.id = skin.src;
        if (r.image.w == null) r.image.w = skin.img_w || 0;
        if (r.image.h == null) r.image.h = skin.img_h || 0
    }
    return r
};
WCT.ExtendObject(HANDLER.library.SlideButtons.prototype, (function() {
    function get_button_text_(data, asset) {
        var cd = data.caption;
        var ca = asset.caption;
        return ca != cd && ca.isPrefix(cd) ? ca.substr(cd.length).trim() : ca
    };

    function get_link_(tid, id) {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var scx = hdl.GetSlideCtx(this.shl_id_);
        tid += '_' + id;
        scx.RegisterTrigger(this.uid_, tid, on_button_, this);
        return 'page.trainer#' + tid
    };

    function get_buttons_(data) {
        var tid = WCT.uid.Generate(20, 'TR_');
        var btn = [];
        if (data.tclass == 'book') {
            btn.push({
                icon: WCT.Tree.GetIconImage(data, 'btn'),
                icon_over: WCT.Tree.GetIconImage(data, 'btn', 'h'),
                icon_down: WCT.Tree.GetIconImage(data, 'btn', 'a'),
                text: get_button_text_(data, data),
                href: get_link_.call(this, tid, 'book')
            })
        } else if (data.assets) {
            for (var i = 0, a = null; a = data.assets[i]; i++) {
                if (a.type == DATA.LESSON_TOUR_KEY && (!BROWSER.IE6 && !BROWSER.METRO || a.mode != 'praxis')) {
                    btn.push({
                        icon: WCT.Tree.GetIconImage(a, 'btn'),
                        icon_over: WCT.Tree.GetIconImage(a, 'btn', 'h'),
                        icon_down: WCT.Tree.GetIconImage(a, 'btn', 'a'),
                        text: get_button_text_(data, a),
                        href: get_link_.call(this, tid, a.mode)
                    })
                }
            }
        }
        return btn
    };

    function get_style_() {
        var sb = WCT.DeepCopy(this.skin_.button);
        sb.bg = {
            m: sb.image,
            r: WCT.DeepCopy(sb.image)
        };
        sb.bg_h = {
            m: sb.image_h,
            r: WCT.DeepCopy(sb.image_h)
        };
        sb.bg_a = {
            m: sb.image_a,
            r: WCT.DeepCopy(sb.image_a)
        };
        if (sb.bg.r) sb.bg.r.w = 8;
        if (sb.bg_h.r) sb.bg_h.r.w = 8;
        if (sb.bg_a.r) sb.bg_a.r.w = 8;
        delete sb.image_a;
        delete sb.image_h;
        sb.icons.padding_r = 4;
        sb.button_h = sb.h;
        return sb
    };

    function on_button_(tid) {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        if (!hdl) return;
        var bid = tid.split('_').top();
        bid = bid == 'book' ? 'book!' + this.data_.uid : 'project!' + this.data_.uid + ':' + bid;
        hdl.Execute(bid)
    };

    function get_custom_style_(skin) {
        var st = HANDLER.library.SlideButtons.GenerateCustomStyle(skin);
        var keys = ['', '_h', '_a'];
        for (var i = 0, l = keys.length; i < l; i++) {
            var k1 = keys[i];
            var k2 = 'bg' + k1;
            if (!st[k2]) continue;
            st[k2].image = skin.icons;
            var c = skin['text_color' + k1] || skin.text_color;
            if (c && st[k2].frame && st[k2].frame.body) {
                st[k2].frame.body.text_color = c
            }
        }
        return st
    };

    function generate_background_(btns) {
        var sb = get_style_.call(this);
        var st = get_custom_style_.call(this, sb);
        var a = this.generate_background_();
        var b = sb.border_left || sb.border_right;
        if (b) {
            var bl = Number((sb.border_left || '').split('px')[0]);
            var br = Number((sb.border_right || '').split('px')[0]);
            a.button_border_style = b.split(' ')[1];
            a.button_border_color = '#' + b.split('#')[1];
            a.button_border_l = !isNaN(bl) ? bl : 0;
            a.button_border_r = !isNaN(br) ? br : 0
        }
        var sk = this.skin_;
        WCT.ExtendObject(a, {
            type: 'buttonarea',
            padding_t: sk.outer_spacing_t || 0,
            padding_r: sk.outer_spacing_r || 0,
            padding_b: sk.outer_spacing_b || 0,
            padding_l: sk.outer_spacing_l || 0,
            button_padding_r: sb.outer_spacing_r || 0,
            button_padding_b: sb.outer_spacing_b || 0,
            buttons: JSON.stringify(btns),
            button_style: st.bg,
            button_style_over: st.bg_h,
            button_style_down: st.bg_a,
            box_shadow: sb.box_shadow,
            font_size: sb.font_size || 12,
            direction: this.rtl_ ? 'rtl' : 'ltr',
            z: 3
        });
        delete a.text;
        return a
    };
    return {
        Create: function(data) {
            var sk = this.skin_;
            if (!sk || !sk.button) return null;
            HANDLER.library.SlideControl.prototype.Create.call(this, data);
            var btns = get_buttons_.call(this, data);
            var ba = generate_background_.call(this, btns);
            var v = btns.length > 0;
            ba.hidden = !v;
            this.v_.content = v;
            var ctls = {};
            ctls[ba.id] = ba;
            return ctls
        },
        Update: function(data) {
            HANDLER.library.SlideControl.prototype.Update.call(this, data, {
                rtl: true,
                trigger: true
            });
            var btns = get_buttons_.call(this, data);
            this.update_sr_control_(this.id_, {
                buttons: JSON.stringify(btns)
            });
            this.set_visibility_(btns.length > 0, 'content')
        },
        SetPosition: function(x, y, w, h) {
            var bg_h = HANDLER.library.SlideControl.prototype.SetPosition.apply(this, arguments);
            if (this.ctl_h_) bg_h = this.ctl_h_;
            this.set_visibility_(h >= bg_h);
            if (!this.v_.space) return 0;
            return bg_h
        },
        OnSlidePropChange: function(ctl_id, name, value) {
            value = Number(value);
            if (name == 'h' && !isNaN(value) && this.ctl_h_ != value) {
                this.ctl_h_ = value;
                var hdl = MANAGER.handler.Get(this.hdl_id_);
                var mod = hdl && hdl.GetModule(this.sub_id_) || null;
                if (mod) mod.ReAlignControls()
            }
        }
    }
})());
HANDLER.library.SlideAssets = function(hdl_id, sub_id, renderer_idx, skin) {
    HANDLER.library.SlideControl.apply(this, arguments);
    this.id_ += '#assets';
    this.tid_ = this.id_ + '#text';
    this.txt_ = ''
};
HANDLER.library.SlideAssets.prototype = new HANDLER.library.SlideControl;
WCT.ExtendObject(HANDLER.library.SlideAssets.prototype, (function() {
    function generate_items_() {
        var d = this.data_;
        var s = this.skin_;
        if (!d.assets) return null;
        var tid = WCT.uid.Generate(20, 'TR_');
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var scx = hdl.GetSlideCtx(this.shl_id_);
        var id = this.id_;
        var sa = s.asset;
        var si = sa.icons || {};
        var itm = [];
        for (var i = 0, a = null; a = d.assets[i]; i++) {
            if (a.type == 'Ref' || a.type == DATA.LESSON_TOUR_KEY || !a.fileName) continue;
            var cur = {};
            itm.push(cur);
            var ai = WCT.Tree.GetIconImage(a);
            if (ai.id) {
                cur.icon = {
                    id: ai.id,
                    off_x: ai.x,
                    off_y: ai.y,
                    x: si.x || 0,
                    y: si.y || 0,
                    w: si.w || ai.w || 0,
                    h: si.h || ai.h || 0
                }
            }
            cur.text = a.caption || a.fileName;
            var trig = tid + '_' + i;
            scx.RegisterTrigger(id, trig, on_exec_, this);
            cur.link = 'page.trainer#' + trig
        }
        return itm.length ? JSON.stringify(itm) : null
    };

    function on_exec_(tid) {
        var i = Number(tid.split('_').top());
        var d = this.data_;
        var a = d && d.assets && d.assets[i] || null;
        var h = MANAGER.handler.Get(this.hdl_id_);
        if (a && h) h.Execute(d.tclass + '!' + d.uid + ':' + a.fileName)
    };
    return {
        Create: function(data) {
            var s = this.skin_ && this.skin_.asset || null;
            if (!s) return null;
            HANDLER.library.SlideControl.prototype.Create.call(this, data);
            var ski = s.icons || {};
            var itm = generate_items_.call(this);
            var hid = itm == null;
            var tcl = s.text_color || '#000000';
            var ctl = {
                id: this.tid_,
                type: 'linklist',
                items: itm,
                hidden: hid,
                border: 0,
                padding: 0,
                item_padding: s.outer_spacing_b || 0,
                text_color: tcl,
                text_color_over: s.text_color_h || tcl,
                text_color_down: s.text_color_a || tcl,
                line_height: s.h || 12,
                font_size: s.font_size || 12,
                direction: this.rtl_ ? 'rtl' : 'ltr',
                underline: s.text_decoration == 'underline',
                white_space: 'nowrap',
                valign: 'top',
                x: (ski.x || 0) + (ski.w || s.w || 0) + 3,
                y: 0,
                w: 100,
                h: s.h || 12,
                z: 2
            };
            var bg = this.generate_background_();
            bg.hidden = hid;
            this.v_.content = !hid;
            var ctls = {};
            ctls[bg.id] = bg;
            ctls[ctl.id] = ctl;
            return ctls
        },
        Update: function(data) {
            HANDLER.library.SlideControl.prototype.Update.call(this, data, {
                rtl: true,
                trigger: true
            });
            var itm = generate_items_.call(this);
            this.update_sr_control_(this.tid_, {
                items: itm
            });
            this.set_visibility_(itm != null, 'content')
        },
        SetPosition: function(x, y, w, h) {
            var bg_h = HANDLER.library.SlideControl.prototype.SetPosition.apply(this, arguments);
            this.set_visibility_(h >= bg_h);
            if (!this.v_.space) return 0;
            return bg_h
        }
    }
})());
HANDLER.library.SlideBreadcrumbTrail = function(hdl_id, sub_id, renderer_idx, skin) {
    HANDLER.library.SlideControl.apply(this, arguments);
    this.id_ += '#breadcrumb';
    this.tid_ = this.id_ + '#items';
    this.fid_ = this.id_ + '#fav';
    this.fav_ = false
};
HANDLER.library.SlideBreadcrumbTrail.prototype = new HANDLER.library.SlideControl;
WCT.ExtendObject(HANDLER.library.SlideBreadcrumbTrail.prototype, (function() {
    function create_favorite_() {
        var s = this.skin_.favorite;
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var scx = hdl.GetSlideCtx(this.shl_id_);
        var tid = this.id_.replace(/#/g, '-') + '-fav';
        scx.RegisterTrigger(this.id_, tid, on_fav_, this);
        var act = HANDLER.library.Favorites.Is(this.data_);
        act = s[act ? 'image_a' : 'image'];
        var id = this.fid_;
        var ico = {
            id: id,
            type: 'sprite',
            border: 0,
            image: {
                id: act.id,
                w: s.w,
                h: s.h
            },
            offset_left: -act.x || 0,
            offset_top: -act.y || 0,
            repeat_x: 0,
            repeat_y: 0,
            href: 'trigger!page.trainer#' + tid,
            tooltip: s.tooltip ? hdl.Trans(s.tooltip) : '',
            hidden: false,
            shadow_show: false,
            opacity: 100,
            x: 0,
            y: 0,
            w: s.w,
            h: s.h,
            z: 2
        };
        this.fav_ = true;
        return ico
    };

    function create_button_(caption, first, active) {
        var rtl = this.rtl_;
        var si = this.skin_.item;
        var ib = si.border || '';
        var bw = Number(ib.split('px')[0]);
        var bc = ib.split(' ')[2] || '#CCCCCC';
        var pd = this.get_padding_(si);
        if (isNaN(bw)) bw = 0;
        var btn = {
            dir: first ? (rtl ? 'c_left' : 'c_right') : (rtl ? 'b_left' : 'b_right'),
            border: bw,
            border_color: bc,
            padding_l: rtl ? pd.r : pd.l,
            padding_r: rtl ? pd.l : pd.r,
            visual_over: 0,
            visual_down: 0,
            text: WCT.CleanupHTMLString(caption),
            h: si.h
        };
        if (si.font_size) btn.font_size = si.font_size;
        if (si.background_color) btn.background_color = si.background_color;
        if (si.text_color) btn.text_color = si.text_color;
        if (active) {
            if (si.background_color_h || si.text_color_h) {
                btn.visual_over = 1;
                btn.background_color_over = si.background_color_h || si.background_color || '#CCCCCC';
                btn.text_color_over = si.text_color_h || si.text_color || '#000000'
            }
            if (si.background_color_a || si.text_color_a) {
                btn.visual_down = 1;
                btn.background_color_down = si.background_color_a || si.background_color || '#CCCCCC';
                btn.text_color_down = si.text_color_a || si.text_color || '#000000'
            }
        } else {
            if (si.background_color_d) btn.background_color = si.background_color_d;
            if (si.text_color_d) btn.text_color = si.text_color_d
        }
        return btn
    };

    function create_buttons_() {
        var id = this.id_;
        var h = MANAGER.handler.Get(this.hdl_id_);
        var s = h.GetSlideCtx(this.shl_id_);
        var t = id.replace(/#/g, '-') + '-';
        var d = this.data_;
        var b = d.breadcrumb_trail || [];
        var r = [];
        for (var i = 0, c = null; c = b[i]; i++) {
            var o = create_button_.call(this, c.caption, !i, true);
            s.RegisterTrigger(id, t + i, on_button_, this);
            o.href = 'page.trainer#' + t + i;
            r.push(o)
        }
        r.push(create_button_.call(this, d.caption, !i, false));
        return r
    };

    function on_button_(tid) {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        if (!hdl) return;
        var i = Number(tid.split('-').top());
        if (isNaN(i)) return;
        var d = this.data_;
        var b = d && d.breadcrumb_trail || null;
        var c = b && b[i] || null;
        if (!c) return;
        hdl.Execute(c.tclass + '!' + c.uid, false)
    };

    function on_fav_() {
        var f = HANDLER.library.Favorites;
        var d = this.data_;
        var a = !f.Is(d);
        f[a ? 'Add' : 'Remove'](d);
        var k = this.skin_.favorite;
        var i = k[a ? 'image_a' : 'image'];
        this.update_sr_control_(this.fid_, {
            image: {
                id: i.id,
                w: k.w,
                h: k.h
            },
            offset_left: -i.x || 0,
            offset_top: -i.y || 0
        })
    };
    return {
        Create: function(data) {
            var s = this.skin_;
            if (!s || !s.item) return null;
            HANDLER.library.SlideControl.prototype.Create.call(this, data);
            var hdl = MANAGER.handler.Get(this.hdl_id_);
            var rtl = hdl.GetContentInfo().rtl;
            this.rtl_ = rtl;
            var itm = create_buttons_.call(this);
            var ctl = {
                id: this.tid_,
                type: 'breadcrumb_trail',
                items: JSON.stringify(itm),
                direction: rtl ? 'rtl' : 'ltr',
                spacing: s.item_spacing || 0,
                x: 0,
                y: 0,
                w: 100,
                h: s.h,
                z: 2
            };
            var bg = this.generate_background_();
            bg.h = s.h;
            var fav = s.favorite && s.favorite.image ? create_favorite_.call(this) : null;
            var ctls = {};
            ctls[bg.id] = bg;
            ctls[ctl.id] = ctl;
            if (fav) ctls[fav.id] = fav;
            return ctls
        },
        Update: function(data) {
            HANDLER.library.SlideControl.prototype.Update.call(this, data);
            var itm = create_buttons_.call(this);
            this.update_sr_control_(this.tid_, {
                items: JSON.stringify(itm)
            });
            var skn = this.skin_.favorite;
            if (skn) {
                var act = HANDLER.library.Favorites.Is(data);
                act = skn[act ? 'image_a' : 'image'];
                this.update_sr_control_(this.fid_, {
                    offset_left: -act.x || 0,
                    offset_top: -act.y || 0,
                    image: {
                        id: act.id,
                        w: skn.w,
                        h: skn.h
                    }
                })
            }
        },
        SetPosition: function(x, y, w, h) {
            var bg_h = HANDLER.library.SlideControl.prototype.SetPosition.apply(this, arguments);
            this.set_visibility_(h >= bg_h);
            if (!this.v_.space) return 0;
            if (this.fav_) {
                var sk = this.skin_;
                var fs = sk.favorite;
                var sp = this.set_pos_;
                var rtl = this.rtl_;
                var fx = rtl ? sp.x + (fs.outer_spacing_r || 0) : sp.x + sp.w - (fs.outer_spacing_r || 0) - fs.w;
                var fy = y + ((sk.h - fs.h) >> 1);
                this.update_sr_control_(this.fid_, {
                    x: fx,
                    y: fy
                });
                var tx = rtl ? sp.x + fs.w : sp.x;
                this.update_sr_control_(this.tid_, {
                    x: tx,
                    w: sp.w - fs.w
                })
            }
            return bg_h
        }
    }
})());
HANDLER.library.SlideCaption = function(hdl_id, sub_id, renderer_idx, skin) {
    HANDLER.library.SlideDescription.apply(this, arguments);
    this.id_ = this.id_.replace(/description/, 'caption');
    this.tid_ = this.id_ + '#text'
};
HANDLER.library.SlideCaption.prototype = new HANDLER.library.SlideDescription;
WCT.ExtendObject(HANDLER.library.SlideCaption.prototype, {
    Create: function(data) {
        var ctls = HANDLER.library.SlideDescription.prototype.Create.call(this, data, true);
        var ctl = ctls && ctls[this.tid_];
        if (ctl) {
            ctl.hide_scrollbars = 1;
            ctl.white_space = 'nowrap';
            ctl.text = WCT.CleanupHTMLString(ctl.text)
        }
        return ctls
    },
    SetPosition: function(x, y, w, h) {
        var bg_h = HANDLER.library.SlideControl.prototype.SetPosition.apply(this, arguments);
        this.set_visibility_(h >= bg_h);
        return this.v_.space ? bg_h : 0
    },
    generate_text_: function() {
        var d = WCT.DeepCopy(this.data_);
        d.description = WCT.CleanupHTMLString(d.caption);
        delete d.shortdesc;
        this.data_ = d;
        var txt = HANDLER.library.SlideDescription.prototype.generate_text_.call(this);
        if (BROWSER.IE && BROWSER.VERSION < 8) {
            txt = '<span style="white-space:nowrap">' + txt + '</span>'
        }
        return txt
    }
});
HANDLER.library.Module = function(hdl_id, skin, frame_id) {
    this.hdl_id_ = hdl_id;
    this.skin_ = skin;
    this.frame_id_ = frame_id;
    this.uid_ = WCT.uid.Generate(8, 'LM_' + (this.mod_type_ ? this.mod_type_ + '_' : ''));
    this.fixed_w_ = null;
    this.fixed_h_ = null;
    this.v_ = true
};
HANDLER.library.Module.prototype = {
    Destructor: function() {
        this.skin_ = null;
        var d = this.GetDom();
        if (d) d.parentNode.removeChild(d);
        this.hdl_id_ = null;
        this.uid_ = null
    },
    GetUid: function() {
        return this.uid_
    },
    GetType: function() {
        return this.mod_type_
    },
    GetFixedWidth: function() {
        return this.fixed_w_
    },
    GetFixedHeight: function() {
        return this.fixed_h_
    },
    GetDom: function() {
        return $(this.hdl_id_ + '#' + this.uid_)
    },
    CalcReservedWidth: function() {
        var sk = this.skin_;
        return WCT.skin.GetBorderWidth(sk) + (sk.outer_spacing_l || 0) + (sk.outer_spacing_r || 0)
    },
    CalcReservedHeight: function() {
        var sk = this.skin_;
        return WCT.skin.GetBorderHeight(sk) + (sk.outer_spacing_t || 0) + (sk.outer_spacing_b || 0)
    },
    SetPosition: function(x, y, w, h) {
        var d = this.GetDom();
        if (!d || !this.v_) return null;
        var r = {
            w: w,
            h: h,
            v: true
        };
        d.style.left = x + 'px';
        d.style.top = y + 'px';
        var cw = this.fixed_w_;
        if (cw) {
            r.w = cw;
            if (cw > w) cw = w
        } else {
            cw = Math.max(0, w - this.CalcReservedWidth());
            d.style.width = cw + 'px'
        }
        var ch = this.fixed_h_;
        if (ch) {
            r.h = ch;
            if (ch > h) ch = h
        } else {
            ch = Math.max(0, h - this.CalcReservedHeight());
            d.style.height = ch + 'px'
        }
        if (cw <= 0 || ch <= 0) {
            d.style.display = 'none';
            r.v = false
        } else {
            d.style.display = 'block'
        }
        return r
    },
    SetVisible: function(v) {
        if (v != this.v_) {
            this.v_ = v;
            var d = this.GetDom();
            if (d) d.style.display = v ? 'block' : 'none'
        }
    },
    IsVisible: function() {
        return this.v_
    },
    Create: function(dom) {
        var sk = this.skin_;
        if (sk.w) this.fixed_w_ = sk.w + this.CalcReservedWidth();
        if (sk.h) this.fixed_h_ = sk.h + this.CalcReservedHeight();
        var d = $$('div');
        d.id = this.hdl_id_ + '#' + this.uid_;
        WCT.skin.ApplyTextFormats(d, sk);
        WCT.skin.ApplyBorder(d, sk);
        d.style.position = 'absolute';
        d.style.overflow = 'hidden';
        d.style.left = '0px';
        d.style.top = '0px';
        if (!this.v_) d.style.display = 'none';
        if (sk.w) d.style.width = sk.w + 'px';
        if (sk.h) d.style.height = sk.h + 'px';
        if (sk.outer_spacing_l) d.style.paddingLeft = sk.outer_spacing_l + 'px';
        if (sk.outer_spacing_r) d.style.paddingRight = sk.outer_spacing_r + 'px';
        if (sk.outer_spacing_t) d.style.paddingTop = sk.outer_spacing_t + 'px';
        if (sk.outer_spacing_b) d.style.paddingBottom = sk.outer_spacing_b + 'px';
        dom.appendChild(d);
        return d
    }
};
HANDLER.library.ModuleFilter = function() {
    this.mod_type_ = 'FILT';
    HANDLER.library.Module.apply(this, arguments);
    this.val_ = null
};
HANDLER.library.ModuleFilter.prototype = new HANDLER.library.Module;
HANDLER.library.ModuleFilter.STYLE = {
    mt: 3,
    mr: 3,
    mb: 3,
    ml: 3,
    bw: 1,
    br: 5,
    pt: 1,
    pr: 3,
    pb: 1,
    pl: 1
};
WCT.ExtendObject(HANDLER.library.ModuleFilter.prototype, (function() {
    function on_event_() {
        var ids = this.id.split('#');
        var hdl = MANAGER.handler.Get(ids[0]);
        var me = hdl && hdl.GetModule(ids[1]);
        if (!me) return;
        var idx = this.selectedIndex;
        var opt = this[idx];
        id = opt.id.split('#').top();
        id = opt ? id : null;
        if (id == -1 || id.substr(0, 4) != 'FLT_') id = null;
        if (id == me.val_) return;
        me.val_ = id;
        hdl.SetFilter(id)
    };
    return {
        Destructor: function() {
            var s = $(this.hdl_id_ + '#' + this.uid_ + '#sel');
            if (s) {
                s.onclick = null;
                s.onchange = null;
                s.onkeyup = null
            }
            HANDLER.library.Module.prototype.Destructor.call(this)
        },
        SetPosition: function(x, y, w, h) {
            var r = HANDLER.library.Module.prototype.SetPosition.apply(this, arguments);
            var s = $(this.hdl_id_ + '#' + this.uid_ + '#sel');
            if (s) {
                var st = HANDLER.library.ModuleFilter.STYLE;
                var t = Math.min(Math.max(0, (r.h + st.mt - st.mb - s.offsetHeight) >> 1), r.h);
                var w = Math.max(0, r.w - st.ml - st.mr);
                s.style.top = t + 'px';
                s.style.width = w + 'px'
            }
            return r
        },
        Create: function(dom) {
            var d = HANDLER.library.Module.prototype.Create.apply(this, arguments);
            var hdl_id = this.hdl_id_;
            var hdl = MANAGER.handler.Get(hdl_id);
            var rtl = hdl.GetContentInfo().rtl;
            var cat = hdl.GetConfig('library');
            cat = cat ? DATA.GetS(cat) : null;
            cat = cat && cat.categories;
            var sk = this.skin_;
            var st = HANDLER.library.ModuleFilter.STYLE;
            var id = hdl_id + '#' + this.uid_ + '#sel';
            var sel = WCT.dom.CreateElementMSIE('select', null, id);
            sel.id = id;
            sel.size = 1;
            sel.style.position = 'absolute';
            sel.style.left = st.ml + 'px';
            sel.style.borderWidth = st.bw + 'px';
            if (rtl) sel.style.direction = 'rtl';
            if (!BROWSER.SAFARI) sel.style.borderRadius = st.br + 'px';
            sel.style.padding = st.pt + 'px ' + st.pr + 'px ' + st.pb + 'px ' + st.pl + 'px';
            if (sk.input_font_size) {
                sel.style.fontSize = sk.input_font_size + 'px';
                sel.style.lineHeight = sk.input_font_size + 'px'
            }
            sel.onclick = on_event_;
            sel.onchange = on_event_;
            sel.onkeyup = on_event_;
            var opt = $$('option');
            var nf = hdl.Trans('LIB_NOFILTER');
            opt.id = id + '#-1';
            opt.value = nf;
            opt.innerHTML = nf;
            sel.appendChild(opt);
            var ord = [];
            for (var n in cat) {
                ord.push({
                    id: n,
                    name: cat[n].name.toLowerCase()
                })
            }
            var len = ord.length;
            if (len) {
                ord.sort(function(a, b) {
                    if (a.name > b.name) return 1;
                    if (a.name < b.name) return -1;
                    return 0
                });
                for (var i = 0; i < len; i++) {
                    var ci = ord[i].id;
                    var c = cat[ci];
                    opt = $$('option');
                    opt.id = id + '#' + ci;
                    opt.value = c.name;
                    opt.innerHTML = WCT.CleanupHTMLString(c.name);
                    sel.appendChild(opt)
                }
            }
            d.appendChild(sel)
        }
    }
})());
HANDLER.library.ModuleSearch = function(hdl_id, skin, frame_id) {
    this.mod_type_ = 'SRCH';
    HANDLER.library.Module.apply(this, arguments);
    this.nav_items_ = [];
    this.search_ = null;
    this.old_ = null;
    this.sf_ = null;
    this.dd_ = null;
    this.list_id_ = null;
    this.nav_skin_ = this.skin_.navigation;
    this.skin_ = this.skin_.search
};
HANDLER.library.ModuleSearch.prototype = new HANDLER.library.Module;
HANDLER.library.ModuleSearch.STYLE = {
    margin_left: 3,
    margin_right: 3,
    margin_top: 3,
    margin_bottom: 3,
    border_width: 1,
    border_radius: 0
};
HANDLER.library.ModuleSearch.GetStyle = function(skin) {
    var k = WCT.DeepCopy(skin);
    var s = this.STYLE;
    var m = {
        l: 'left',
        r: 'right',
        t: 'top',
        b: 'bottom'
    };
    for (var i in m) {
        if (k['outer_spacing_' + i] != null) {
            k['margin_' + m[i]] = k['outer_spacing_' + i];
            delete k['outer_spacing_' + i]
        } else {
            k['margin_' + m[i]] = s['margin_' + m[i]]
        }
    }
    if (typeof k.border_width == 'undefined') k.border_width = s.border_width;
    if (typeof k.border_radius == 'undefined') k.border_radius = s.border_radius;
    return k
};
WCT.ExtendObject(HANDLER.library.ModuleSearch.prototype, (function() {
    function clean_search_() {
        if (this.search_) {
            HANDLER.library.Search.Stop(this.search_);
            this.search_ = null
        }
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        if (hdl) {
            hdl.ListMode();
            var ms = hdl.GetModule(this.list_id_);
            if (ms) ms.Clean()
        }
    };

    function on_search_(data) {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        if (!hdl) return;
        var set = hdl.GetSearchInfo();
        if (!set.slides && data.tclass == 'slide') return;
        var sl = hdl.GetModule(this.list_id_);
        if (sl) sl.Add(data)
    };

    function on_nav_(mode) {
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        if (hdl) hdl.ListMode(mode)
    };

    function create_nav_() {
        if (!this.nav_skin_) return;
        if (this.dd_) this.dd_.Destructor();
        var hid = this.hdl_id_;
        var hdl = MANAGER.handler.Get(hid);
        var dom = $(this.hdl_id_ + '#' + this.uid_);
        var ni = this.nav_items_;
        var dd = new DropDown({
            hdl_id: hid,
            id: hid + '#' + this.uid_,
            skin: this.nav_skin_,
            rtl: hdl.GetContentInfo().rtl
        });
        dd.SetCallback(on_nav_, this);
        dd.SetOptions(ni);
        dd.SetDefault(ni[0]);
        dd.Create(dom);
        this.dd_ = dd
    };
    return {
        Destructor: function() {
            if (this.search_) {
                HANDLER.library.Search.Stop(this.search_);
                this.search_ = null
            }
            if (this.sf_) {
                this.sf_.Destructor();
                this.sf_ = null
            }
            if (this.dd_) {
                this.dd_.Destructor();
                this.dd_ = null
            }
            this.nav_items_ = null;
            HANDLER.library.Module.prototype.Destructor.call(this)
        },
        SetPosition: function(x, y, w, h) {
            var p = HANDLER.library.Module.prototype.SetPosition.apply(this, arguments);
            if (p && p.v) {
                var sf = this.sf_;
                var dd = this.dd_;
                var w = p.w - this.CalcReservedWidth();
                var h = p.h - this.CalcReservedHeight();
                if (sf && dd) {
                    var ns = this.nav_skin_;
                    var nx = ns.outer_spacing_l || 0;
                    var ny = (h - ns.h) >> 1;
                    var nw = (ns.w || 0) + nx + (ns.outer_spacing_r || 0);
                    sf.SetWH(Math.max(0, w - nw), h);
                    sf.SetXY(nw, 0);
                    dd.SetXY(nx, ny)
                } else if (sf) {
                    sf.SetWH(w, h)
                }
                return p
            }
            return null
        },
        Create: function(dom) {
            var d = HANDLER.library.Module.prototype.Create.apply(this, arguments);
            var s = HANDLER.library.ModuleSearch.GetStyle(this.skin_);
            create_nav_.call(this);
            var hid = this.hdl_id_;
            var hdl = MANAGER.handler.Get(hid);
            var rtl = hdl.GetContentInfo().rtl;
            this.sf_ = new Searchfield({
                hdl_id: hid,
                id: this.uid_ + '#sf',
                skin: s,
                dom: d,
                onsearch: this.Search,
                scope: this,
                rtl: rtl
            })
        },
        SetOutputList: function(id) {
            this.list_id_ = id
        },
        SetNavigationOptions: function(o) {
            this.nav_items_ = o;
            create_nav_.call(this)
        },
        SetNavigationState: function(s) {
            if (this.dd_) this.dd_.Select(s)
        },
        ResetSearchFieldValue: function() {
            if (this.sf_ && this.old_) this.sf_.SetValue(this.old_)
        },
        Blur: function() {
            if (this.sf_) this.sf_.Blur()
        },
        Clean: function() {
            if (this.search_) {
                HANDLER.library.Search.Stop(this.search_);
                this.search_ = null
            }
            if (this.sf_) this.sf_.SetValue('')
        },
        Search: function(search, force) {
            if (this.old_ == search && !force) return;
            this.old_ = search;
            clean_search_.call(this);
            var hdl = MANAGER.handler.Get(this.hdl_id_);
            if (!hdl) return;
            if (this.dd_) this.dd_.Select('content');
            if (this.sf_) this.sf_.SetValue(search);
            var inf = hdl.GetContentInfo();
            if (!inf || !search) {
                hdl.ListMode()
            } else {
                var set = hdl.GetSearchInfo();
                hdl.ListMode(HANDLER.library.LIST_MODES.search, search);
                this.search_ = HANDLER.library.Search.Start(search, inf.tclass, inf.uid, set, on_search_, this)
            }
        }
    }
})());
HANDLER.library.ModuleTree = function(hdl_id, skin, frame_id) {
    this.mod_type_ = 'TRE';
    HANDLER.library.Module.apply(this, arguments);
    this.tree_ = null;
    this.tree_dim_ = null;
    this.filter_ = null;
    this.gloss_mode_ = arguments[3] || false;
    HANDLER.library.ModuleTree.STORE[this.uid_] = this
};
HANDLER.library.ModuleTree.STORE = {};
HANDLER.library.ModuleTree.prototype = new HANDLER.library.Module;
WCT.ExtendObject(HANDLER.library.ModuleTree.prototype, (function() {
    function on_tree_(ev) {
        if (ev.event != 'select' || !this.v_) return;
        if (ev.event == 'select' && ev.type == 'Ref') {
            var d = DATA.GetS(ev.tclass + '!' + ev.uid + ':entity.txt');
            if (!d) return;
            if (ev.event == 'select' && ev.path.length) {
                d = WCT.DeepCopy(d);
                d.breadcrumb_trail = ev.path
            }
            var hdl = MANAGER.handler.Get(this.hdl_id_);
            if (hdl) hdl.Select(d)
        }
    };

    function refresh_ie_() {
        var h = MANAGER.handler.Get(this.hdl_id_);
        var p = h && h.GetPanel();
        if (p) p.RefreshIE()
    };
    return {
        Destructor: function() {
            delete HANDLER.library.ModuleTree.STORE[this.uid_];
            if (this.tree_) {
                this.tree_.Destructor();
                this.tree_ = null
            }
            this.tree_dim_ = null;
            HANDLER.library.Module.prototype.Destructor.call(this)
        },
        Reselect: function() {
            return this.tree_ ? this.tree_.Reselect() : false
        },
        Expand: function(addr) {
            return this.tree_ ? this.tree_.Expand(addr) : false
        },
        Select: function(addr) {
            return this.tree_ ? this.tree_.Select(addr) : false
        },
        SelectPrev: function() {
            if (this.tree_) this.tree_.SelectPrev()
        },
        SelectNext: function() {
            if (this.tree_) this.tree_.SelectNext()
        },
        SearchSelectionBottomUp: function(tclass) {
            return this.tree_ ? this.tree_.SearchSelectionBottomUp(tclass) : null
        },
        SetPosition: function(x, y, w, h) {
            var r = HANDLER.library.Module.prototype.SetPosition.apply(this, arguments);
            var t = this.tree_;
            if (r.v) {
                if (t) {
                    var d = t.GetDom();
                    d.style.width = r.w + 'px';
                    d.style.height = r.h + 'px'
                } else {
                    this.tree_dim_ = r
                }
            }
        },
        SetFilter: function(fid) {
            this.filter_ = fid
        },
        Create: function(dom) {
            if (!arguments[1]) {
                dom = HANDLER.library.Module.prototype.Create.apply(this, arguments)
            }
            var hdl_id = this.hdl_id_;
            var hdl = MANAGER.handler.Get(hdl_id);
            var rtl = hdl.GetContentInfo().rtl;
            var fec = hdl.GetConfig('lib_full_expand_check');
            var gr = hdl.GetConfig('lib_glossary_root');
            var gm = this.gloss_mode_;
            var root = gm ? gr : hdl.content_tclass_ + '!' + hdl.content_uid_;
            var lang = gm && hdl.GetConfig('lib_glossary_rootlang') ? HANDLER.library.Glossary.GetRootLanguage(hdl) : null;
            var sk = this.skin_;
            var st = WCT.DeepCopy(sk.tree);
            if (!st.font_size && sk.font_size) st.font_size = sk.font_size;
            var tid = hdl_id + '#' + this.uid_ + '#tree';
            var cfg = {
                root: root,
                src_1_gif: DATA.context.ToAbsPath('trainer:1.gif'),
                as_list: true,
                show_nonref: false,
                expand_slides: false,
                expand_projects: false,
                expand_books: false,
                full_expand_check: fec,
                auto_select_root: gm ? true : false,
                expand_on_select: true,
                rtl: rtl,
                filter: this.filter_
            };
            var env = {
                GetS: DATA.GetS.bind(DATA),
                GetSM: DATA.GetSM.bind(DATA),
                Localize: function(k) {
                    return '[' + k + ']'
                },
                RefreshIE: refresh_ie_.bind(this)
            };
            var t = new WCT.EntityTree(tid, DATA.context, env, {
                callback_f: on_tree_,
                callback_s: this
            }, cfg, st);
            if (gr) {
                t.SetLimit(gr, {
                    self: false,
                    book: false,
                    slide: false,
                    project: false,
                    cdoc: false,
                    language: lang
                })
            }
            var td = t.Create(dom);
            if (!td) return;
            td.style.position = 'static';
            td.style.overflowX = 'hidden';
            td.style.overflowY = 'auto';
            if (this.tree_dim_) {
                td.style.width = this.tree_dim_.w + 'px';
                td.style.height = this.tree_dim_.h + 'px';
                this.tree_dim_ = null
            }
            t.Expand(root);
            this.tree_ = t
        },
        Recreate: function() {
            var t = this.tree_;
            if (!t) return;
            t.Destructor();
            this.tree_ = null;
            var d = $(this.hdl_id_ + '#' + this.uid_);
            this.Create(d, true)
        },
        GetTree: function() {
            return this.tree_
        },
        GetPath: function(addr) {
            return this.tree_ ? this.tree_.GetPath(addr) : null
        },
        GetRootNode: function() {
            return this.tree_ ? this.tree_.GetRootNode() : null
        },
        Contains: function(addr) {
            return this.tree_ ? this.tree_.Contains(addr, arguments[1]) : false
        }
    }
})());
HANDLER.library.ModuleList = function() {
    this.mod_type_ = 'LST';
    HANDLER.library.Module.apply(this, arguments);
    this.sel_ = null;
    this.idx_ = 0;
    this.data_ = []
};
HANDLER.library.ModuleList.prototype = new HANDLER.library.Module;
WCT.ExtendObject(HANDLER.library.ModuleList.prototype, (function() {
    function on_list_(evt) {
        var id = this.id.split('#');
        var hdl = MANAGER.handler.Get(id[0]);
        var mod = hdl && hdl.GetModule(id[1]);
        if (!mod) return;
        evt = WCT.event.Standardize(evt);
        var tar = evt.targetName == 'img' || evt.targetName == 'span' ? evt.target.parentNode : evt.target;
        if (!tar.id.isPrefix(this.id) || tar.id == this.id) return;
        id = Number(tar.id.split('#').top());
        if (isNaN(id)) return;
        if (evt.type == 'click') {
            select_.call(mod, id)
        } else {
            var s = mod.skin_;
            var c = null;
            var bc = null;
            if (evt.type == 'mouseover') {
                c = id == mod.sel_ && s.selected_text_color_h ? s.selected_text_color_h : s.text_color_h;
                bc = id != mod.sel_ && s.background_color_h ? s.background_color_h : null
            } else {
                c = id == mod.sel_ && s.text_color_a ? s.text_color_a : s.text_color;
                bc = id != mod.sel_ && s.background_color
            }
            if (c) tar.style.color = c;
            if (bc) tar.style.backgroundColor = bc
        }
    };

    function select_(idx) {
        if (idx == this.sel_ && !arguments[1]) return;
        var id = this.hdl_id_ + '#' + this.uid_ + '#';
        var sk = this.skin_;
        if (this.sel_ != null) {
            var old_n = $(id + this.sel_);
            if (old_n) {
                old_n.style.backgroundColor = sk.background_color || '#FFFFFF';
                old_n.style.color = sk.text_color || '#000000';
                old_n.style.fontWeight = sk.font_weight || 'normal'
            }
        }
        this.sel_ = idx;
        var new_n = $(id + idx);
        if (new_n) {
            if (sk.background_color_a) new_n.style.backgroundColor = sk.background_color_a;
            if (sk.text_color_a) new_n.style.color = sk.text_color_a;
            if (sk.font_weight_a) new_n.style.fontWeight = sk.font_weight_a
        }
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var data = this.data_[idx];
        if (hdl && data) hdl.Select(data)
    };
    return {
        Destructor: function() {
            var d = $(this.hdl_id_ + '#' + this.uid_);
            if (d) {
                d.onclick = null;
                d.onmouseover = null;
                d.onmouseout = null
            }
            this.data_ = null;
            HANDLER.library.Module.prototype.Destructor.call(this)
        },
        Create: function(dom) {
            var sk = this.skin_;
            if (!sk.item) return;
            var hdl = MANAGER.handler.Get(this.hdl_id_);
            var rtl = hdl.GetContentInfo().rtl;
            var d = HANDLER.library.Module.prototype.Create.call(this, dom);
            d.style.overflow = 'auto';
            d.style.MozUserSelect = 'none';
            d.style.WebkitUserSelect = 'none';
            if (sk.font_size) d.style.lineHeight = sk.font_size + 4 + 'px';
            if (rtl) d.style.direction = 'rtl';
            d.onclick = on_list_;
            d.onmouseover = on_list_;
            d.onmouseout = on_list_
        },
        Select: function(addr) {
            var s = addr.split('!');
            for (var i = 0, c = null, d = this.data_; c = d[i]; i++) {
                if (c.tclass == s[0] && c.uid == s[1]) {
                    select_.call(this, i);
                    break
                }
            }
        },
        SelectPrev: function() {
            if (this.sel_ > 0) select_.call(this, this.sel_ - 1)
        },
        SelectNext: function() {
            if (this.data_ && this.sel_ < this.data_.length - 1) select_.call(this, this.sel_ + 1)
        },
        Reselect: function() {
            if (this.sel_ != null) select_.call(this, this.sel_, true)
        },
        Clean: function() {
            var d = $(this.hdl_id_ + '#' + this.uid_);
            if (d) d.innerHTML = '';
            this.idx_ = 0;
            this.sel_ = null;
            this.data_ = []
        },
        Add: function(data) {
            var id = this.hdl_id_ + '#' + this.uid_;
            var d = $(id);
            if (!d) return;
            this.data_[this.idx_] = data;
            var sk = this.skin_.item;
            id += '#';
            var hdl = MANAGER.handler.Get(this.hdl_id_);
            var rtl = hdl ? hdl.GetContentInfo().rtl : false;
            var e = $$('div');
            e.id = id + this.idx_++;
            WCT.skin.ApplyTextFormats(e, sk);
            WCT.skin.ApplyPadding(e, sk);
            WCT.skin.ApplyBorder(e, sk);
            e.style.overflow = 'hidden';
            e.style.textOverflow = 'ellipsis';
            e.style.whiteSpace = 'nowrap';
            e.style.cursor = 'pointer';
            e.onclick = function() {};
            var img = WCT.Tree.GetIconImage(data, null, null, hdl.GetContext());
            var ico = $$('img');
            ico.src = DATA.context.ToAbsPath('trainer:1.gif');
            if (img) {
                WCT.skin.ApplyBgImage(ico, img);
                ico.style.width = img.w + 'px';
                ico.style.height = img.h + 'px'
            }
            ico.style.verticalAlign = 'middle';
            ico.style[rtl ? 'marginLeft' : 'marginRight'] = '4px';
            e.appendChild(ico);
            var txt = $$('span');
            txt.appendChild($$2(data.caption));
            txt.title = data.caption;
            e.appendChild(txt);
            d.appendChild(e);
            if (this.idx_ == 1) select_.call(this, 0)
        }
    }
})());
HANDLER.library.ModuleSlide = function() {
    this.mod_type_ = 'SLD';
    HANDLER.library.Module.apply(this, arguments);
    this.ridx_ = 0;
    this.conf_ = {};
    this.data_ = null;
    this.raw_ = false;
    this.w_ = null;
    this.h_ = null
};
HANDLER.library.ModuleSlide.prototype = new HANDLER.library.Module;
HANDLER.library.ModuleSlide.INFO = {
    breadcrumb: {
        c: 'SlideBreadcrumbTrail',
        s: 'breadcrumb_trail'
    },
    buttons: {
        c: 'SlideButtons',
        s: 'buttons'
    },
    description: {
        c: 'SlideDescription',
        s: 'description'
    },
    assets: {
        c: 'SlideAssets',
        s: 'assets'
    },
    caption: {
        c: 'SlideCaption',
        s: 'caption'
    }
};
WCT.ExtendObject(HANDLER.library.ModuleSlide.prototype, (function() {
    function cleanup_raw_() {
        var r = this.raw_;
        if (r) {
            for (var id in r) {
                r[id].Destructor()
            }
            this.raw_ = null
        }
    };

    function set_raw_(data) {
        this.data_ = data;
        if (!data) {
            cleanup_raw_.call(this);
            return
        }
        var hdl_id = this.hdl_id_;
        var ridx = this.ridx_;
        var hdl = MANAGER.handler.Get(hdl_id);
        var shdl = hdl && hdl.GetSlideHandler(ridx) || null;
        if (!shdl) {
            cleanup_raw_.call(this);
            return
        }
        var conf = this.conf_;
        var skin = this.skin_;
        var uid = this.uid_;
        var ci = hdl.GetContentInfo();
        var inf = HANDLER.library.ModuleSlide.INFO;
        var raw = this.raw_;
        if (raw) {
            shdl.SetContext(data.tclass, data.uid);
            shdl.SetSearchTerm(ci.lib_search_term);
            for (var id in inf) {
                if (!raw[id]) continue;
                var gloss = id == 'description' && conf.glossary;
                if (conf[id] || gloss) {
                    raw[id].SetVisibility(true);
                    raw[id].Update(data)
                } else {
                    raw[id].SetVisibility(false)
                }
            }
        } else {
            raw = {};
            this.raw_ = raw;
            var clr = skin.frames && skin.frames.background_color || '#FFFFFF';
            var ctls = {
                page: {
                    id: 'page',
                    type: 'page',
                    prevent_mobile_scale: 1,
                    prevent_clamping: 1,
                    canvas_color: clr,
                    background_color: clr,
                    background_image_centered: 0,
                    image: {
                        id: '',
                        w: 0,
                        h: 0
                    },
                    fontsizeInPt: 0,
                    version: '8.3.0',
                    hide_scrollbars: 1,
                    ignore_fallbacks: true,
                    w: 600,
                    h: 600
                }
            };
            var hide = [];
            for (var id in inf) {
                var gloss = id == 'description' && conf.glossary;
                var i = inf[id];
                var c = new HANDLER.library[i.c](hdl_id, uid, ridx, skin[i.s]);
                var d = c.Create(data, gloss || undefined);
                if (d) {
                    WCT.ExtendObject(ctls, d);
                    raw[id] = c
                } else {
                    c.Destructor()
                }
                if (!conf[id] && !gloss) hide.push(id)
            }
            shdl.SetSearchTerm(ci.lib_search_term);
            shdl.HideMouse();
            shdl.SetLanguage(ci.language);
            shdl.SetContext(data.tclass, data.uid);
            shdl.Play({
                controls: ctls
            });
            for (var i = 0, id = null; id = hide[i++];) {
                raw[id].SetVisibility(false)
            }
        }
        MANAGER.HandleFocus()
    };

    function set_std_(data) {
        this.data_ = data;
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var shdl = hdl && hdl.GetSlideHandler(this.ridx_) || null;
        if (!shdl) return;
        if (!data) {
            shdl.Clear();
            return
        }
        if (data.tclass != 'slide') return;
        var chap = null;
        for (var bt = data.breadcrumb_trail || [], i = bt.length - 1; i >= 0; i--) {
            var c = bt[i];
            if (c.tclass == 'group' || c.tclass == 'project') {
                chap = c;
                break
            }
        }
        var st = hdl.GetContentInfo().lib_search_term || '';
        var info = {
            lib_search_term: st
        };
        if (chap) {
            chap = DATA.GetS(chap.tclass + '!' + chap.uid + ':entity.txt');
            info.chapter = chap
        }
        shdl.SetLanguage(data.language);
        HANDLER.slide.ShowSlide(data.uid, shdl, info);
        MANAGER.HandleFocus();
        this.raw_ = false
    };

    function resize_controls_(w, h) {
        var ctls = this.raw_;
        if (!ctls) return;
        var hdl = MANAGER.handler.Get(this.hdl_id_);
        var shl = hdl && hdl.GetSlideHandler(this.ridx_) || null;
        if (!shl) return;
        var page = shl.GetControl('page');
        if (!page) return;
        var pobj = null;
        if (page.w != w && page.h != h) {
            pobj = {
                w: w,
                h: h
            }
        } else if (page.w != w) {
            pobj = {
                w: w
            }
        } else if (page.h != h) {
            pobj = {
                h: h
            }
        }
        if (pobj) shl.UpdateControl('page', pobj);
        var box = {
            x: 0,
            y: 0,
            w: w,
            h: h
        };
        var order = ['breadcrumb', 'caption', 'assets', 'buttons', 'description'];
        for (var i = 0, id = null; id = order[i++];) {
            var c = ctls[id];
            if (!c || !c.IsVisible()) continue;
            switch (id) {
                case 'assets':
                    var fh = c.GetFixedHeight();
                    box.h -= c.SetPosition(box.x, h - fh, box.w, Math.min(fh, box.h));
                    break;
                case 'breadcrumb':
                case 'buttons':
                case 'caption':
                case 'description':
                    var fh = c.GetFixedHeight();
                    fh = c.SetPosition(box.x, box.y, box.w, Math.min(fh || box.h, box.h));
                    box.y += fh;
                    box.h -= fh;
                    break
            }
        }
    };
    return {
        Destructor: function() {
            cleanup_raw_.call(this);
            this.data_ = null;
            HANDLER.library.Module.prototype.Destructor.call(this)
        },
        GetDom: function() {
            var h = MANAGER.handler.Get(this.hdl_id_);
            return h && h.GetSlideRendererIFrame(this.ridx_) || null
        },
        GetFixedHeight: function() {
            var r = this.raw_;
            if (r) {
                var ah = true;
                var fh = 0;
                for (var id in r) {
                    if (!r[id].IsVisible()) continue;
                    var h = r[id].GetFixedHeight();
                    if (!h) {
                        ah = false;
                        break
                    }
                    fh += h
                }
                if (ah && fh) return fh
            }
            return HANDLER.library.Module.prototype.GetFixedHeight.call(this)
        },
        Configure: function(conf) {
            var c = this.conf_;
            for (var i in conf) {
                c[i] = conf[i]
            }
        },
        Create: function(dom) {},
        SetVisible: function(v) {
            if (this.v_ == v) return;
            this.v_ = v;
            var d = this.GetDom();
            if (d) {
                d.style.visibility = v ? 'visible' : 'hidden';
                d.style.zIndex = v ? 1 : (BROWSER.IE7 || PLATFORM.IOS && PLATFORM.VERSION >= 7 || PLATFORM.ANDROID) ? -1 : 0;
                if (PLATFORM.IOS) d.style.opacity = v ? 1 : 0
            }
            var r = this.raw_;
            if (r) {
                if (v) {
                    this.ReAlignControls()
                }
            } else {
                if (v) {
                    this.SetContent(this.data_)
                } else {
                    var hdl = MANAGER.handler.Get(this.hdl_id_);
                    var shdl = hdl && hdl.GetSlideHandler(this.ridx_) || null;
                    if (shdl) shdl.Clear()
                }
            }
        },
        SetPosition: function(x, y, w, h) {
            var d = this.GetDom();
            if (!d) return null;
            d.style.zIndex = 0;
            if (PLATFORM.IOS) d.style.opacity = 0;
            var r = HANDLER.library.Module.prototype.SetPosition.apply(this, arguments);
            if (!r.v) return null;
            var hdl = MANAGER.handler.Get(this.hdl_id_);
            var lmr = hdl && hdl.GetLayoutManager() || null;
            if (lmr) {
                var p = lmr.GetFramePos(this.frame_id_);
                if (p) {
                    d.style.left = p.x + x + 'px';
                    d.style.top = p.y + y + 'px'
                }
            }
            var wnd = d.contentWindow;
            if (wnd && wnd.hdl_onresize) wnd.hdl_onresize(null, r.w, r.h);
            this.w_ = r.w;
            this.h_ = r.h;
            resize_controls_.call(this, r.w, r.h);
            d.style.zIndex = 1;
            if (PLATFORM.IOS) d.style.opacity = 1;
            return r
        },
        ReAlignControls: function() {
            if (this.w_ && this.h_) resize_controls_.call(this, this.w_, this.h_)
        },
        SetRenderer: function(idx) {
            this.ridx_ = idx
        },
        SetContent: function(data) {
            if (this.raw_ === false) {
                set_std_.call(this, data)
            } else {
                set_raw_.call(this, data)
            }
        },
        SetRawMode: function(e) {
            this.raw_ = e ? null : false
        },
        ExtendRawDescription: function(data) {
            var r = this.raw_;
            var d = r && r.description || null;
            if (d) d.Extend(data)
        },
        OnSlidePropChange: function(ctl_id, name, value) {
            var r = this.raw_;
            for (var i in r) {
                r[i].OnSlidePropChange(ctl_id, name, value)
            }
        }
    }
})());
HANDLER.library.ModuleContextRoles = function(hdl_id, skin, frame_id, cb_on) {
    this.mod_type_ = 'CTXRLS';
    this.cb_on_ = cb_on ? 1 : 0;
    HANDLER.library.Module.apply(this, arguments)
};
HANDLER.library.ModuleContextRoles.prototype = new HANDLER.library.Module;
WCT.ExtendObject(HANDLER.library.ModuleContextRoles.prototype, (function() {
    function on_event_(ev) {
        var ids = this.id.split('#');
        var hdl = MANAGER.handler.Get(ids[0]);
        var me = hdl && hdl.GetModule(ids[1]);
        if (!me) return;
        var nn = this.nodeName.toLowerCase();
        if (nn == 'input') {
            if (me.cb_on_ != this.checked) {
                me.cb_on_ = this.checked;
                hdl.ExecCommand('context_roles', this.checked ? true : false)
            }
        } else {
            if (!me.cb_on_) {
                me.cb_on_ = 1;
                var cb = $(ids[0] + '#' + ids[1] + '#cb');
                if (cb) cb.checked = 1;
                hdl.ExecCommand('context_roles', true)
            }
            hdl.ExecCommand('settings')
        }
    };
    return {
        Destructor: function() {
            var id = this.hdl_id_ + '#' + this.uid_;
            var cb = $(id + '#cb');
            if (cb) {
                cb.onclick = null;
                cb.onkeyup = null
            }
            var ln = $(id + '#ln');
            if (ln) {
                ln.onclick = null
            }
            HANDLER.library.Module.prototype.Destructor.call(this)
        },
        Create: function(dom) {
            var d = HANDLER.library.Module.prototype.Create.apply(this, arguments);
            WCT.dom.NotSelectable(d);
            var hdl_id = this.hdl_id_;
            var hdl = MANAGER.handler.Get(hdl_id);
            var rtl = hdl.GetContentInfo().rtl;
            var skn = this.skin_;
            var el = $$('div');
            if (rtl) el.style.direction = 'rtl';
            el.style.lineHeight = (skn.h || 0) + 'px';
            el.style.marginLeft = (skn.padding_left || 0) + 'px';
            el.style.marginRight = (skn.padding_right || 0) + 'px';
            d.appendChild(el);
            var id = hdl_id + '#' + this.uid_;
            var cb = WCT.dom.CreateInputElement('checkbox', id + '#cb');
            cb.id = id + '#cb';
            cb.style.verticalAlign = 'middle';
            cb.style[rtl ? 'marginLeft' : 'marginRight'] = '3px';
            cb.checked = this.cb_on_;
            el.appendChild(cb);
            var ln = $$('span');
            ln.id = id + '#ln';
            ln.style.cursor = 'pointer';
            ln.appendChild($$2(hdl.Trans('CONTEXT_MY_ROLES')));
            el.appendChild(ln);
            cb.onclick = on_event_;
            cb.onkeyup = on_event_;
            ln.onclick = on_event_
        }
    }
})());
HANDLER.slide.Ctx = function(uid, shl_id) {
    this.uid_ = uid;
    this.shl_id_ = shl_id;
    this.store_ = {};
    this.state_ = {
        t_total: 0,
        t_system: 0,
        audio: 0,
        video: 0
    };
    this.audio_ = {};
    this.video_ = {};
    this.triggers_ = {}
};
WCT.ExtendObject(HANDLER.slide.Ctx, {
    SLIDE_COMMAND: {
        next: 'book_next',
        previous: 'book_prev',
        first: 'book_first',
        last: 'book_last',
        content: 'book_index'
    },
    CHAPTER_COMMAND: {
        previous: 'book_prevchapter',
        next: 'book_nextchapter'
    },
    EXECUTABLE: {
        project: HANDLER.MODE.lesson,
        book: HANDLER.MODE.book,
        slide: HANDLER.MODE.slide,
        group: HANDLER.MODE.library,
        cdoc: HANDLER.MODE.library
    }
});
HANDLER.slide.Ctx.prototype = (function() {
    function get_nav_url_() {
        if (TRACKING.backend.collaborator.Available()) {
            var sf = DATA.GetS('mgr:server/supported_features', 'JSON');
            sf = sf && sf.response && sf.response.feature || [];
            if (sf.indexOf('navigator') >= 0) return '.inav'
        }
        return 'project.dnt'
    };
    return {
        Destructor: function() {
            WCT.CleanupObject(this.store_);
            this.store_ = null;
            WCT.CleanupObject(this.state_);
            this.state_ = null;
            WCT.CleanupObject(this.audio_);
            this.audio_ = null;
            WCT.CleanupObject(this.video_);
            this.video_ = null;
            var t = this.triggers_;
            for (var i in t) {
                this.CleanupTriggers(i)
            }
            this.triggers_ = null
        },
        CleanupStore: function() {
            WCT.CleanupObject(this.store_);
            this.store_ = {}
        },
        RegisterTrigger: function(uid, trigger, callback, scope) {
            var t = this.triggers_;
            if (!t[uid]) t[uid] = {};
            t[uid][trigger] = {
                f: callback,
                s: scope
            }
        },
        CleanupTrigger: function(uid, trigger) {
            var t = this.triggers_[uid];
            if (!t) return;
            if (t[trigger]) {
                t[trigger].f = null;
                t[trigger].s = null;
                delete t[trigger]
            }
        },
        CleanupTriggers: function(uid) {
            var t = this.triggers_[uid];
            if (!t) return;
            for (var i in t) {
                t[i].f = null;
                t[i].s = null
            }
            delete this.triggers_[uid]
        },
        cfg_show: function(addr, new_win, win_props) {
            var hdl = MANAGER.handler.Get(this.uid_);
            if (!hdl) return;
            var my = HANDLER.slide.Ctx;
            var context = hdl.GetContext();
            var eaddr = context.Expand(addr);
            var info = {
                tclass: eaddr.class_id,
                uid: eaddr.local_id,
                external: eaddr.is_external ? addr : null
            };
            var fm = 'filename';
            if (eaddr.class_id === 'book' && eaddr.sub_local_id) {
                info.bookmark = eaddr.sub_local_id
            } else if (eaddr.class_id === 'project' && DATA.LESSON_MODE[eaddr.sub_path]) {
                fm = 'mode';
                info.tourstop = eaddr.sub_local_id
            } else if (eaddr.class_id === 'project' && eaddr.sub_path == 'dnt') {
                eaddr.sub_path = get_nav_url_();
                info.tourstop = eaddr.sub_local_id
            } else if (eaddr.class_id === 'action') {
                fm = 'param'
            } else if (eaddr.class_id === 'search') {
                var search = eaddr.local_id;
                var ht = hdl.GetType();
                switch (ht) {
                    case 'library':
                        var lm = hdl.GetLayoutManager();
                        var s = lm.GetModuleType('SRCH');
                        if (s) s.Search(search, true);
                        break;
                    default:
                        info.lib_searchstring = search;
                        new_win = true;
                        break
                }
            }
            info[fm] = eaddr.sub_path;
            if (!info.external && BROWSER.MOBILE) {
                new_win = false;
                win_props = null
            }
            var wp = null;
            if (new_win) {
                win_props = win_props && win_props != 'null' ? win_props.split(',') : [];
                wp = {
                    window_cfg_force: 1
                };
                var slist = {
                    top: 1,
                    left: 1,
                    width: 1,
                    height: 1,
                    orientation: 1,
                    name: 1,
                    force: 1
                };
                for (var i = win_props.length - 1; i >= 0; i--) {
                    var cur = win_props[i].split('=');
                    var pre = slist[cur[0]] ? 'window_cfg_' : 'window_cfg_features_';
                    var key = pre + cur[0];
                    var val = DEFAULTS.Clamp(key, cur[1].trim());
                    if (typeof val != 'undefined') wp[key] = val
                }
                if (wp.window_cfg_features_fullscreen) {
                    delete wp.window_cfg_left;
                    delete wp.window_cfg_top;
                    delete wp.window_cfg_width;
                    delete wp.window_cfg_height
                }
                if (wp.window_cfg_orientation == null && (wp.window_cfg_left != null || wp.window_cfg_top != null)) {
                    wp.window_cfg_orientation = 'NW'
                }
            } else if (new_win === false) {}
            if (info.external) {
                if (BROWSER.MOBILE) {
                    hdl.StartExecutable(info, wp)
                } else {
                    WCT.SetTimeout(hdl.StartExecutable, 1, hdl, [info, wp])
                }
                return
            }
            if (info.tclass == 'slide' && my.SLIDE_COMMAND[info.uid]) {
                info = {
                    tclass: 'action',
                    uid: my.SLIDE_COMMAND[info.uid]
                }
            } else if (info.tclass == 'chapter' && my.CHAPTER_COMMAND[info.uid]) {
                info = {
                    tclass: 'action',
                    uid: my.CHAPTER_COMMAND[info.uid]
                }
            }
            if (info.filename) {
                WCT.SetTimeout(hdl.StartFile, 1, hdl, [info, wp])
            } else if (my.EXECUTABLE[info.tclass] || info.lib_searchstring) {
                info.type = info.lib_searchstring || info.tclass == 'project' && !info.mode ? HANDLER.MODE.library : my.EXECUTABLE[info.tclass];
                WCT.SetTimeout(hdl.StartExecutable, 1, hdl, [info, wp])
            } else {
                switch (info.tclass) {
                    case 'action':
                        WCT.SetTimeout(hdl.ExecAction, 1, hdl, [info.uid, info.param, arguments[3] || window.event]);
                        break;
                    case 'trigger':
                        var shdl = hdl.GetSlideHandler(this.shl_id_);
                        if (shdl) WCT.SetTimeout(shdl.ExecEvent, 1, shdl, [info.uid]);
                        break;
                    case 'tourstop':
                        var idx = Number(info.uid);
                        WCT.SetTimeout(hdl.ExecCommand, 1, hdl, ['jump', isNaN(idx) ? info.uid : idx]);
                        break
                }
            }
        },
        track: function(info) {
            var hdl = MANAGER.handler.Get(this.uid_);
            if (hdl) hdl.Track(info)
        },
        track_completion: function() {
            var hdl = MANAGER.handler.Get(this.uid_);
            if (hdl) hdl.TrackCompletion()
        },
        cfg_tr: function(key) {
            var hdl = MANAGER.handler.Get(this.uid_);
            return hdl ? hdl.Trans(key) : key
        },
        getToc: function() {
            var hdl = MANAGER.handler.Get(this.uid_);
            return hdl && hdl.GetTocObject && hdl.GetTocObject() || null
        },
        gotoNextSlide: function() {
            this.cfg_show('slide!next')
        },
        gotoPrevSlide: function() {
            this.cfg_show('slide!previous')
        },
        gotoSlide: function(uid) {
            this.cfg_show('slide!' + uid)
        },
        gotoNextTask: function() {
            this.cfg_show('action!next_task')
        },
        gotoPrevTask: function() {
            this.cfg_show('action!prev_task')
        },
        gotoTask: function(uid) {
            this.cfg_show('action!jump_task:' + uid)
        },
        gotoTourstop: function(uid) {
            this.cfg_show('action!jump:' + uid)
        },
        lessonAction: function(act) {
            switch (act) {
                case 'lesson_end':
                    act = 'action!stop';
                    break;
                case 'lesson_restart':
                case 'lesson_exit':
                case 'lesson_startstop_print':
                case 'lesson_startstop_details':
                    act = 'action!' + act.replace(/lesson_/, '');
                    break;
                default:
                    act = 'action!' + act;
                    break
            }
            this.cfg_show(act)
        },
        onMute: function(channel) {
            var hdl = MANAGER.handler.Get(this.uid_);
            var par = {
                channel: channel,
                muted: true
            };
            if (hdl) WCT.SetTimeout(hdl.ExecCommand, 1, hdl, ['audio_c_mute', par])
        },
        onUnmute: function(channel) {
            var hdl = MANAGER.handler.Get(this.uid_);
            var par = {
                channel: channel,
                muted: false
            };
            if (hdl) WCT.SetTimeout(hdl.ExecCommand, 1, hdl, ['audio_c_mute', par])
        },
        onVolume: function(channel, vol) {
            var hdl = MANAGER.handler.Get(this.uid_);
            var par = {
                channel: channel,
                volume: vol
            };
            if (hdl) WCT.SetTimeout(hdl.ExecCommand, 1, hdl, ['audio_volume', par])
        },
        onAudioPlay: function(channel, play) {
            var a = this.audio_;
            if (play) {
                a[channel] = true
            } else {
                delete a[channel]
            }
            var c = 0;
            for (var id in a) c++;
            var s = this.state_;
            s.audio = c;
            var hdl = MANAGER.handler.Get(this.uid_);
            if (hdl && hdl.OnSlideState) {
                WCT.SetTimeout(hdl.OnSlideState, 1, hdl, ['audio', s.t_total, s.t_system, c, s.video])
            }
        },
        onVideoPlay: function(ctl_id, play) {
            var v = this.video_;
            if (play) {
                v[ctl_id] = true
            } else {
                delete v[ctl_id]
            }
            var c = 0;
            for (var id in v) c++;
            var s = this.state_;
            s.video = c;
            var hdl = MANAGER.handler.Get(this.uid_);
            if (hdl && hdl.OnSlideState) {
                WCT.SetTimeout(hdl.OnSlideState, 1, hdl, ['video', s.t_total, s.t_system, s.audio, c])
            }
        },
        onTicker: function(evt, total, system) {
            var s = this.state_;
            if (s) {
                s.t_total = total;
                s.t_system = system
            }
            var hdl = MANAGER.handler.Get(this.uid_);
            if (hdl && hdl.OnSlideState) {
                WCT.SetTimeout(hdl.OnSlideState, 1, hdl, ['ticker_' + evt, total, system, s.audio, s.video])
            }
        },
        onTrainerTrigger: function(trigger) {
            var t = this.triggers_;
            for (var uid in t) {
                for (var tid in t[uid]) {
                    if (tid == trigger) {
                        var c = t[uid][tid];
                        c.f.call(c.s, tid);
                        return
                    }
                }
            }
        },
        setStore: function(type, value) {
            this.store_[type] = value
        },
        getStore: function(type) {
            return this.store_[type]
        },
        remStore: function(type) {
            delete this.store_[type]
        },
        getQuizTrackingHtml: function(req_percent, eval_type, feedback) {
            var hdl = MANAGER.handler.Get(this.uid_);
            var skin = hdl && hdl.skin_ && hdl.skin_.start_stop_page && hdl.skin_.start_stop_page.test_details;
            return skin ? HANDLER.lesson.DetailStop.Quiz(hdl, skin, req_percent, eval_type, feedback) : ''
        },
        getQuizScore: function() {
            var hdl = MANAGER.handler.Get(this.uid_);
            return hdl && hdl.GetQuizScore ? hdl.GetQuizScore() : null
        },
        setConfig: function(cfg, val) {
            var hdl = MANAGER.handler.Get(this.uid_);
            if (hdl) hdl.SetConfig(cfg, val)
        },
        scrollToPOI: function(poi, focus_type, anim_time, orig) {
            var hdl = MANAGER.handler.Get(this.uid_);
            if (hdl) hdl.ScrollToPOI(poi, focus_type, anim_time, orig)
        },
        showPanel: function(show) {
            var hdl = MANAGER.handler.Get(this.uid_);
            if (hdl) hdl.ShowPanel(show)
        },
        showDemoHelp: function(ts_uid) {
            var hdl = MANAGER.handler.Get(this.uid_);
            if (hdl && hdl.ShowDemoHelp) {
                WCT.SetTimeout(hdl.ShowDemoHelp, 1, hdl, arguments)
            }
        },
        globalQuizTimeout: function() {
            var hdl = MANAGER.handler.Get(this.uid_);
            if (hdl && hdl.GlobalQuizTimeout) hdl.GlobalQuizTimeout()
        },
        OnVideoAudio: function(mode, src) {
            var hdl = MANAGER.handler.Get(this.uid_);
            if (hdl && hdl.OnVideoAudio) hdl.OnVideoAudio(mode, src)
        },
        registerEventListener: function(evt) {
            evt.slide_id = this.shl_id_;
            evt.handler_id = this.uid_;
            MANAGER.event.RegisterListener(evt)
        },
        unregisterEventListener: function(evt) {
            evt.slide_id = this.shl_id_;
            evt.handler_id = this.uid_;
            MANAGER.event.UnregisterListener(evt)
        }
    }
})();
HANDLER.slide.Sink = function(uid) {
    this.uid_ = uid
};
HANDLER.slide.Sink.prototype = {
    LoadFile: function(addr) {
        return DATA.GetS(addr, 'string') || null
    },
    OnHotkey: function(evt) {
        WCT.event.hotkey.Fired(evt)
    },
    ObserveHotkey: function(key, type, callback, scope) {
        return WCT.event.hotkey.Observe(key, type, callback, scope)
    },
    StopObservingHotkey: function(key, id) {
        WCT.event.hotkey.StopObserving(key, id)
    },
    CancelHotkey: function(evt) {
        WCT.event.hotkey.CancelBrowserHotkey(evt)
    },
    GetConfig: function(key) {
        var hdl = MANAGER.handler.Get(this.uid_);
        return hdl ? hdl.GetConfig(key) : null
    },
    onPropChange: function(ctl_id, name, value) {
        var hdl = MANAGER.handler.Get(this.uid_);
        if (hdl && hdl.OnSlidePropChange) {
            WCT.SetTimeout(hdl.OnSlidePropChange, 1, hdl, [ctl_id, name, value])
        }
    },
    Print: function(elem) {
        var hdl = MANAGER.handler.Get(this.uid_);
        if (hdl) Print.Open(hdl, elem, arguments[1] || false)
    },
    VideoMode: function() {
        return PRODUCER && PRODUCER.VideoExport && PRODUCER.VideoExport.Enabled()
    },
    PreventNavigation: function(v) {
        var hdl = MANAGER.handler.Get(this.uid_);
        hdl && hdl.PreventNavigation && hdl.PreventNavigation(v)
    },
    ControlAdded: function() {},
    ControlDeleted: function() {}
};
HANDLER.slide.Handler = function(uid, slide) {
    this.uid_ = uid;
    this.slide_ = slide;
    this.template_ = null;
    this.content_language_ = null;
    this.step_ = 0;
    this.steps_ = 0;
    this.search_term_ = null
};
HANDLER.slide.Handler.prototype = {
    Destructor: function() {
        this.slide_ = null
    },
    GetWindow: function() {
        return this.slide_ && this.slide_.contentWindow || null
    },
    GetApi: function(name) {
        var wnd = this.GetWindow();
        return wnd && wnd[name] || null
    },
    SetSlide: function(slide) {
        this.slide_ = slide
    },
    SetBookStep: function(step, steps) {
        this.step_ = step;
        this.steps_ = steps
    },
    HideMouse: function() {
        var mouse = this.GetApi('Mouse');
        if (mouse) mouse.Hide()
    },
    Clear: function() {
        var page = this.GetApi('Page');
        var mouse = this.GetApi('Mouse');
        if (page) page.ClearSlide();
        if (mouse) mouse.Hide()
    },
    Log: function(msg) {
        var wnd = this.GetWindow();
        if (wnd && wnd.Log) wnd.Log(msg)
    },
    Create: function(ctls) {
        var page = this.GetApi('Page');
        if (!page) return;
        var hdl = MANAGER.handler.Get(this.uid_);
        var inf = hdl && hdl.GetContentInfo() || {};
        var lang = this.content_language_ || inf.language || DATA.DEFAULT_LANGUAGE;
        page.SetVariable('html_styles', DATA.HTML_STYLES_CSS);
        page.SetVariable('content_language', lang);
        page.Create(ctls)
    },
    Play: function() {
        var page = this.GetApi('Page');
        if (!page) return;
        if (arguments[0]) this.Create(arguments[0]);
        page.Play();
        page.RTFireTrigger('page.book_progress#' + this.step_ + '#' + this.steps_)
    },
    Pause: function(pause) {
        var page = this.GetApi('Page');
        if (page) page.Pause(pause, true)
    },
    GetControlPreloadStreams: function(ctls) {
        var page = this.GetApi('Page');
        if (!page) return [];
        var ret = [];
        for (var id in ctls) {
            ret = ret.concat(page.GetControlPreloadStreams(ctls[id]))
        }
        return ret
    },
    GetTextRect: function(ctl_id) {
        var page = this.GetApi('Page');
        return page ? page.GetTextRect(ctl_id) : null
    },
    MediaStop: function() {
        var media = this.GetApi('Media');
        if (media) media.Stop()
    },
    MediaPlay: function(p) {
        var media = this.GetApi('Media');
        if (!media) return;
        var c = arguments[1] || null;
        var r = arguments[2] || false;
        var cmd = p ? (r ? 'Resume' : 'Play') : 'Pause';
        if (c) {
            if (media.audio) media.audio[cmd](c)
        } else {
            media[cmd](true)
        }
    },
    MediaPlaying: function(c) {
        var media = this.GetApi('Media');
        if (media && media.audio) {
            return media.audio.Playing(c)
        }
        return false
    },
    MediaVolume: function(c, v) {
        var media = this.GetApi('Media');
        if (!media || !media.audio) return;
        if (c == 'Master') {
            media.Volume(v, true)
        } else {
            media.audio.Volume(c, v, true)
        }
    },
    MediaMute: function(c, m) {
        var media = this.GetApi('Media');
        if (!media || !media.audio) return;
        if (c == 'Master') {
            media[m ? 'Mute' : 'Unmute'](true)
        } else {
            media.audio[m ? 'Mute' : 'Unmute'](c, true)
        }
    },
    MediaPlayPagesound: function() {
        var media = this.GetApi('Media');
        if (media && media.audio) {
            media.audio.StopPagesound();
            media.audio.PlayPagesound()
        }
    },
    MediaStopPagesound: function() {
        var media = this.GetApi('Media');
        if (media && media.audio) media.audio.StopPagesound()
    },
    MediaStopBooksound: function() {
        var media = this.GetApi('Media');
        if (media && media.audio) media.audio.Stop('Booksound')
    },
    SetLanguage: function(lang) {
        this.content_language_ = lang
    },
    SetContext: function(type, val) {
        var context = this.GetApi('Context');
        if (context) context.Set(type, val)
    },
    SetBookStyle: function(style) {
        var page = this.GetApi('Page');
        if (page) page.SetBookStyle(style)
    },
    SetPlaceholder: function(key, value) {
        var page = this.GetApi('Page');
        if (page) page.SetPlaceholderValue(key, value)
    },
    BroadcastEvent: function(evt) {
        var page = this.GetApi('Page');
        if (page) page.HandleEnvEvent(evt)
    },
    SetContextMap: function(map) {
        var page = this.GetApi('Page');
        if (page) page.SetContextMap(map)
    },
    SetConfig: function(key, value) {
        var page = this.GetApi('Page');
        if (page) page.SetConfig(key, value)
    },
    AddControl: function(ctl) {
        var page = this.GetApi('Page');
        if (page) page.AddControl(ctl)
    },
    RemoveControl: function(ctl_id) {
        var page = this.GetApi('Page');
        if (page) page.DeleteControl(ctl_id)
    },
    AddControls: function(ctls) {
        var page = this.GetApi('Page');
        if (!page) return;
        for (var id in ctls) {
            page.AddControl(ctls[id])
        }
    },
    RemoveAllControls: function() {
        var page = this.GetApi('Page');
        if (page) page.DeleteAllControls()
    },
    UpdateControl: function(ctl_id, prop) {
        var page = this.GetApi('Page');
        return page ? page.UpdateControl(ctl_id, prop, arguments[2]) : null
    },
    GetControl: function(ctl_id) {
        var page = this.GetApi('Page');
        return page ? page.GetControlProperties(ctl_id) : null
    },
    GetCSS: function() {
        var doc = this.GetApi('document');
        var head = doc.getElementsByTagName('head')[0];
        if (!head) return [];
        var hdl = MANAGER.handler.Get(this.uid_);
        var ctx = hdl && hdl.GetContext();
        if (!ctx) return;
        ctx.SetScope('trainer');
        var res = [];
        var add = arguments[0];
        if (add) {
            for (var i = 0, c = null; c = add[i++];) {
                res.push(ctx.ToAbsPath(c))
            }
        }
        var lnks = head.getElementsByTagName('link');
        for (var i = 0, l = lnks.length; i < l; i++) {
            var lnk = lnks[i].href;
            if (!lnk) continue;
            lnk = ctx.ToAbsPath(lnk);
            res.push(lnk)
        }
        return res
    },
    ExecEvent: function(evt) {
        var page = this.GetApi('Page');
        if (page) page.RTFireTrigger(evt)
    },
    InsertCssFile: function(url) {
        var wnd = this.slide_ && this.slide_.contentWindow || null;
        if (wnd) WCT.ExtendHeadByCSS(url, null, wnd)
    },
    VisibleTaskBubble: function(vis) {
        var page = this.GetApi('Page');
        if (page) page.SetTaskBubbleVisibility(vis)
    },
    VisibleExplanationBubble: function(vis) {
        var page = this.GetApi('Page');
        if (page) page.SetExplanationBubbleVisibility(vis)
    },
    HandleSubtitle: function() {
        var p = this.GetApi('Page');
        if (!p) return;
        p.HandleSubtitle()
    },
    UserPause: function(value) {
        var p = this.GetApi('Page');
        if (!p) return;
        p.Pause(value, true)
    },
    SetMouseSkin: function(skin) {
        var mouse = this.GetApi('Mouse');
        if (mouse) mouse.SetSkin(skin)
    },
    IsIdle: function() {
        var ticker = this.GetApi('Ticker');
        return ticker ? ticker.IsIdle(arguments[0]) : true
    },
    Template: function() {
        if (typeof arguments[0] != 'undefined') {
            this.template_ = arguments[0]
        }
        return this.template_
    },
    VideoTick: function() {
        var page = this.GetApi('Page');
        if (page) page.VideoTick()
    },
    SetupVideoMode: function(fps) {
        var page = this.GetApi('Page');
        if (page) page.SetupVideoMode(fps)
    },
    SetSearchTerm: function(st) {
        if (this.search_term_ == st) return;
        var page = this.GetApi('Page');
        if (page) {
            this.search_term_ = st;
            page.SetVariable('lib_searchstring', st);
            page.UpdateAllTextControls()
        }
    },
    ShowAllHighlights: function(s) {
        var p = this.GetApi('Page');
        if (p) p.ShowHighlights(s)
    }
};